(function (_angular_platformBrowserDynamic,core,_angular_platformBrowser,_angular_http,_angular_router,_angular_forms,angularInMemoryWebApi,_angular_common,_angular_material) {
'use strict';

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}



function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

var WelcomeComponent = (function () {
    function WelcomeComponent() {
        this.pageTitle = 'Welcome to the Store Manager App';
    }
    WelcomeComponent = __decorate([
        core.Component({
            template: "\uFEFF<div class=\"panel panel-primary\">\n  <div class=\"panel-heading\">\n    {{pageTitle}}\n  </div>\n  <div class=\"panel-body\"  >\n    <div class=\"row\">\n      <img src=\"assets/images/sm-logo.png\" class=\"img-responsive center-block logo\"/>\n    </div>\n  </div>\n</div>\n",
            styles: [""]
        })
    ], WelcomeComponent);
    return WelcomeComponent;
}());

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var root = createCommonjsModule(function (module, exports) {
"use strict";
exports.root = (typeof window == 'object' && window.window === window && window
    || typeof self == 'object' && self.self === self && self
    || typeof commonjsGlobal == 'object' && commonjsGlobal.global === commonjsGlobal && commonjsGlobal);
if (!exports.root) {
    throw new Error('RxJS could not find any global context (window, self, global)');
}
});

function isFunction(x) {
    return typeof x === 'function';
}
var isFunction_2 = isFunction;
var isFunction_1 = {
	isFunction: isFunction_2
};

var isArray_1 = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
var isArray = {
	isArray: isArray_1
};

function isObject(x) {
    return x != null && typeof x === 'object';
}
var isObject_2 = isObject;
var isObject_1 = {
	isObject: isObject_2
};

var errorObject_1 = { e: {} };
var errorObject = {
	errorObject: errorObject_1
};

var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject.errorObject.e = e;
        return errorObject.errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
var tryCatch_2 = tryCatch;

var tryCatch_1 = {
	tryCatch: tryCatch_2
};

var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var UnsubscriptionError = (function (_super) {
    __extends$2(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        _super.call(this);
        this.errors = errors;
        var err = Error.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
        this.name = err.name = 'UnsubscriptionError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return UnsubscriptionError;
}(Error));
var UnsubscriptionError_2 = UnsubscriptionError;
var UnsubscriptionError_1 = {
	UnsubscriptionError: UnsubscriptionError_2
};

var Subscription = (function () {
    function Subscription(unsubscribe) {
        this.closed = false;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        while (_parent) {
            _parent.remove(this);
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
            if (trial === errorObject.errorObject) {
                hasErrors = true;
                errors = errors || (errorObject.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject.errorObject.e.errors) : [errorObject.errorObject.e]);
            }
        }
        if (isArray.isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) {
                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject.errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject.errorObject.e;
                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            this._parent = parent;
        }
        else if (!_parents) {
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            _parents.push(parent);
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
var Subscription_2 = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
}
var Subscription_1 = {
	Subscription: Subscription_2
};

var empty = {
    closed: true,
    next: function (value) { },
    error: function (err) { throw err; },
    complete: function () { }
};
var Observer = {
	empty: empty
};

var Symbol$1 = root.root.Symbol;
var $$rxSubscriber = (typeof Symbol$1 === 'function' && typeof Symbol$1.for === 'function') ?
    Symbol$1.for('rxSubscriber') : '@@rxSubscriber';
var rxSubscriber = {
	$$rxSubscriber: $$rxSubscriber
};

var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber = (function (_super) {
    __extends$1(Subscriber, _super);
    function Subscriber(destinationOrNext, error, complete) {
        _super.call(this);
        this.syncErrorValue = null;
        this.syncErrorThrown = false;
        this.syncErrorThrowable = false;
        this.isStopped = false;
        switch (arguments.length) {
            case 0:
                this.destination = Observer.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    this.destination = Observer.empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        this.destination = destinationOrNext;
                        this.destination.add(this);
                    }
                    else {
                        this.syncErrorThrowable = true;
                        this.destination = new SafeSubscriber(this, destinationOrNext);
                    }
                    break;
                }
            default:
                this.syncErrorThrowable = true;
                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                break;
        }
    }
    Subscriber.prototype[rxSubscriber.$$rxSubscriber] = function () { return this; };
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription));
var Subscriber_2 = Subscriber;
var SafeSubscriber = (function (_super) {
    __extends$1(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        _super.call(this);
        this._parentSubscriber = _parentSubscriber;
        var next;
        var context = this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            context = observerOrNext;
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (isFunction_1.isFunction(context.unsubscribe)) {
                this.add(context.unsubscribe.bind(context));
            }
            context.unsubscribe = this.unsubscribe.bind(this);
        }
        this._context = context;
        this._next = next;
        this._error = error;
        this._complete = complete;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._error) {
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                throw err;
            }
            else {
                _parentSubscriber.syncErrorValue = err;
                _parentSubscriber.syncErrorThrown = true;
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._complete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._complete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            throw err;
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            parent.syncErrorValue = err;
            parent.syncErrorThrown = true;
            return true;
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));
var Subscriber_1 = {
	Subscriber: Subscriber_2
};

function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber.$$rxSubscriber]) {
            return nextOrObserver[rxSubscriber.$$rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_1.Subscriber(Observer.empty);
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
var toSubscriber_2 = toSubscriber;
var toSubscriber_1 = {
	toSubscriber: toSubscriber_2
};

function getSymbolObservable(context) {
    var $$observable;
    var Symbol = context.Symbol;
    if (typeof Symbol === 'function') {
        if (Symbol.observable) {
            $$observable = Symbol.observable;
        }
        else {
            $$observable = Symbol('observable');
            Symbol.observable = $$observable;
        }
    }
    else {
        $$observable = '@@observable';
    }
    return $$observable;
}
var getSymbolObservable_1 = getSymbolObservable;
var $$observable = getSymbolObservable(root.root);
var observable = {
	getSymbolObservable: getSymbolObservable_1,
	$$observable: $$observable
};

var Observable = (function () {
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable$$1 = new Observable();
        observable$$1.source = this;
        observable$$1.operator = operator;
        return observable$$1;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this._trySubscribe(sink));
        }
        if (sink.syncErrorThrowable) {
            sink.syncErrorThrowable = false;
            if (sink.syncErrorThrown) {
                throw sink.syncErrorValue;
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.syncErrorThrown = true;
            sink.syncErrorValue = err;
            sink.error(err);
        }
    };
    Observable.prototype.forEach = function (next, PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root.root.Rx && root.root.Rx.config && root.root.Rx.config.Promise) {
                PromiseCtor = root.root.Rx.config.Promise;
            }
            else if (root.root.Promise) {
                PromiseCtor = root.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var subscription = _this.subscribe(function (value) {
                if (subscription) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscription.unsubscribe();
                    }
                }
                else {
                    next(value);
                }
            }, reject, resolve);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        return this.source.subscribe(subscriber);
    };
    Observable.prototype[observable.$$observable] = function () {
        return this;
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
var Observable_2 = Observable;
var Observable_1 = {
	Observable: Observable_2
};

var __extends$4 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ScalarObservable = (function (_super) {
    __extends$4(ScalarObservable, _super);
    function ScalarObservable(value, scheduler) {
        _super.call(this);
        this.value = value;
        this.scheduler = scheduler;
        this._isScalar = true;
        if (scheduler) {
            this._isScalar = false;
        }
    }
    ScalarObservable.create = function (value, scheduler) {
        return new ScalarObservable(value, scheduler);
    };
    ScalarObservable.dispatch = function (state) {
        var done = state.done, value = state.value, subscriber = state.subscriber;
        if (done) {
            subscriber.complete();
            return;
        }
        subscriber.next(value);
        if (subscriber.closed) {
            return;
        }
        state.done = true;
        this.schedule(state);
    };
    ScalarObservable.prototype._subscribe = function (subscriber) {
        var value = this.value;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ScalarObservable.dispatch, 0, {
                done: false, value: value, subscriber: subscriber
            });
        }
        else {
            subscriber.next(value);
            if (!subscriber.closed) {
                subscriber.complete();
            }
        }
    };
    return ScalarObservable;
}(Observable_1.Observable));
var ScalarObservable_2 = ScalarObservable;
var ScalarObservable_1 = {
	ScalarObservable: ScalarObservable_2
};

var __extends$5 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EmptyObservable = (function (_super) {
    __extends$5(EmptyObservable, _super);
    function EmptyObservable(scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
    }
    EmptyObservable.create = function (scheduler) {
        return new EmptyObservable(scheduler);
    };
    EmptyObservable.dispatch = function (arg) {
        var subscriber = arg.subscriber;
        subscriber.complete();
    };
    EmptyObservable.prototype._subscribe = function (subscriber) {
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
        }
        else {
            subscriber.complete();
        }
    };
    return EmptyObservable;
}(Observable_1.Observable));
var EmptyObservable_2 = EmptyObservable;
var EmptyObservable_1 = {
	EmptyObservable: EmptyObservable_2
};

function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
var isScheduler_2 = isScheduler;
var isScheduler_1 = {
	isScheduler: isScheduler_2
};

var __extends$3 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ArrayObservable = (function (_super) {
    __extends$3(ArrayObservable, _super);
    function ArrayObservable(array, scheduler) {
        _super.call(this);
        this.array = array;
        this.scheduler = scheduler;
        if (!scheduler && array.length === 1) {
            this._isScalar = true;
            this.value = array[0];
        }
    }
    ArrayObservable.create = function (array, scheduler) {
        return new ArrayObservable(array, scheduler);
    };
    ArrayObservable.of = function () {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i - 0] = arguments[_i];
        }
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len > 1) {
            return new ArrayObservable(array, scheduler);
        }
        else if (len === 1) {
            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
        }
        else {
            return new EmptyObservable_1.EmptyObservable(scheduler);
        }
    };
    ArrayObservable.dispatch = function (state) {
        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
        if (index >= count) {
            subscriber.complete();
            return;
        }
        subscriber.next(array[index]);
        if (subscriber.closed) {
            return;
        }
        state.index = index + 1;
        this.schedule(state);
    };
    ArrayObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var array = this.array;
        var count = array.length;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ArrayObservable.dispatch, 0, {
                array: array, index: index, count: count, subscriber: subscriber
            });
        }
        else {
            for (var i = 0; i < count && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayObservable;
}(Observable_1.Observable));
var ArrayObservable_2 = ArrayObservable;
var ArrayObservable_1 = {
	ArrayObservable: ArrayObservable_2
};

var __extends$7 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber = (function (_super) {
    __extends$7(OuterSubscriber, _super);
    function OuterSubscriber() {
        _super.apply(this, arguments);
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber_1.Subscriber));
var OuterSubscriber_2 = OuterSubscriber;
var OuterSubscriber_1 = {
	OuterSubscriber: OuterSubscriber_2
};

var isArrayLike_1 = (function (x) { return x && typeof x.length === 'number'; });
var isArrayLike = {
	isArrayLike: isArrayLike_1
};

function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
var isPromise_2 = isPromise;
var isPromise_1 = {
	isPromise: isPromise_2
};

function symbolIteratorPonyfill(root$$1) {
    var Symbol = root$$1.Symbol;
    if (typeof Symbol === 'function') {
        if (!Symbol.iterator) {
            Symbol.iterator = Symbol('iterator polyfill');
        }
        return Symbol.iterator;
    }
    else {
        var Set_1 = root$$1.Set;
        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
            return '@@iterator';
        }
        var Map_1 = root$$1.Map;
        if (Map_1) {
            var keys = Object.getOwnPropertyNames(Map_1.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
                    return key;
                }
            }
        }
        return '@@iterator';
    }
}
var symbolIteratorPonyfill_1 = symbolIteratorPonyfill;
var $$iterator = symbolIteratorPonyfill(root.root);
var iterator = {
	symbolIteratorPonyfill: symbolIteratorPonyfill_1,
	$$iterator: $$iterator
};

var __extends$8 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var InnerSubscriber = (function (_super) {
    __extends$8(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        _super.call(this);
        this.parent = parent;
        this.outerValue = outerValue;
        this.outerIndex = outerIndex;
        this.index = 0;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber_1.Subscriber));
var InnerSubscriber_2 = InnerSubscriber;
var InnerSubscriber_1 = {
	InnerSubscriber: InnerSubscriber_2
};

function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    if (destination.closed) {
        return null;
    }
    if (result instanceof Observable_1.Observable) {
        if (result._isScalar) {
            destination.next(result.value);
            destination.complete();
            return null;
        }
        else {
            return result.subscribe(destination);
        }
    }
    else if (isArrayLike.isArrayLike(result)) {
        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
            destination.next(result[i]);
        }
        if (!destination.closed) {
            destination.complete();
        }
    }
    else if (isPromise_1.isPromise(result)) {
        result.then(function (value) {
            if (!destination.closed) {
                destination.next(value);
                destination.complete();
            }
        }, function (err) { return destination.error(err); })
            .then(null, function (err) {
            root.root.setTimeout(function () { throw err; });
        });
        return destination;
    }
    else if (result && typeof result[iterator.$$iterator] === 'function') {
        var iterator$$1 = result[iterator.$$iterator]();
        do {
            var item = iterator$$1.next();
            if (item.done) {
                destination.complete();
                break;
            }
            destination.next(item.value);
            if (destination.closed) {
                break;
            }
        } while (true);
    }
    else if (result && typeof result[observable.$$observable] === 'function') {
        var obs = result[observable.$$observable]();
        if (typeof obs.subscribe !== 'function') {
            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
        }
        else {
            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
        }
    }
    else {
        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = ("You provided " + value + " where a stream was expected.")
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        destination.error(new TypeError(msg));
    }
    return null;
}
var subscribeToResult_2 = subscribeToResult;
var subscribeToResult_1 = {
	subscribeToResult: subscribeToResult_2
};

var __extends$6 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return this.lift(new MergeAllOperator(concurrent));
}
var mergeAll_2 = mergeAll;
var MergeAllOperator = (function () {
    function MergeAllOperator(concurrent) {
        this.concurrent = concurrent;
    }
    MergeAllOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));
    };
    return MergeAllOperator;
}());
var MergeAllOperator_1 = MergeAllOperator;
var MergeAllSubscriber = (function (_super) {
    __extends$6(MergeAllSubscriber, _super);
    function MergeAllSubscriber(destination, concurrent) {
        _super.call(this, destination);
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
    }
    MergeAllSubscriber.prototype._next = function (observable) {
        if (this.active < this.concurrent) {
            this.active++;
            this.add(subscribeToResult_1.subscribeToResult(this, observable));
        }
        else {
            this.buffer.push(observable);
        }
    };
    MergeAllSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeAllSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var MergeAllSubscriber_1 = MergeAllSubscriber;
var mergeAll_1 = {
	mergeAll: mergeAll_2,
	MergeAllOperator: MergeAllOperator_1,
	MergeAllSubscriber: MergeAllSubscriber_1
};

function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return this.lift.call(concatStatic.apply(void 0, [this].concat(observables)));
}
var concat_2 = concat;
function concatStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var scheduler = null;
    var args = observables;
    if (isScheduler_1.isScheduler(args[observables.length - 1])) {
        scheduler = args.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
        return observables[0];
    }
    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));
}
var concatStatic_1 = concatStatic;
var concat_1 = {
	concat: concat_2,
	concatStatic: concatStatic_1
};

function startWith$2() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i - 0] = arguments[_i];
    }
    var scheduler = array[array.length - 1];
    if (isScheduler_1.isScheduler(scheduler)) {
        array.pop();
    }
    else {
        scheduler = null;
    }
    var len = array.length;
    if (len === 1) {
        return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);
    }
    else if (len > 1) {
        return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);
    }
    else {
        return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);
    }
}
var startWith_2 = startWith$2;
var startWith_1 = {
	startWith: startWith_2
};

Observable_1.Observable.prototype.startWith = startWith_1.startWith;

var StoreListMapDialogComponent = (function () {
    function StoreListMapDialogComponent(dialogRef) {
        this.dialogRef = dialogRef;
    }
    StoreListMapDialogComponent.prototype.onMarker = function (evt) {
        var marker = evt.target;
        marker.ng2MapComponent.openInfoWindow('iw', marker, { name: this.name });
    };
    StoreListMapDialogComponent = __decorate([
        core.Component({
            template: "<div md-dialog-title class=\"md-dialog-title-store\">\n  Store Location:\n  <a class=\"btn btn-warning btn-sm\" style=\"width:80px\"\n  (click)=\"dialogRef.close()\">\n    <i class=\"glyphicon glyphicon-remove\"></i> Close\n  </a>\n</div>\n\n<md-dialog-content class=\"md-dialog-content-store\">\n  <md-card>\n    <ng2-map center=\"{{address}}\">\n      <marker position=\"{{address}}\" draggable=\"true\" (click)=\"onMarker($event)\"></marker>\n      <info-window id=\"iw\">Store: [[name]]</info-window>\n    </ng2-map>\n  </md-card>\n</md-dialog-content>\n"
        })
    ], StoreListMapDialogComponent);
    return StoreListMapDialogComponent;
}());

var StoreListComponent = (function () {
    function StoreListComponent(storeService, dialog) {
        this.storeService = storeService;
        this.dialog = dialog;
        this.pageTitle = 'Store List';
        this.imageWidth = 60;
        this.imageMargin = 2;
        this.showImage = true;
        this.showTools = true;
        this.showBar = false;
        this.updated = false;
        this.updateMessage = ' - Store Updated!';
        this.deleted = false;
        this.deleteMessage = ' - Store Deleted!';
        this.storeNoDuplicateFilter = 'address';
        this.placeholderFilter = 'Looking for...';
        this.errorMessage = '';
        this.storeFilterInput = '';
        this.storeFilterMsg = '';
        this.orderByFilter = 'name';
        this.cityFilterInput = '';
        this.cityList = [
            'Berlin',
            'Bochum',
            'Darmstadt',
            'Gelsenkirchen',
            'Hamburg',
            'Kiel',
            'Köln',
            'München',
            'Trier',
            'Witten'
        ];
        this.startCityCtrl();
    }
    StoreListComponent.prototype.startCityCtrl = function () {
        var _this = this;
        this.cityCtrl = new _angular_forms.FormControl();
        this.filteredCities = this.cityCtrl.valueChanges
            .startWith(null)
            .map(function (name) { return _this.filterCitiesInput(name); });
    };
    StoreListComponent.prototype.filterCitiesInput = function (val) {
        return val ?
            this.cityList.filter(function (s) { return new RegExp(val, 'gi').test(s); })
            : this.cityList;
    };
    StoreListComponent.prototype.setFilterValue = function (input, type) {
        type === 'search' ? (this.cityCtrl.setValue(''),
            this.storeFilterMsg = '- Filtered by: ',
            this.storeFilterInput = input,
            this.storeFilterFields = ['name', 'address']) : (this.cityFilterInput = '',
            this.storeFilterMsg = '- Filtered by city: ',
            this.storeFilterInput = this.cityCtrl.value,
            this.storeFilterFields = ['address']);
    };
    StoreListComponent.prototype.displayFilter = function () {
        return this.storeFilterMsg + this.storeFilterInput;
    };
    StoreListComponent.prototype.toggleImage = function () {
        this.showImage = !this.showImage;
    };
    StoreListComponent.prototype.getStores = function () {
        var _this = this;
        this.storeService.getStores().subscribe(function (stores) { return _this.stores = stores; }, function (error) { return _this.errorMessage = error; }, function () {
            if (_this.showBar) {
                _this.showBar = false;
                _this.deleted = true;
            }
            
            // Set default filter
            // this.orderByFilter = 'name';
            // Set default store image
            // for (let store of this.stores) {
            // 	store['imageUrl'] =
            // 	 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png';
            // };
            // Remove duplicated addresses
            // var noDuplicateStores = [];
            // var addresses = [];
            // var key = "";
            // for (let store of this.stores) {
            //   key = store['address'];
            //   if (addresses.indexOf(key) === -1) {
            //     addresses.push(key);
            //     noDuplicateStores.push(store);
            //   }
            // };
            // Remove duplicated addresses
            // Using filter method
            var addressList = [];
            var noDuplicateStores = _this.stores.filter(function (store) {
                return (addressList.indexOf(store['address']) === -1) ?
                    addressList.push(store['address'])
                    : false;
            });
            _this.stores = noDuplicateStores.slice();
            // Filter JSON by fields
            // let filteredObject = {},
            // filteredArray = [],
            // p = new Set(Object.keys(this.stores[0])),
            // blacklist: string[] = ['styleUrl', 'ExtendedData'];
            // blacklist.forEach(a => p.delete(a));
            // for (var i in this.stores) {
            // 	filteredObject['id'] = i;
            // 	p.forEach(k => filteredObject[k] = this.stores[i][k]);
            // 	filteredArray.push(filteredObject);
            // 	filteredObject = {};
            // }
            // console.log(JSON.stringify(filteredArray));
            // Create Cities List
            // let citiesList = this.stores.reduce((acc,curr) => {
            // 	let posi = curr.description.indexOf('- Stadt:') + 9;
            // 	let posf = curr.description.indexOf('<br>Adresse - Staat');
            // 	let city = curr.description.substring(posi, posf);
            // 	if (acc.indexOf(city)===-1) {
            // 		acc.push(city);
            // 	}
            // 	return acc;
            // }, []);
        });
    };
    StoreListComponent.prototype.deleteStore = function (id) {
        var _this = this;
        this.showBar = true;
        this.deleted = false;
        this.storeService.deleteStore(id).subscribe(function (result) {
            _this.getStores();
            // let updatedStores = this.stores.filter(store => store.id !== id);
            // this.stores = JSON.parse(JSON.stringify(updatedStores));
        }, function (error) {
            _this.errorMessage = error;
            _this.showBar = false;
        });
    };
    StoreListComponent.prototype.openDialog = function (address, name) {
        var dialogRef = this.dialog.open(StoreListMapDialogComponent);
        dialogRef.componentInstance.address = address;
        dialogRef.componentInstance.name = name;
    };
    StoreListComponent.prototype.ngOnInit = function () {
        this.getStores();
    };
    StoreListComponent = __decorate([
        core.Component({
            template: "<div class=\"panel panel-primary\">\n  <div class=\"panel-heading\">\n    {{pageTitle}} <span *ngIf=\"storeFilterInput.length\"> {{displayFilter()}}</span>\n    <md-progress-bar *ngIf=\"showBar\" color=\"accent\" mode=\"indeterminate\"></md-progress-bar>\n    <span *ngIf=\"updated\" class=\"updated\">\n       {{updateMessage}}\n      <span class=\"glyphicon glyphicon-ok-circle\"></span>\n    </span>\n    <span *ngIf=\"deleted\" class=\"deleted\">\n       {{deleteMessage}}\n      <span class=\"glyphicon glyphicon-remove-circle\"></span>\n    </span>\n  </div>\n  <div class=\"panel-body\">\n    <md-card>\n      <div class=\"row\">\n        <div class=\"form-group col-md-3\">\n          <md-input-container>\n            <input mdInput placeholder=\"City\" [mdAutocomplete]=\"auto\" [formControl]=\"cityCtrl\" #cityFilter (keyup)=\"setFilterValue(cityFilter.value, 'city')\" />\n          </md-input-container>\n          <md-autocomplete #auto=\"mdAutocomplete\">\n            <md-option *ngFor=\"let city of filteredCities | async\" [value]=\"city\" (click)=\"setFilterValue(city, 'city')\">\n              {{ city }}\n            </md-option>\n          </md-autocomplete>\n        </div>\n        <div class=\"form-group col-md-4\">\n          <label for=\"sel1\">Search:</label>\n          <input id=\"sel1\" type=\"text\" class=\"form-control\"  [placeholder]=\"placeholderFilter\" [(ngModel)]=\"cityFilterInput\" #searchFilter (keyup)=\"setFilterValue(searchFilter.value, 'search')\" />\n        </div>\n        <div class=\"form-group col-md-5\">\n          <label for=\"sel3\">Order By:</label>\n          <select id=\"sel3\" class=\"form-control\" [(ngModel)]=\"orderByFilter\">\n            <option value=\"name\" selected>Store Name</option>\n            <option value=\"address\">Store Address</option>\n          </select>\n        </div>\n      </div>\n    </md-card>\n    <div class=\"table-responsive\">\n      <table class=\"table\" *ngIf=\"stores && stores.length\">\n        <thead>\n          <tr>\n            <th>\n              <button class=\"btn btn-primary btn-sm\" (click)=\"toggleImage()\">\n                {{showImage ? \"Hide\" : \"Show\"}} Image\n              </button>\n            </th>\n            <th>Index</th>\n            <th>Store</th>\n            <th>Address</th>\n            <th>\n              <md-slide-toggle class=\"md-slide-toggle-store\" [(ngModel)]=\"showTools\">\n              </md-slide-toggle>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let store of stores  |\n                storeFieldFilter:storeNoDuplicateFilter | storeFilter:storeFilterInput:storeFilterFields | orderBy:orderByFilter;\n                let i = index\">\n            <td>\n              <img *ngIf=\"showImage\" [src]=\"store.imageUrl\" [title]=\"store.name\" [style.width.px]=\"imageWidth\" [style.margin.px]=\"imageMargin\">\n            </td>\n            <td>{{ i+1 }}</td>\n            <td>{{ store.name }}</td>\n            <td>{{ store.address }}</td>\n            <td>\n              <div *ngIf=\"showTools\">\n                <div class=\"showTools\">\n                <a href=\"#\" class=\"btn btn-info btn-sm\" (click)=\"$event.preventDefault(); openDialog(store.address, store.name)\">\n                  <span class=\"glyphicon glyphicon-map-marker\"></span> Map\n                </a>\n                </div>\n                <div class=\"showTools\">\n                <button md-icon-button [mdMenuTriggerFor]=\"menu\">\n                  <md-icon>more_vert</md-icon>\n                </button>\n                <md-menu #menu=\"mdMenu\">\n                  <button md-menu-item>\n                    <md-icon>border_color</md-icon>\n                    <span>Edit</span>\n                  </button>\n                  <button md-menu-item (click)=\"deleteStore(store.id)\">\n                    <md-icon>delete</md-icon>\n                    <span>Delete</span>\n                  </button>\n                  <button md-menu-item disabled>\n                    <md-icon>build</md-icon>\n                    <span>Config</span>\n                  </button>\n                </md-menu>\n                </div>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n",
            styles: ["table {\n  margin: 20px;\n}\nthead {\n    color: #337AB7;\n}\ntd {\n  vertical-align: middle;\n}\n"]
        })
    ], StoreListComponent);
    return StoreListComponent;
}());

var appRoutes = [
    { path: 'welcome', component: WelcomeComponent },
    { path: 'stores', component: StoreListComponent },
    // { path: 'products', component: ProductListComponent },
    // { path: 'product/:id',
    //     canActivate: [ ProductDetailGuard ],
    //     component: ProductDetailComponent },
    // Default
    { path: '', redirectTo: 'welcome', pathMatch: 'full' },
    // Wildcard
    { path: '**', redirectTo: 'welcome', pathMatch: 'full' }
];
var AppRoutingModule = (function () {
    function AppRoutingModule() {
    }
    AppRoutingModule = __decorate([
        core.NgModule({
            imports: [
                _angular_router.RouterModule.forRoot(appRoutes)
            ],
            exports: [_angular_router.RouterModule]
        })
    ], AppRoutingModule);
    return AppRoutingModule;
}());

var InMemoryDataService = (function () {
    function InMemoryDataService() {
    }
    InMemoryDataService.prototype.createDb = function () {
        var products = [
            {
                'id': 1,
                'productName': 'Food Big Salad',
                'productCode': '71300',
                'releaseDate': '2013-11-23',
                'description': 'This glitch clipart is about food, big, salad.',
                'price': 15.95,
                'starRating': 2.2,
                'imageUrl': 'assets/images/products/food-big-salad.jpg'
            },
            {
                'id': 2,
                'productName': 'Food Fruit Salad',
                'productCode': '45842',
                'releaseDate': '2014-11-23',
                'description': 'This glitch clipart is about food, fruit, salad.',
                'price': 21.95,
                'starRating': 4.5,
                'imageUrl': 'assets/images/products/food-fruit-salad.jpg'
            },
            {
                'id': 3,
                'productName': 'Food Obvious Panini',
                'productCode': '128443',
                'releaseDate': '2015-11-23',
                'description': 'This glitch clipart is about food, obvious, panini.',
                'price': 18.95,
                'starRating': 3.8,
                'imageUrl': 'assets/images/products/food-obvious-panini.jpg'
            },
            {
                'id': 4,
                'productName': 'Food Fancy Cheese',
                'productCode': '11247',
                'releaseDate': '2016-11-23',
                'description': '15-inch steel blade hand saw',
                'price': 10.95,
                'starRating': 2.7,
                'imageUrl': 'assets/images/products/food-fancy-cheese.jpg'
            },
            {
                'id': 5,
                'productName': 'Fast Food Menu',
                'productCode': '135029',
                'releaseDate': '2011-07-19',
                'description': 'Standard fast food menu',
                'price': 15.95,
                'starRating': 3.5,
                'imageUrl': 'assets/images/products/fast-food-menu.jpg'
            },
            {
                'id': 6,
                'productName': 'Food Snack Pack',
                'productCode': '59273',
                'releaseDate': '2011-07-19',
                'description': 'Standard food Snack Pack',
                'price': 12.95,
                'starRating': 4.5,
                'imageUrl': 'assets/images/products/food-snack-pack.jpg'
            },
            {
                'id': 7,
                'productName': 'Sushi Food',
                'productCode': '125029',
                'releaseDate': '2011-07-19',
                'description': 'Standard shushi food',
                'price': 25.95,
                'starRating': 4.8,
                'imageUrl': 'assets/images/products/osechi.jpg'
            }
        ];
        var stores = [{ 'id': '0', 'name': 'Adolph\'s Café', 'description': 'Adresse - Adresse: 559 Neusser Straße<br>Adresse - Postleitzahl: 50737<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': '559 Neusser Straße 50737 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '1', 'name': 'Adolph\'s Gasthaus', 'description': 'Adresse - Adresse: Rüdellstraße 1<br>Adresse - Postleitzahl: 50737<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Rüdellstraße 1 50737 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '2', 'name': 'Ahoi', 'description': 'Adresse - Adresse: Ditmar-Koel-Straße 16<br>Adresse - Postleitzahl: 20459<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Ditmar-Koel-Straße 16 20459 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '3', 'name': 'Alte Welt Siralti', 'description': 'Adresse - Adresse: Wissmannstraße 44<br>Adresse - Postleitzahl: 12049<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Wissmannstraße 44 12049 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '4', 'name': 'Amma Catering', 'description': 'Adresse - Adresse: Bundesallee 192<br>Adresse - Postleitzahl: 10717<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': 'Bundesallee 192 10717 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '5', 'name': 'Anand', 'description': 'Adresse - Adresse: Albrechtstraße 12<br>Adresse - Postleitzahl: 10117<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Albrechtstraße 12 10117 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '6', 'name': 'Anantha Raja', 'description': 'Adresse - Adresse: 16 Zossener Straße<br>Adresse - Postleitzahl: 10961<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '16 Zossener Straße 10961 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '7', 'name': 'Arjun', 'description': 'Adresse - Adresse: Königin-Elisabeth-Straße 8<br>Adresse - Postleitzahl: 14059<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': 'Königin-Elisabeth-Straße 8 14059 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '8', 'name': 'Aura', 'description': 'Adresse - Adresse: 46 Greifswalder Straße<br>Adresse - Postleitzahl: 10405<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '46 Greifswalder Straße 10405 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '9', 'name': 'Aviva Catering', 'description': 'Adresse - Adresse: Bernhardstraße 18<br>Adresse - Postleitzahl: 10715<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Bernhardstraße 18 10715 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '10', 'name': 'B\'s', 'description': 'Adresse - Adresse: Kiehlufer 85<br>Adresse - Postleitzahl: 12059<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Kiehlufer 85 12059 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '11', 'name': 'Bab Al Hara Orientalisches Eiscafé', 'description': 'Adresse - Adresse: Sonnenallee 70<br>Adresse - Postleitzahl: 12045<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Sonnenallee 70 12045 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '12', 'name': 'Back & Snack', 'description': 'Adresse - Adresse: Lieselotte-Berger-Straße 34<br>Adresse - Postleitzahl: 12355<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Lieselotte-Berger-Straße 34 12355 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '13', 'name': 'Back Shop', 'description': 'Adresse - Adresse: Paul-Heyse-Straße 4<br>Adresse - Postleitzahl: 10407<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Paul-Heyse-Straße 4 10407 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '14', 'name': 'Bäcker Günstig', 'description': 'Adresse - Adresse: Augustenstr. 38<br>Adresse - Postleitzahl: 24143<br>Adresse - Stadt: Kiel<br>Adresse - Staat: <br>Adresse - Land: Deutschland', 'address': 'Augustenstr. 38 24143 Kiel Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '15', 'name': 'Bäckerei Café Moin Moin', 'description': 'Adresse - Adresse: Griesstraße 1<br>Adresse - Postleitzahl: 20535<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Griesstraße 1 20535 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '16', 'name': 'Backshop Cafe TIRO', 'description': 'Adresse - Adresse: Am Westpark 8<br>Adresse - Postleitzahl: 81373<br>Adresse - Stadt: München<br>Adresse - Staat: Bayern<br>Adresse - Land: Germany', 'address': 'Am Westpark 8 81373 München Bayern Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '17', 'name': 'Banat Bäckerei', 'description': 'Adresse - Adresse: Gneisenaustraße 85<br>Adresse - Postleitzahl: 10961<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': 'Gneisenaustraße 85 10961 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '18', 'name': 'Barkett', 'description': 'Adresse - Adresse: Czeminskistraße 10<br>Adresse - Postleitzahl: 10829<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Czeminskistraße 10 10829 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '19', 'name': 'Berlin Burrito Company Kastanienallee', 'description': 'Adresse - Adresse: Kastanienallee 59<br>Adresse - Postleitzahl: 10119<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Kastanienallee 59 10119 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '20', 'name': 'Berlin Burrito Company Pallasstraße', 'description': 'Adresse - Adresse: Pallasstraße 21<br>Adresse - Postleitzahl: 10781<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Pallasstraße 21 10781 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '21', 'name': 'Bistro Milou', 'description': 'Adresse - Adresse: Bundesstraße 96<br>Adresse - Postleitzahl: 20144<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Deutschland', 'address': 'Bundesstraße 96 20144 Hamburg Hamburg Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '22', 'name': 'Bistro Münzburg', 'description': 'Adresse - Adresse: 11 Münzplatz<br>Adresse - Postleitzahl: 20097<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': '11 Münzplatz 20097 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '23', 'name': 'Black Cat', 'description': 'Adresse - Adresse: Prenzlauer Allee 48<br>Adresse - Postleitzahl: 10405<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Prenzlauer Allee 48 10405 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '24', 'name': 'Blueberry Coffees', 'description': 'Adresse - Adresse: Uhlandstraße 167<br>Adresse - Postleitzahl: 10719<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Uhlandstraße 167 10719 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '25', 'name': 'Bottega Nr. 6', 'description': 'Adresse - Adresse: Richardstraße 6<br>Adresse - Postleitzahl: 12043<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Richardstraße 6 12043 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '26', 'name': 'Brammibal\'s Vegan Donuts', 'description': 'Adresse - Adresse: Maybachufer 8<br>Adresse - Postleitzahl: 12047<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Maybachufer 8 12047 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '27', 'name': 'Brasserie La Bonne Franquette', 'description': 'Adresse - Adresse: Chausseestraße 110<br>Adresse - Postleitzahl: 10115<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Chausseestraße 110 10115 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '28', 'name': 'Brauhaus Quetsch', 'description': 'Adresse - Adresse: Hauptstraße 7<br>Adresse - Postleitzahl: 50996<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Hauptstraße 7 50996 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '29', 'name': 'Brezel Bar', 'description': 'Adresse - Adresse: Friesenstraße 2<br>Adresse - Postleitzahl: 10965<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': 'Friesenstraße 2 10965 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '30', 'name': 'Bunte Burger Food Bar', 'description': 'Adresse - Adresse: Hospeltstraße 1<br>Adresse - Postleitzahl: 50825<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Hospeltstraße 1 50825 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '31', 'name': 'Café 53', 'description': 'Adresse - Adresse: Weidenallee 53<br>Adresse - Postleitzahl: 20357<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Weidenallee 53 20357 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '32', 'name': 'Café am Markt', 'description': 'Adresse - Adresse: 166 Köpenicker Straße<br>Adresse - Postleitzahl: 12355<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '166 Köpenicker Straße 12355 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '33', 'name': 'Café Amira', 'description': 'Adresse - Adresse: Eppendorfer Weg 255<br>Adresse - Postleitzahl: 20251<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Eppendorfer Weg 255 20251 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '34', 'name': 'Café Bäckerei', 'description': 'Adresse - Adresse: 56 Grünberger Straße<br>Adresse - Postleitzahl: 10245<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '56 Grünberger Straße 10245 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '35', 'name': 'Café Bäckerei Kollwitz', 'description': 'Adresse - Adresse: Sredzkistraße 51<br>Adresse - Postleitzahl: 10435<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Sredzkistraße 51 10435 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '36', 'name': 'Café Backshop Sonnenwinkel', 'description': 'Adresse - Adresse: Gäblerstraße 96<br>Adresse - Postleitzahl: 13086<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Gäblerstraße 96 13086 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '37', 'name': 'Café Bahar', 'description': 'Adresse - Adresse: 504 Aachener Straße<br>Adresse - Postleitzahl: 50933<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': '504 Aachener Straße 50933 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '38', 'name': 'Café Basecamp', 'description': 'Adresse - Adresse: Mittelstraße 51<br>Adresse - Postleitzahl: 10117<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Mittelstraße 51 10117 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '39', 'name': 'Café Berio', 'description': 'Adresse - Adresse: Maaßenstraße 7<br>Adresse - Postleitzahl: 10777<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Maaßenstraße 7 10777 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '40', 'name': 'Café Chaussee', 'description': 'Adresse - Adresse: Eimsbütteler Chaussee 71<br>Adresse - Postleitzahl: 20259<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Eimsbütteler Chaussee 71 20259 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '41', 'name': 'Café Corner', 'description': 'Adresse - Adresse: Grafenstraße 35<br>Adresse - Postleitzahl: 64283<br>Adresse - Stadt: Darmstadt<br>Adresse - Staat: Hessen<br>Adresse - Land: Deutschland', 'address': 'Grafenstraße 35 64283 Darmstadt Hessen Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '42', 'name': 'Café Cup Arkona', 'description': 'Adresse - Adresse: 10 Arkonaplatz<br>Adresse - Postleitzahl: 10435<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '10 Arkonaplatz 10435 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '43', 'name': 'Café David', 'description': 'Adresse - Adresse: Grindelhof 63<br>Adresse - Postleitzahl: 20146<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Grindelhof 63 20146 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '44', 'name': 'Café Einstein', 'description': 'Adresse - Adresse: Friedrichstraße 206<br>Adresse - Postleitzahl: 10969<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': 'Friedrichstraße 206 10969 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '45', 'name': 'Café FreiRaum', 'description': 'Adresse - Adresse: Katzbachstraße 24<br>Adresse - Postleitzahl: 10965<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Katzbachstraße 24 10965 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '46', 'name': 'Café Fromme', 'description': 'Adresse - Adresse: 122 Breite Straße<br>Adresse - Postleitzahl: 50667<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': '122 Breite Straße 50667 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '47', 'name': 'Café Hilde', 'description': 'Adresse - Adresse: 22 Metzer Straße<br>Adresse - Postleitzahl: 10405<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '22 Metzer Straße 10405 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '48', 'name': 'Café Ines', 'description': 'Adresse - Adresse: Julius-Vosseler-Straße 42<br>Adresse - Postleitzahl: 22527<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Julius-Vosseler-Straße 42 22527 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '49', 'name': 'Cafe Insonne GbR', 'description': 'Adresse - Adresse: Windscheidstraße 22<br>Adresse - Postleitzahl: 10627<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': 'Windscheidstraße 22 10627 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '50', 'name': 'Café Kuchen', 'description': 'Adresse - Adresse: 6 Wiesbadener Straße<br>Adresse - Postleitzahl: 12161<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '6 Wiesbadener Straße 12161 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '51', 'name': 'Cafe Milou', 'description': 'Adresse - Adresse: Poelchaukamp 19<br>Adresse - Postleitzahl: 22301<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Deutschland', 'address': 'Poelchaukamp 19 22301 Hamburg Hamburg Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '52', 'name': 'Café Morgestund', 'description': 'Adresse - Adresse: Mundsburger Damm 36<br>Adresse - Postleitzahl: 22087<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Mundsburger Damm 36 22087 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '53', 'name': 'Café Naugarder', 'description': 'Adresse - Adresse: 45 Naugarder Straße<br>Adresse - Postleitzahl: 10409<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '45 Naugarder Straße 10409 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '54', 'name': 'Café Nix Verstehen', 'description': 'Adresse - Adresse: Oranienstraße 64<br>Adresse - Postleitzahl: 10969<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Oranienstraße 64 10969 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '55', 'name': 'Café Pastelaria', 'description': 'Adresse - Adresse: Grindelallee 168<br>Adresse - Postleitzahl: 20144<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Grindelallee 168 20144 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '56', 'name': 'Café Rosenrot', 'description': 'Adresse - Adresse: Ossietzkystraße 2<br>Adresse - Postleitzahl: 13187<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Ossietzkystraße 2 13187 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '57', 'name': 'Café Schöneweile', 'description': 'Adresse - Adresse: Reinbeckstraße 9<br>Adresse - Postleitzahl: 12459<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Reinbeckstraße 9 12459 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '58', 'name': 'Café Schönhausen', 'description': 'Adresse - Adresse: Florastraße 27<br>Adresse - Postleitzahl: 13187<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Florastraße 27 13187 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '59', 'name': 'Café Sha', 'description': 'Adresse - Adresse: Daimlerstraße 12<br>Adresse - Postleitzahl: 22763<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Daimlerstraße 12 22763 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '60', 'name': 'Cafe Strauss', 'description': 'Adresse - Adresse: Wiesenstraße 46<br>Adresse - Postleitzahl: 20255<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Deutschland', 'address': 'Wiesenstraße 46 20255 Hamburg Hamburg Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '61', 'name': 'Café Susam', 'description': 'Adresse - Adresse: Beusselstraße 77<br>Adresse - Postleitzahl: 10553<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Beusselstraße 77 10553 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '62', 'name': 'Cafe Tietz & Cie', 'description': 'Adresse - Adresse: Potsdamer Straße 77<br>Adresse - Postleitzahl: 10785<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': 'Potsdamer Straße 77 10785 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '63', 'name': 'Café Trainspot', 'description': 'Adresse - Adresse: Am Lokdepot 1<br>Adresse - Postleitzahl: 10965<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Am Lokdepot 1 10965 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '64', 'name': 'Café Von Luck Auerbachstraße', 'description': 'Adresse - Adresse: Auerbachstraße 10<br>Adresse - Postleitzahl: 14193<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Auerbachstraße 10 14193 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '65', 'name': 'Café Von Luck Von-Luck-Straße', 'description': 'Adresse - Adresse: Von-Luck-Straße 27<br>Adresse - Postleitzahl: 14129<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': 'Von-Luck-Straße 27 14129 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '66', 'name': 'Caffè al Volo', 'description': 'Adresse - Adresse: Hudtwalckerstraße 18<br>Adresse - Postleitzahl: 22299<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Hudtwalckerstraße 18 22299 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '67', 'name': 'Cake', 'description': 'Adresse - Adresse: Prenzlauer Allee 229<br>Adresse - Postleitzahl: 10405<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': 'Prenzlauer Allee 229 10405 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '68', 'name': 'Carisma Bakery', 'description': 'Adresse - Adresse: 19 Joachimsthaler Straße<br>Adresse - Postleitzahl: 10719<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '19 Joachimsthaler Straße 10719 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '69', 'name': 'Chakra Café', 'description': 'Adresse - Adresse: Susannenstraße 11<br>Adresse - Postleitzahl: 20357<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Susannenstraße 11 20357 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '70', 'name': 'Charlie’s Vegan Food', 'description': 'Adresse - Adresse: Oranienstraße 187<br>Adresse - Postleitzahl: 10999<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Oranienstraße 187 10999 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '71', 'name': 'Chelany', 'description': 'Adresse - Adresse: Friedelstraße 41<br>Adresse - Postleitzahl: 12047<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Friedelstraße 41 12047 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '72', 'name': 'China Garten', 'description': 'Adresse - Adresse: Aktienstraße 334<br>Adresse - Postleitzahl: 45473<br>Adresse - Stadt: Mülheim an der Ruhr<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Aktienstraße 334 45473 Mülheim an der Ruhr Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '73', 'name': 'China Restaurant Chen Dynasty', 'description': 'Adresse - Adresse: Ostseestraße 79<br>Adresse - Postleitzahl: 10409<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Ostseestraße 79 10409 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '74', 'name': 'China Restaurant Shanghai', 'description': 'Adresse - Adresse: 66 Cranger Straße<br>Adresse - Postleitzahl: 45894<br>Adresse - Stadt: Gelsenkirchen<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': '66 Cranger Straße 45894 Gelsenkirchen Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '75', 'name': 'Chopan', 'description': 'Adresse - Adresse: Steindamm 32<br>Adresse - Postleitzahl: 20099<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Steindamm 32 20099 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '76', 'name': 'City Backhaus', 'description': 'Adresse - Adresse: Großer Burstah 6<br>Adresse - Postleitzahl: 20457<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Großer Burstah 6 20457 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '77', 'name': 'City Brötchen Stehcafé', 'description': 'Adresse - Adresse: Michaelisstraße 2<br>Adresse - Postleitzahl: 20459<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Michaelisstraße 2 20459 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '78', 'name': 'Club Astoria', 'description': 'Adresse - Adresse: Guts-Muths-Weg 3<br>Adresse - Postleitzahl: 50933<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Guts-Muths-Weg 3 50933 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '79', 'name': 'Coco Liebe', 'description': 'Adresse - Adresse: Richardstraße 107<br>Adresse - Postleitzahl: 12043<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Richardstraße 107 12043 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '80', 'name': 'Coffee Oase', 'description': 'Adresse - Adresse: 32 Breite Straße<br>Adresse - Postleitzahl: 14199<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '32 Breite Straße 14199 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '81', 'name': 'Colombina Café', 'description': 'Adresse - Adresse: 25 Wörther Straße<br>Adresse - Postleitzahl: 10405<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '25 Wörther Straße 10405 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '82', 'name': 'Crazy Crêpes Café', 'description': 'Adresse - Adresse: Fehlerstraße 1<br>Adresse - Postleitzahl: 12161<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Fehlerstraße 1 12161 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '83', 'name': 'Cubandres', 'description': 'Adresse - Adresse: Prenzlauer Allee 189<br>Adresse - Postleitzahl: 10405<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Prenzlauer Allee 189 10405 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '84', 'name': 'DAILY You', 'description': 'Adresse - Adresse: Colditzstraße 34<br>Adresse - Postleitzahl: 12099<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Colditzstraße 34 12099 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '85', 'name': 'DAILY You Marzahn', 'description': 'Adresse - Adresse: 3 Meeraner Straße<br>Adresse - Postleitzahl: 12681<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '3 Meeraner Straße 12681 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '86', 'name': 'DAILY You Moabit', 'description': 'Adresse - Adresse: Alt-Moabit 96D<br>Adresse - Postleitzahl: 10559<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Alt-Moabit 96D 10559 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '87', 'name': 'Deichgraf', 'description': 'Adresse - Adresse: Nordufer 10<br>Adresse - Postleitzahl: 13353<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Nordufer 10 13353 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '88', 'name': 'Der Platzhirsch', 'description': 'Adresse - Adresse: 6 Granseer Straße<br>Adresse - Postleitzahl: 10435<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '6 Granseer Straße 10435 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '89', 'name': 'Die Belegschaft', 'description': 'Adresse - Adresse: Zimmerstraße 23<br>Adresse - Postleitzahl: 10969<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Zimmerstraße 23 10969 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '90', 'name': 'Die Unverpackt Trier GmbH', 'description': 'Adresse - Adresse: Paulinstraße 65  <br>Adresse - Postleitzahl: 54292<br>Adresse - Stadt: Trier<br>Adresse - Staat: Rheinland-Pfalz<br>Adresse - Land: Deutschland', 'address': 'Paulinstraße 65   54292 Trier Rheinland-Pfalz Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '91', 'name': 'DönerTime', 'description': 'Adresse - Adresse: Beim Strohhause 24<br>Adresse - Postleitzahl: 20097<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Beim Strohhause 24 20097 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '92', 'name': 'Drachen City', 'description': 'Adresse - Adresse: Perlenpfuhl 6<br>Adresse - Postleitzahl: 50667<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Perlenpfuhl 6 50667 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '93', 'name': 'Ela\'s Back & Café', 'description': 'Adresse - Adresse: Mariannenstraße 36<br>Adresse - Postleitzahl: 10999<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Mariannenstraße 36 10999 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '94', 'name': 'Emma Kiosque', 'description': 'Adresse - Adresse: Am Südpark 0<br>Adresse - Postleitzahl: 50968<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Am Südpark 0 50968 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '95', 'name': 'Enno´s Backwerk', 'description': 'Adresse - Adresse: Tangstedter Landstraße 34<br>Adresse - Postleitzahl: 22415<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Deutschland', 'address': 'Tangstedter Landstraße 34 22415 Hamburg Hamburg Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '96', 'name': 'Fechtner', 'description': 'Adresse - Adresse: Torstraße 114<br>Adresse - Postleitzahl: 10119<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Torstraße 114 10119 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '97', 'name': 'FELD\'s Salat', 'description': 'Adresse - Adresse: Poolstraße 34<br>Adresse - Postleitzahl: 20355<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Poolstraße 34 20355 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '98', 'name': 'Fellfisch', 'description': 'Adresse - Adresse: 120 Emser Straße<br>Adresse - Postleitzahl: 12051<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '120 Emser Straße 12051 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '99', 'name': 'Fidelio', 'description': 'Adresse - Adresse: Moorhof 11<br>Adresse - Postleitzahl: 22399<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Moorhof 11 22399 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '100', 'name': 'Fishtank', 'description': 'Adresse - Adresse: Kiehlufer 75<br>Adresse - Postleitzahl: 12059<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Kiehlufer 75 12059 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '101', 'name': 'Fitbar', 'description': 'Adresse - Adresse: 15 Karl-Liebknecht-Straße<br>Adresse - Postleitzahl: 10178<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': '15 Karl-Liebknecht-Straße 10178 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '102', 'name': 'Fresh Food Factory', 'description': 'Adresse - Adresse: Wendenstraße 8<br>Adresse - Postleitzahl: 20097<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Wendenstraße 8 20097 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '103', 'name': 'Fresh Vitamins & More', 'description': 'Adresse - Adresse: 9 Spandauer Straße<br>Adresse - Postleitzahl: 10178<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '9 Spandauer Straße 10178 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '104', 'name': 'Frühstück & Cafe', 'description': 'Adresse - Adresse: 8 Kaltenkirchener Straße<br>Adresse - Postleitzahl: 22769<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': '8 Kaltenkirchener Straße 22769 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '105', 'name': 'Future Breakfast ISLA + Katie James', 'description': 'Adresse - Adresse: Hermannstraße 37<br>Adresse - Postleitzahl: 12049<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Hermannstraße 37 12049 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '106', 'name': 'Gantert Konditorei &  Bäckerei', 'description': 'Adresse - Adresse: Eppendorfer Weg 250<br>Adresse - Postleitzahl: 20251<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Eppendorfer Weg 250 20251 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '107', 'name': 'Gastwerk im Engelshof', 'description': 'Adresse - Adresse: Oberstraße 96<br>Adresse - Postleitzahl: 51149<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Oberstraße 96 51149 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '108', 'name': 'Golightly Coffee Bar', 'description': 'Adresse - Adresse: Friesenstraße 22<br>Adresse - Postleitzahl: 10965<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Friesenstraße 22 10965 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '109', 'name': 'Gong Gan', 'description': 'Adresse - Adresse: 2 Schwedter Straße<br>Adresse - Postleitzahl: 10119<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '2 Schwedter Straße 10119 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '110', 'name': 'Goodies', 'description': 'Adresse - Adresse: 69 Warschauer Straße<br>Adresse - Postleitzahl: 10243<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '69 Warschauer Straße 10243 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '111', 'name': 'Graf', 'description': 'Adresse - Adresse: Martin-Luther-Straße 8<br>Adresse - Postleitzahl: 10777<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Martin-Luther-Straße 8 10777 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '112', 'name': 'GreenGurus', 'description': 'Adresse - Adresse: Adalbertstraße 8<br>Adresse - Postleitzahl: 10999<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': 'Adalbertstraße 8 10999 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '113', 'name': 'Grill Lokanta', 'description': 'Adresse - Adresse: Kaiserdamm 22<br>Adresse - Postleitzahl: 14057<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Kaiserdamm 22 14057 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '114', 'name': 'Gute Stube', 'description': 'Adresse - Adresse: Wandsbeker Chaussee 40<br>Adresse - Postleitzahl: 22089<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Wandsbeker Chaussee 40 22089 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '115', 'name': 'Harbour Bakery', 'description': 'Adresse - Adresse: 3 Bei den Sankt Pauli-Landungsbrücken<br>Adresse - Postleitzahl: 20359<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': '3 Bei den Sankt Pauli-Landungsbrücken 20359 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '116', 'name': 'Haweli', 'description': 'Adresse - Adresse: Höninger Weg 125<br>Adresse - Postleitzahl: 50969<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Höninger Weg 125 50969 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '117', 'name': 'Hepcats\'  Corner', 'description': 'Adresse - Adresse: Schinkestraße 14<br>Adresse - Postleitzahl: 12047<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Schinkestraße 14 12047 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '118', 'name': 'Herings im Martinswinkel', 'description': 'Adresse - Adresse: Fischmarkt 9<br>Adresse - Postleitzahl: 50667<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Fischmarkt 9 50667 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '119', 'name': 'Ho Ho', 'description': 'Adresse - Adresse: Leineweberstraße 42<br>Adresse - Postleitzahl: 45468<br>Adresse - Stadt: Mülheim an der Ruhr<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Leineweberstraße 42 45468 Mülheim an der Ruhr Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '120', 'name': 'Hoang Asia', 'description': 'Adresse - Adresse: Alfred-Kowalke-Straße 38<br>Adresse - Postleitzahl: 10315<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Alfred-Kowalke-Straße 38 10315 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '121', 'name': 'Hongfu', 'description': 'Adresse - Adresse: Hultschiner Damm 118<br>Adresse - Postleitzahl: 12623<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Hultschiner Damm 118 12623 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '122', 'name': 'Hot POinT', 'description': 'Adresse - Adresse: Salierring 44<br>Adresse - Postleitzahl: 50677<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Salierring 44 50677 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '123', 'name': 'Huawei Kantine', 'description': 'Adresse - Adresse: Willy-Brandt-Allee 20<br>Adresse - Postleitzahl: 53113<br>Adresse - Stadt: Bonn<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Willy-Brandt-Allee 20 53113 Bonn Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '124', 'name': 'Hüftgold', 'description': 'Adresse - Adresse: Neue Bahnhofstraße 29<br>Adresse - Postleitzahl: 10245<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Neue Bahnhofstraße 29 10245 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '125', 'name': 'Ima Blumenthal', 'description': 'Adresse - Adresse: Crellestraße 22A<br>Adresse - Postleitzahl: 10827<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Crellestraße 22A 10827 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '126', 'name': 'India Foods Singh GmbH', 'description': 'Adresse - Adresse: Bouchéstraße 12<br>Adresse - Postleitzahl: 12435<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Bouchéstraße 12 12435 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '127', 'name': 'Joseph’s', 'description': 'Adresse - Adresse: Bundesallee 1<br>Adresse - Postleitzahl: 10719<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Bundesallee 1 10719 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '128', 'name': 'Jubel Feine Patisserie', 'description': 'Adresse - Adresse: Hufelandstraße 10<br>Adresse - Postleitzahl: 10407<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Hufelandstraße 10 10407 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '129', 'name': 'Juli Restaurant', 'description': 'Adresse - Adresse: Schloßschmidstraße 5<br>Adresse - Postleitzahl: 80639<br>Adresse - Stadt: München<br>Adresse - Staat: Bayern<br>Adresse - Land: Germany', 'address': 'Schloßschmidstraße 5 80639 München Bayern Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '130', 'name': 'Kafé Local', 'description': 'Adresse - Adresse: Weyertal 32<br>Adresse - Postleitzahl: 50937<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Weyertal 32 50937 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '131', 'name': 'Kaiser Garten', 'description': 'Adresse - Adresse: Annenstraße 111<br>Adresse - Postleitzahl: 58453<br>Adresse - Stadt: Witten<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Annenstraße 111 58453 Witten Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '132', 'name': 'Karadeniz', 'description': 'Adresse - Adresse: <br>Adresse - Postleitzahl: <br>Adresse - Stadt: <br>Adresse - Staat: <br>Adresse - Land: ', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '133', 'name': 'Kartoffelpfanne', 'description': 'Adresse - Adresse: Burgherrenstraße 11<br>Adresse - Postleitzahl: 12101<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Burgherrenstraße 11 12101 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '134', 'name': 'Kaspi', 'description': 'Adresse - Adresse: 12 Grünberger Straße<br>Adresse - Postleitzahl: 10243<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '12 Grünberger Straße 10243 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '135', 'name': 'Kervan Simit', 'description': 'Adresse - Adresse: Beim Strohhause 34<br>Adresse - Postleitzahl: 20097<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Beim Strohhause 34 20097 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '136', 'name': 'Kingdo', 'description': 'Adresse - Adresse: Leonorenstraße 60<br>Adresse - Postleitzahl: 12247<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Leonorenstraße 60 12247 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '137', 'name': 'Klas Bäckerei', 'description': 'Adresse - Adresse: Naunynstraße 2<br>Adresse - Postleitzahl: 10997<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Naunynstraße 2 10997 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '138', 'name': 'Klötze & Schinken', 'description': 'Adresse - Adresse: Bürknerstraße 12<br>Adresse - Postleitzahl: 12047<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Bürknerstraße 12 12047 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '139', 'name': 'Koshari Ahl Kairo', 'description': 'Adresse - Adresse: Kapuzinerstraße 35<br>Adresse - Postleitzahl: 80469<br>Adresse - Stadt: München<br>Adresse - Staat: Bayern<br>Adresse - Land: Germany', 'address': 'Kapuzinerstraße 35 80469 München Bayern Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '140', 'name': 'Koyote', 'description': 'Adresse - Adresse: Admiralstraße 20<br>Adresse - Postleitzahl: 10999<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Admiralstraße 20 10999 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '141', 'name': 'Kremanski', 'description': 'Adresse - Adresse: Adalbertstraße 96<br>Adresse - Postleitzahl: 10999<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Adalbertstraße 96 10999 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '142', 'name': 'La Parrilla', 'description': 'Adresse - Adresse: Albrechtstraße 11<br>Adresse - Postleitzahl: 10117<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Albrechtstraße 11 10117 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '143', 'name': 'La Villa Henkenberg', 'description': 'Adresse - Adresse: Henkenbergstraße 145<br>Adresse - Postleitzahl: 44797<br>Adresse - Stadt: Bochum<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Henkenbergstraße 145 44797 Bochum Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '144', 'name': 'Landhaus Alt-Mariendorf', 'description': 'Adresse - Adresse: Alt-Mariendorf 45<br>Adresse - Postleitzahl: 12107<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Alt-Mariendorf 45 12107 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '145', 'name': 'LauRes', 'description': 'Adresse - Adresse: Kreuzweg 12<br>Adresse - Postleitzahl: 20099<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Kreuzweg 12 20099 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '146', 'name': 'Le Bretagne', 'description': 'Adresse - Adresse: 15 Marheinekeplatz<br>Adresse - Postleitzahl: 10961<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '15 Marheinekeplatz 10961 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '147', 'name': 'Leckerback', 'description': 'Adresse - Adresse: Mehringdamm 51<br>Adresse - Postleitzahl: 10961<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Mehringdamm 51 10961 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '148', 'name': 'Lexis Café Weinbar', 'description': 'Adresse - Adresse: 77 Danziger Straße<br>Adresse - Postleitzahl: 10405<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': '77 Danziger Straße 10405 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '149', 'name': 'Liberda Fürbringerstraße', 'description': 'Adresse - Adresse: Fürbringerstraße 30<br>Adresse - Postleitzahl: 10961<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Fürbringerstraße 30 10961 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '150', 'name': 'Liberda Pflügerstraße', 'description': 'Adresse - Adresse: Pflügerstraße 67<br>Adresse - Postleitzahl: 12047<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Pflügerstraße 67 12047 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '151', 'name': 'Liebe(R) Essen', 'description': 'Adresse - Adresse: Oberlandstraße 26<br>Adresse - Postleitzahl: 12099<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Oberlandstraße 26 12099 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '152', 'name': 'LilliSu', 'description': 'Adresse - Adresse: Große Rainstraße 18<br>Adresse - Postleitzahl: 22765<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Große Rainstraße 18 22765 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '153', 'name': 'Limu', 'description': 'Adresse - Adresse: Bellealliancestraße 38<br>Adresse - Postleitzahl: 20259<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Bellealliancestraße 38 20259 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '154', 'name': 'Löffel-Gabel-Fingerfood Event & Catering GmbH', 'description': 'Adresse - Adresse: Parsevalstr. 11<br>Adresse - Postleitzahl: 40489<br>Adresse - Stadt: Düsseldorf<br>Adresse - Staat: <br>Adresse - Land: Deutschland', 'address': 'Parsevalstr. 11 40489 Düsseldorf Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '155', 'name': 'Macarons de Stéphane', 'description': 'Adresse - Adresse: Gärtnerstraße 13<br>Adresse - Postleitzahl: 10245<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Gärtnerstraße 13 10245 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '156', 'name': 'MadaMe', 'description': 'Adresse - Adresse: 10 Mehringplatz<br>Adresse - Postleitzahl: 10969<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '10 Mehringplatz 10969 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '157', 'name': 'Mahlzeit Live', 'description': 'Adresse - Adresse: Albert-Einstein-Ring 8<br>Adresse - Postleitzahl: 22761<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Albert-Einstein-Ring 8 22761 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '158', 'name': 'Majestic', 'description': 'Adresse - Adresse: Kistlerhofstraße 251<br>Adresse - Postleitzahl: 81379<br>Adresse - Stadt: München<br>Adresse - Staat: Bayern<br>Adresse - Land: Germany', 'address': 'Kistlerhofstraße 251 81379 München Bayern Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '159', 'name': 'Mama\'s Food', 'description': 'Adresse - Adresse: Stromstraße 52<br>Adresse - Postleitzahl: 10551<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Stromstraße 52 10551 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '160', 'name': 'Masala', 'description': 'Adresse - Adresse: Slabystraße 25<br>Adresse - Postleitzahl: 12459<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Slabystraße 25 12459 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '161', 'name': 'Melek Bäckerei', 'description': 'Adresse - Adresse: Yorckstraße 13<br>Adresse - Postleitzahl: 10965<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Yorckstraße 13 10965 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '162', 'name': 'Mercan', 'description': 'Adresse - Adresse: Wiener Straße 10<br>Adresse - Postleitzahl: 10999<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Wiener Straße 10 10999 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '163', 'name': 'Mert Bäckerei Hobrechtstraße', 'description': 'Adresse - Adresse: Hobrechtstraße 38<br>Adresse - Postleitzahl: 12047<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Hobrechtstraße 38 12047 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '164', 'name': 'Mert Bäckerei Körtestraße', 'description': 'Adresse - Adresse: Körtestraße 12<br>Adresse - Postleitzahl: 10967<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Körtestraße 12 10967 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '165', 'name': 'Mia y Leo', 'description': 'Adresse - Adresse: Jagowstraße 26<br>Adresse - Postleitzahl: 10555<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Jagowstraße 26 10555 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '166', 'name': 'Mierenback & Café', 'description': 'Adresse - Adresse: 11 Mierendorffplatz<br>Adresse - Postleitzahl: 10589<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '11 Mierendorffplatz 10589 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '167', 'name': 'Milch & Zucker', 'description': 'Adresse - Adresse: 70 Warschauer Straße<br>Adresse - Postleitzahl: 10243<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '70 Warschauer Straße 10243 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '168', 'name': 'Miss Ploff', 'description': 'Adresse - Adresse: Eulerstraße 9<br>Adresse - Postleitzahl: 13357<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Eulerstraße 9 13357 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '169', 'name': 'Mom’s Kitchen', 'description': 'Adresse - Adresse: Turmstraße 53<br>Adresse - Postleitzahl: 10551<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Turmstraße 53 10551 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '170', 'name': 'Moosland', 'description': 'Adresse - Adresse: Bäumerplan 28<br>Adresse - Postleitzahl: 12101<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Bäumerplan 28 12101 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '171', 'name': 'Mosaique', 'description': 'Adresse - Adresse: Knesebeckstraße 20<br>Adresse - Postleitzahl: 10623<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Knesebeckstraße 20 10623 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '172', 'name': 'Naveenapath', 'description': 'Adresse - Adresse: 22 Tegeler Straße<br>Adresse - Postleitzahl: 13353<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '22 Tegeler Straße 13353 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '173', 'name': 'No Need For Fancy Names', 'description': 'Adresse - Adresse: 20 Zossener Straße<br>Adresse - Postleitzahl: 10961<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '20 Zossener Straße 10961 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '174', 'name': 'Nuni\'s - Edel & Kühn', 'description': 'Adresse - Adresse: 1 Eberswalder Straße<br>Adresse - Postleitzahl: 10437<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': '1 Eberswalder Straße 10437 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '175', 'name': 'Olivia Schokoladen & Tartes', 'description': 'Adresse - Adresse: Wühlischstraße 30<br>Adresse - Postleitzahl: 10245<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Wühlischstraße 30 10245 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '176', 'name': 'Omori', 'description': 'Adresse - Adresse: 219 Castroper Straße<br>Adresse - Postleitzahl: 44791<br>Adresse - Stadt: Bochum<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': '219 Castroper Straße 44791 Bochum Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '177', 'name': 'Orient ESSpress Döner & Feinkost Imbiss', 'description': 'Adresse - Adresse: 26 Zossener Straße<br>Adresse - Postleitzahl: 10961<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '26 Zossener Straße 10961 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '178', 'name': 'Panaelme', 'description': 'Adresse - Adresse: Steckelhörn 12<br>Adresse - Postleitzahl: 20457<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Steckelhörn 12 20457 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '179', 'name': 'pennycakes', 'description': 'Adresse - Adresse: Alter Militärring 68<br>Adresse - Postleitzahl: 50933<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Alter Militärring 68 50933 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '180', 'name': 'Philo', 'description': 'Adresse - Adresse: Grindelallee 161<br>Adresse - Postleitzahl: 20146<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Grindelallee 161 20146 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '181', 'name': 'Populus Coffee', 'description': 'Adresse - Adresse: Maybachufer 20<br>Adresse - Postleitzahl: 12047<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Maybachufer 20 12047 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '182', 'name': 'Prünster', 'description': 'Adresse - Adresse: Pintschallee 24A<br>Adresse - Postleitzahl: 12347<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Pintschallee 24A 12347 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '183', 'name': 'Punjabi', 'description': 'Adresse - Adresse: Gabriel-Max-Straße 2<br>Adresse - Postleitzahl: 10245<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Gabriel-Max-Straße 2 10245 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '184', 'name': 'Qing Dao', 'description': 'Adresse - Adresse: 4 Mindener Straße<br>Adresse - Postleitzahl: 50679<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': '4 Mindener Straße 50679 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '185', 'name': 'Red Sun', 'description': 'Adresse - Adresse: Am Königshof 6<br>Adresse - Postleitzahl: 40822<br>Adresse - Stadt: Mettmann<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Am Königshof 6 40822 Mettmann Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '186', 'name': 'Rendezvous', 'description': 'Adresse - Adresse: Heinsbergstraße 11A<br>Adresse - Postleitzahl: 50674<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Heinsbergstraße 11A 50674 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '187', 'name': 'Restaurant Hof Zwei im Mövenpick Hotel', 'description': 'Adresse - Adresse: 3 Schöneberger Straße<br>Adresse - Postleitzahl: 10963<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': '3 Schöneberger Straße 10963 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '188', 'name': 'Restaurant Landhaus Botanischer Garten', 'description': 'Adresse - Adresse: Unter den Eichen 8<br>Adresse - Postleitzahl: 12203<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Unter den Eichen 8 12203 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '189', 'name': 'Restaurant Mustang Gastronomiebetrieb GmbH', 'description': 'Adresse - Adresse: Mariendorfer Damm 296<br>Adresse - Postleitzahl: 12107<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': 'Mariendorfer Damm 296 12107 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '190', 'name': 'Restaurant Opera', 'description': 'Adresse - Adresse: Leonorenstraße 18<br>Adresse - Postleitzahl: 12247<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Leonorenstraße 18 12247 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '191', 'name': 'Restaurant Slavia', 'description': 'Adresse - Adresse: Am Bollwerk 7<br>Adresse - Postleitzahl: 50667<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nrw<br>Adresse - Land: Deutschland', 'address': 'Am Bollwerk 7 50667 Köln Nrw Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '192', 'name': 'Restaurant Wawel', 'description': 'Adresse - Adresse: Neuköllner Straße 243<br>Adresse - Postleitzahl: 12357<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Neuköllner Straße 243 12357 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '193', 'name': 'Rises Delicacies', 'description': 'Adresse - Adresse: Veteranenstraße 25<br>Adresse - Postleitzahl: 10119<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Veteranenstraße 25 10119 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '194', 'name': 'Roter Lotus', 'description': 'Adresse - Adresse: Sandstraße 2<br>Adresse - Postleitzahl: 45964<br>Adresse - Stadt: Gladbeck<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Sandstraße 2 45964 Gladbeck Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '195', 'name': 'Saint Louis', 'description': 'Adresse - Adresse: Deutzer Freiheit 89<br>Adresse - Postleitzahl: 50679<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Deutzer Freiheit 89 50679 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '196', 'name': 'Sakura', 'description': 'Adresse - Adresse: 204 Castroper Straße<br>Adresse - Postleitzahl: 44791<br>Adresse - Stadt: Bochum<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': '204 Castroper Straße 44791 Bochum Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '197', 'name': 'SANDWICHart I Leibnitzstraße', 'description': 'Adresse - Adresse: Leibnizstraße 60<br>Adresse - Postleitzahl: 10629<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Leibnizstraße 60 10629 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '198', 'name': 'SANDWICHart II Seydelstraße', 'description': 'Adresse - Adresse: Seydelstraße 21<br>Adresse - Postleitzahl: 10117<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Seydelstraße 21 10117 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '199', 'name': 'SchlemmerOase', 'description': 'Adresse - Adresse: Helmholtzstraße 22<br>Adresse - Postleitzahl: 10587<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Helmholtzstraße 22 10587 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '200', 'name': 'Sichuan', 'description': 'Adresse - Adresse: Albrechtstraße 92<br>Adresse - Postleitzahl: 12167<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Albrechtstraße 92 12167 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '201', 'name': 'Sichuan Gourmet', 'description': 'Adresse - Adresse: 124 Osdorfer Straße<br>Adresse - Postleitzahl: 12207<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '124 Osdorfer Straße 12207 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '202', 'name': 'Simit Evi', 'description': 'Adresse - Adresse: Müllerstraße 147<br>Adresse - Postleitzahl: 13353<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Müllerstraße 147 13353 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '203', 'name': 'Small Coffee Lounge', 'description': 'Adresse - Adresse: Gärtnerstraße 10<br>Adresse - Postleitzahl: 20253<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Gärtnerstraße 10 20253 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '204', 'name': 'SO.CAL drink & dine', 'description': 'Adresse - Adresse: Occamstraße 7<br>Adresse - Postleitzahl: 80802<br>Adresse - Stadt: München<br>Adresse - Staat: Bayern<br>Adresse - Land: Germany', 'address': 'Occamstraße 7 80802 München Bayern Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '205', 'name': 'Stadthotel Restaurant Smutje', 'description': 'Adresse - Adresse: Neuer Weg 89<br>Adresse - Postleitzahl: 26506<br>Adresse - Stadt: Norden<br>Adresse - Staat: Deutschland<br>Adresse - Land: Niedersachsen', 'address': 'Neuer Weg 89 26506 Norden Deutschland Niedersachsen', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '206', 'name': 'Stadtteil Café', 'description': 'Adresse - Adresse: 33 Edinburger Straße<br>Adresse - Postleitzahl: 13349<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '33 Edinburger Straße 13349 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '207', 'name': 'Stenz', 'description': 'Adresse - Adresse: Lindwurmstraße 122<br>Adresse - Postleitzahl: 80337<br>Adresse - Stadt: München<br>Adresse - Staat: Bayern<br>Adresse - Land: Germany', 'address': 'Lindwurmstraße 122 80337 München Bayern Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '208', 'name': 'Sushi And Friends', 'description': 'Adresse - Adresse: Sterndamm 57<br>Adresse - Postleitzahl: 12487<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Sterndamm 57 12487 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '209', 'name': 'Sweet Café Bakery', 'description': 'Adresse - Adresse: Kopernikusstraße 20<br>Adresse - Postleitzahl: 10245<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Kopernikusstraße 20 10245 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '210', 'name': 'Tamar', 'description': 'Adresse - Adresse: 58 Rigaer Straße<br>Adresse - Postleitzahl: 10247<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '58 Rigaer Straße 10247 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '211', 'name': 'Tehranchi Feinkost', 'description': 'Adresse - Adresse: Ballindamm 40<br>Adresse - Postleitzahl: 20095<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Deutschland', 'address': 'Ballindamm 40 20095 Hamburg Hamburg Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '212', 'name': 'Teras Café', 'description': 'Adresse - Adresse: Piccoloministraße 407<br>Adresse - Postleitzahl: 51067<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Piccoloministraße 407 51067 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '213', 'name': 'Thai-Huong-Snack', 'description': 'Adresse - Adresse: Heinrich-Heine-Platz 12<br>Adresse - Postleitzahl: 10179<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Heinrich-Heine-Platz 12 10179 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '214', 'name': 'Thoi Lai Quan', 'description': 'Adresse - Adresse: 85 Lübecker Straße<br>Adresse - Postleitzahl: 22087<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': '85 Lübecker Straße 22087 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '215', 'name': 'TMK Service GmbH - bejuicy - kaltgepresste Säfte', 'description': 'Adresse - Adresse: 1 Kemperplatz<br>Adresse - Postleitzahl: 10785<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': '1 Kemperplatz 10785 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '216', 'name': 'Tokio Sushi Großer Burstah', 'description': 'Adresse - Adresse: Großer Burstah 42<br>Adresse - Postleitzahl:  20457<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: <br>Adresse - Land: ', 'address': 'Großer Burstah 42  20457 Hamburg', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '217', 'name': 'Tondo', 'description': 'Adresse - Adresse: Tonndorfer Hauptstraße 59<br>Adresse - Postleitzahl: 22045<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Tonndorfer Hauptstraße 59 22045 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '218', 'name': 'Traum Back', 'description': 'Adresse - Adresse: Anzengruberstraße 6<br>Adresse - Postleitzahl: 12043<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Anzengruberstraße 6 12043 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '219', 'name': 'treemans store, bakery & coffee', 'description': 'Adresse - Adresse: 69 Dachauer Straße<br>Adresse - Postleitzahl: 80335<br>Adresse - Stadt: München<br>Adresse - Staat: Bayern<br>Adresse - Land: Germany', 'address': '69 Dachauer Straße 80335 München Bayern Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '220', 'name': 'Turnhalle Holteistraße GmbH & Co. KG', 'description': 'Adresse - Adresse: Holteistraße 6-9<br>Adresse - Postleitzahl: 10245<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Holteistraße 6-9 10245 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '221', 'name': 'Two Planets', 'description': 'Adresse - Adresse: Hermannstraße 230<br>Adresse - Postleitzahl: 12049<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Hermannstraße 230 12049 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '222', 'name': 'U-Back', 'description': 'Adresse - Adresse: Frankfurter Allee 193<br>Adresse - Postleitzahl: 10365<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Frankfurter Allee 193 10365 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '223', 'name': 'Velicious', 'description': 'Adresse - Adresse: Lenbachstraße 13B<br>Adresse - Postleitzahl: 10245<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Lenbachstraße 13B 10245 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '224', 'name': 'Via Nova', 'description': 'Adresse - Adresse: 9 Revaler Straße<br>Adresse - Postleitzahl: 10245<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': '9 Revaler Straße 10245 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '225', 'name': 'Vielfalter - Yoga & Lifestyle', 'description': 'Adresse - Adresse: Brunnenstraße 147<br>Adresse - Postleitzahl: 10115<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Brunnenstraße 147 10115 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '226', 'name': 'Vis-à-Vis', 'description': 'Adresse - Adresse: Derfflingerstraße 19<br>Adresse - Postleitzahl: 10785<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Derfflingerstraße 19 10785 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '227', 'name': 'Vuture Vood', 'description': 'Adresse - Adresse: Ehrlichstraße 68<br>Adresse - Postleitzahl: 10318<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Ehrlichstraße 68 10318 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '228', 'name': 'Wale Können Fliegen', 'description': 'Adresse - Adresse: Hobrechtstraße 24<br>Adresse - Postleitzahl: 12047<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Hobrechtstraße 24 12047 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '229', 'name': 'Weinwirtschaft in der Akademie der Künste', 'description': 'Adresse - Adresse: Hanseatenweg 10<br>Adresse - Postleitzahl: 10557<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Hanseatenweg 10 10557 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '230', 'name': 'Weltküche', 'description': 'Adresse - Adresse: Graefestraße 18<br>Adresse - Postleitzahl: 10967<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Graefestraße 18 10967 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '231', 'name': 'Yummy Town', 'description': 'Adresse - Adresse: Höninger Weg 218B<br>Adresse - Postleitzahl: 50969<br>Adresse - Stadt: Köln<br>Adresse - Staat: Nordrhein-Westfalen<br>Adresse - Land: Germany', 'address': 'Höninger Weg 218B 50969 Köln Nordrhein-Westfalen Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '232', 'name': 'Zhou\'s Five Lichtenberg', 'description': 'Adresse - Adresse: Marktstraße 6<br>Adresse - Postleitzahl: 10317<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Deutschland', 'address': 'Marktstraße 6 10317 Berlin Berlin Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '233', 'name': 'Zhou’s Five Moabit', 'description': 'Adresse - Adresse: Stephanstraße 41<br>Adresse - Postleitzahl: 10559<br>Adresse - Stadt: Berlin<br>Adresse - Staat: Berlin<br>Adresse - Land: Germany', 'address': 'Stephanstraße 41 10559 Berlin Berlin Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '234', 'name': 'Zum Quarkbällchen Berne Marktplatz', 'description': 'Adresse - Adresse: Hermann-Balk-Straße<br>Adresse - Postleitzahl: 22147<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Deutschland', 'address': 'Hermann-Balk-Straße 22147 Hamburg Hamburg Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '235', 'name': 'Zum Quarkbällchen Schmalzbäckerei Burgwedel Busbahnhof', 'description': 'Adresse - Adresse: Walter-Jungleib-Straße 1<br>Adresse - Postleitzahl: 22457<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Deutschland', 'address': 'Walter-Jungleib-Straße 1 22457 Hamburg Hamburg Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '236', 'name': 'Zum Quarkbällchen Winterhuder Marktplatz Mi', 'description': 'Adresse - Adresse: Winterhuder Marktplatz<br>Adresse - Postleitzahl: 22299<br>Adresse - Stadt: Hamburg<br>Adresse - Staat: Hamburg<br>Adresse - Land: Germany', 'address': 'Winterhuder Marktplatz 22299 Hamburg Hamburg Germany', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }, { 'id': '237', 'name': 'Zur Mühle', 'description': 'Adresse - Adresse: Mühlenweg 1<br>Adresse - Postleitzahl: 21465<br>Adresse - Stadt: Reinbek<br>Adresse - Staat: Schleswig-Holstein<br>Adresse - Land: Deutschland', 'address': 'Mühlenweg 1 21465 Reinbek Schleswig-Holstein Deutschland', 'imageUrl': 'https://openclipart.org/image/300px/svg_to_png/244855/Online-Store-Spanish-Signs.png' }];
        return { products, stores };
    };
    return InMemoryDataService;
}());

var LoggerService = (function () {
    function LoggerService() {
    }
    LoggerService.prototype.log = function (message) {
        console.log('Log.info: ' + message);
    };
    LoggerService.prototype.error = function (message) {
        console.error('Log.error: ' + message);
    };
    LoggerService.prototype.handleError = function (error) {
        var errMsg;
        if (error instanceof _angular_http.Response) {
            var body = error.json() || '';
            var err = body.error || JSON.stringify(body);
            errMsg = error.status + " - " + (error.statusText || '') + " " + err;
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        this.error(errMsg);
        return Observable_2.throw(error.json().error || 'Server error');
    };
    LoggerService = __decorate([
        core.Injectable()
    ], LoggerService);
    return LoggerService;
}());

function throwIfAlreadyLoaded(parentModule, moduleName) {
    if (parentModule) {
        throw new Error(moduleName + " has already been loaded. Import Core modules in the AppModule only.");
    }
}

var CoreModule = (function () {
    function CoreModule(parentModule) {
        throwIfAlreadyLoaded(parentModule, 'CoreModule');
    }
    CoreModule = __decorate([
        core.NgModule({
            declarations: [],
            imports: [
                angularInMemoryWebApi.InMemoryWebApiModule.forRoot(InMemoryDataService, { delay: 300 })
            ],
            exports: [],
            providers: [
                LoggerService
            ]
        }),
        __param(0, core.Optional()),
        __param(0, core.SkipSelf())
    ], CoreModule);
    return CoreModule;
}());

var RatingComponent = (function () {
    function RatingComponent(loggerService) {
        this.loggerService = loggerService;
        this.ratingClicked = new core.EventEmitter();
    }
    RatingComponent.prototype.ngOnChanges = function () {
        this.ratingWidth = this.rating * 86 / 5;
    };
    RatingComponent.prototype.onClick = function () {
        this.loggerService.log('Rating clicked [' + this.rating + ']');
        this.ratingClicked.emit("User rating is up to [" + this.rating + "]");
    };
    __decorate([
        core.Input()
    ], RatingComponent.prototype, "rating");
    __decorate([
        core.Output()
    ], RatingComponent.prototype, "ratingClicked");
    RatingComponent = __decorate([
        core.Component({
            selector: 'sm-shared-rating',
            template: "<div class=\"crop\" [style.width.px]=\"ratingWidth\" [title]=\"rating\" (click)=\"onClick()\">\n  <div style=\"width: 86px\">\n    <span class=\"glyphicon glyphicon-star\"></span>\n    <span class=\"glyphicon glyphicon-star\"></span>\n    <span class=\"glyphicon glyphicon-star\"></span>\n    <span class=\"glyphicon glyphicon-star\"></span>\n    <span class=\"glyphicon glyphicon-star\"></span>\n  </div>\n</div>\n",
            styles: [".crop {\n  overflow: hidden;\n}\ndiv {\n  cursor: pointer;\n}\n"]
        })
    ], RatingComponent);
    return RatingComponent;
}());

var SharedModule = (function () {
    function SharedModule() {
    }
    SharedModule = __decorate([
        core.NgModule({
            declarations: [RatingComponent],
            imports: [
                _angular_material.MaterialModule.forRoot()
            ],
            exports: [
                _angular_common.CommonModule,
                _angular_forms.FormsModule,
                _angular_forms.ReactiveFormsModule,
                _angular_material.MaterialModule,
                RatingComponent
            ],
            providers: [
                _angular_material.MdSnackBar
            ]
        })
    ], SharedModule);
    return SharedModule;
}());

var ProductListComponent = (function () {
    function ProductListComponent(productService) {
        this.productService = productService;
        this.pageTitle = 'Product List';
        this.imageWidth = 70;
        this.imageMargin = 2;
        this.gridRows = 2;
        this.gridRatio = '3:3';
        this.showImage = false;
        this.placeholderFilter = 'Looking for...';
        this.listFilter = '';
        this.errorMessage = '';
    }
    ProductListComponent.prototype.onResize = function (width) {
        this.gridRows = width > 1300 ? 3
            : width > 900 ? 2
                : 1;
        this.gridRatio = width > 1300 ? '3:3'
            : width > 1150 ? '4:3'
                : width > 900 ? '3:3'
                    : '4:3';
    };
    ProductListComponent.prototype.getWindowWidth = function () {
        return window.innerWidth;
    };
    ProductListComponent.prototype.displayFilter = function () {
        return '- Filtered by: ' + this.listFilter;
    };
    ProductListComponent.prototype.toggleImage = function () {
        this.showImage = !this.showImage;
    };
    ProductListComponent.prototype.onRatingClicked = function (message) {
        this.pageTitle = 'Product List: ' + message;
    };
    ProductListComponent.prototype.getProducts = function () {
        var _this = this;
        this.productService.getProducts().subscribe(function (products) { return _this.products = products; }, function (error) { return _this.errorMessage = error; });
    };
    ProductListComponent.prototype.ngOnInit = function () {
        this.getProducts();
        this.onResize(this.getWindowWidth());
    };
    ProductListComponent = __decorate([
        core.Component({
            template: "<div class=\"panel panel-primary\" (window:resize)=\"onResize($event.target.innerWidth)\">\n  <div class=\"panel-heading\">\n    {{pageTitle}} <span *ngIf=\"listFilter.length\"> {{displayFilter()}}</span>\n  </div>\n  <div class=\"panel-body\">\n    <md-card>\n      <div class=\"row\">\n        <div class=\"form-group col-md-4\">\n          <label for=\"sel1\">Search:</label>\n          <input id=\"sel1\" type=\"text\" class=\"form-control\"\n          [(ngModel)]=\"listFilter\" [placeholder]=\"placeholderFilter\" />\n        </div>\n      </div>\n    </md-card>\n\n    <md-card *ngIf=\"products && (\n                    (!products.length) ||\n                    ((products | productFilter:listFilter).length ===0)\n                    )\" class=\"results\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <span class=\"glyphicon glyphicon-ban-circle\" aria-hidden=\"true\"></span>\n          No results found\n        </div>\n      </div>\n    </md-card>\n\n    <md-grid-list *ngIf=\"products && products.length\" class=\"md-grid-list-product\" [cols]=\"gridRows\" [rowHeight]=\"gridRatio\" gutterSize=\"15px\"  >\n      <md-grid-tile\n        *ngFor=\"let product of products |\n          productFilter:listFilter;\n          let i = index\"\n        [colspan]=\"1\"\n        [rowspan]=\"1\">\n\n        <md-card mdCardBorder class=\"md-card-product\" [routerLink]=\"['/products', product.id]\">\n          <img md-card-image id=\"product{{i}}\" [src]=\"product.imageUrl\" [title]=\"product.productName\">\n          <md-card-header>\n            <md-card-title class=\"md-card-title-product\">\n              <md-chip-list>\n                <md-chip color=\"primary\" selected=\"true\">\n                  {{product.productName}}\n                </md-chip>\n                <md-chip color=\"accent\" selected=\"false\">\n                  <b>{{ product.price | currency:\"EUR\":true:\"1.2-2\"}}</b>\n                </md-chip>\n              </md-chip-list>\n            </md-card-title>\n          </md-card-header>\n          <md-card-content class=\"md-card-content-product\">\n            <sm-shared-rating\n              [rating]=\"product.starRating\" (ratingClicked)=\"onRatingClicked($event)\">\n            </sm-shared-rating>\n            {{product.description}}\n          </md-card-content>\n        </md-card>\n\n      </md-grid-tile>\n    </md-grid-list>\n\n    <!-- <div class=\"table-responsive\">\n      <table class=\"table\" *ngIf=\"products && products.length\">\n        <thead>\n          <tr>\n            <th>\n              <button class=\"btn btn-primary\" (click)=\"toggleImage()\">\n                  {{showImage ? \"Hide\" : \"Show\"}} Image\n              </button>\n            </th>\n            <th>Index</th>\n            <th>Product</th>\n            <th>Code</th>\n            <th>Released</th>\n            <th>Price</th>\n            <th>User Rating</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let product of products |\n                productFilter:listFilter;\n                let i = index\">\n            <td>\n              <img *ngIf=\"showImage\" [src]=\"product.imageUrl\" [title]=\"product.productName\" [style.width.px]=\"imageWidth\" [style.margin.px]=\"imageMargin\">\n            </td>\n            <td>{{ i+1 }}</td>\n            <td>\n              <a [routerLink]=\"['/product', product.id]\">\n                  {{product.productName}}\n              </a>\n            </td>\n            <td>{{ product.productCode | lowercase }}</td>\n            <td>{{ product.releaseDate }}</td>\n            <td>{{ product.price | currency:\"EUR\":true:\"1.2-2\"}}</td>\n            <td>\n              <sm-shared-rating\n                [rating]=\"product.starRating\" (ratingClicked)=\"onRatingClicked($event)\">\n              </sm-shared-rating>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>-->\n\n  </div>\n</div>\n",
            styles: ["table {\n  margin: 20px;\n}\nthead {\n    color: #337AB7;\n}\ntd {\n  vertical-align: middle;\n}\n"]
        })
    ], ProductListComponent);
    return ProductListComponent;
}());

var ProductDetailDialogComponent = (function () {
    function ProductDetailDialogComponent(dialogRef) {
        this.dialogRef = dialogRef;
    }
    ProductDetailDialogComponent.prototype.ngOnInit = function () {
        this.editProduct = Object.assign({}, this.product);
    };
    ProductDetailDialogComponent = __decorate([
        core.Component({
            selector: 'product-detail-dialog',
            template: "<div md-dialog-title>\n  Edit Product Details:\n</div>\n\n<md-dialog-content>\n  <md-card>\n    <md-input-container class=\"md-input-container-product\">\n      <input mdInput #name=\"ngModel\" placeholder=\"Name\" [(ngModel)]=\"editProduct.productName\" required>\n    </md-input-container>\n    <md-input-container class=\"md-input-container-product\">\n      <textarea mdInput id=\"description\" placeholder=\"Description\" [(ngModel)]=\"editProduct.description\">\n      </textarea>\n    </md-input-container>\n    <md-input-container class=\"md-input-container-product\">\n      <input mdInput #price=\"ngModel\" placeholder=\"Price \u20AC\" [(ngModel)]=\"editProduct.price\" required>\n    </md-input-container>\n    Rating [{{editProduct.starRating | number : '1.1-1'}}]\n    <md-slider [min]=\"0\" [max]=\"5\" [step]=\"0.1\" [thumb-label]=\"true\" [(ngModel)]=\"editProduct.starRating\">\n    </md-slider>\n  </md-card>\n</md-dialog-content>\n\n<md-dialog-actions class=\"md-dialog-actions-product\">\n  <button type=\"button\" class=\"btn btn-success\" style=\"width:80px\" (click)=\"dialogRef.close(this.editProduct)\"\n  [disabled]=\"!name.valid || !price.valid\">\n    <i class=\"glyphicon glyphicon-edit\"></i> Save\n  </button>\n  <button type=\"button\" class=\"btn btn-danger\" style=\"width:80px\"\n  (click)=\"dialogRef.close('cancel')\">\n    <i class=\"glyphicon glyphicon-remove\"></i> Cancel\n  </button>\n</md-dialog-actions>\n",
            styles: [".ng-valid[required], .ng-valid.required {\n  border-right: 3px solid #42A948; /* green */\n}\n.ng-invalid:not(md-input-container) {\n  border-right: 3px solid #a94442; /* red */\n}\n"]
        })
    ], ProductDetailDialogComponent);
    return ProductDetailDialogComponent;
}());

var ProductDetailComponent = (function () {
    function ProductDetailComponent(route, router, productService, dialog, loggerService) {
        this.route = route;
        this.router = router;
        this.productService = productService;
        this.dialog = dialog;
        this.loggerService = loggerService;
        this.pageTitle = '';
        this.errorMessage = '';
        this.showBar = false;
        this.updated = false;
        this.updateMessage = ' - Updated!';
        this.deleted = false;
        this.deleteMessage = ' - Deleted!';
    }
    ProductDetailComponent.prototype.onBack = function () {
        this.router.navigate(['/products']);
    };
    ProductDetailComponent.prototype.onRatingClicked = function (message) {
        this.setTitle(message);
    };
    ProductDetailComponent.prototype.setTitle = function (message) {
        if (message === void 0) { message = ''; }
        this.pageTitle = "Product Detail: " + this.product.productName + " " + message;
    };
    ProductDetailComponent.prototype.openDialog = function () {
        var _this = this;
        this.updated = false;
        var dialogRef = this.dialog.open(ProductDetailDialogComponent);
        dialogRef.componentInstance.product = this.product;
        dialogRef.afterClosed().subscribe(function (result) {
            (typeof result === 'object') ? (_this.showBar = true,
                _this.updateProduct(result))
                : _this.updated = false;
        });
    };
    ProductDetailComponent.prototype.getProduct = function (id) {
        var _this = this;
        this.productService.getProduct(id).subscribe(function (product) {
            _this.product = product;
            _this.setTitle();
        }, function (error) { return _this.errorMessage = error; });
    };
    ProductDetailComponent.prototype.updateProduct = function (product) {
        var _this = this;
        this.productService.updateProduct(product).subscribe(function (result) {
            _this.product = Object.assign({}, product);
            _this.showBar = false;
            _this.updated = true;
        }, function (error) {
            _this.errorMessage = error;
            _this.showBar = false;
        });
    };
    ProductDetailComponent.prototype.deleteProduct = function (id) {
        var _this = this;
        this.updated = false;
        this.showBar = true;
        this.productService.deleteProduct(id).subscribe(function (result) {
            // this.product = undefined;
            _this.showBar = false;
            _this.deleted = true;
            _this.setTitle();
        }, function (error) { return _this.errorMessage = error; });
    };
    ProductDetailComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subcription = this.route.params.subscribe(function (params) {
            var id = +params['id'];
            _this.getProduct(id);
        });
    };
    ProductDetailComponent = __decorate([
        core.Component({
            template: "<div class=\"panel panel-primary\" *ngIf=\"product\">\n  <div class=\"panel-heading\" style=\"font-size:large\">\n    {{pageTitle}}\n    <md-progress-bar *ngIf=\"showBar\" color=\"accent\" mode=\"indeterminate\"></md-progress-bar>\n    <span *ngIf=\"updated\" class=\"updated\">\n       {{updateMessage}}\n      <span class=\"glyphicon glyphicon-ok-circle\"></span>\n    </span>\n    <span *ngIf=\"deleted\" class=\"deleted\">\n       {{deleteMessage}}\n      <span class=\"glyphicon glyphicon-remove-circle\"></span>\n    </span>\n  </div>\n\n  <div class=\"panel-body\">\n    <md-card *ngIf=\"!deleted\">\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <div class=\"row\">\n            <div class=\"col-md-3\">Name:</div>\n            <div class=\"col-md-6\">{{product.productName}}</div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-3\">Code:</div>\n            <div class=\"col-md-6\">{{product.productCode}}</div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-3\">Description:</div>\n            <div class=\"col-md-6\">{{product.description}}</div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-3\">Released:</div>\n            <div class=\"col-md-6\">{{product.releaseDate}}</div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-3\">Price:</div>\n            <div class=\"col-md-6\">{{product.price|currency:'EUR':true:\"1.2-2\"}}</div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-3\">Rating:</div>\n            <div class=\"col-md-6\">\n              <sm-shared-rating\n                [rating]=\"product.starRating\" (ratingClicked)=\"onRatingClicked($event)\">\n              </sm-shared-rating>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"col-md-6\">\n          <img class=\"center-block img-responsive\" [style.width.px]=\"200\" [style.margin.px]=\"2\" [src]=\"product.imageUrl\" [title]=\"product.productName\">\n        </div>\n      </div>\n    </md-card>\n    <md-card class=\"md-card-buttons\">\n      <a class=\"btn btn-default\" (click)=\"onBack()\" style=\"width:80px\">\n        <i class=\"glyphicon glyphicon-chevron-left\"></i> Back\n      </a>\n      <a class=\"btn btn-primary\" style=\"width:80px\" (click)=\"openDialog()\" *ngIf=\"!deleted\">\n        <i class=\"glyphicon glyphicon-edit\"></i> Edit\n      </a>\n      <a class=\"btn btn-danger\" style=\"width:80px\" (click)=\"deleteProduct(product.id)\" *ngIf=\"!deleted\">\n        <i class=\"glyphicon glyphicon-remove\"></i> Delete\n      </a>\n    </md-card>\n  </div>\n</div>\n",
            styles: [""]
        })
    ], ProductDetailComponent);
    return ProductDetailComponent;
}());

var ProductDetailGuard = (function () {
    function ProductDetailGuard(router) {
        this.router = router;
    }
    ProductDetailGuard.prototype.canActivate = function (route) {
        var id = +route.url[1].path;
        if (isNaN(id) || id < 1) {
            alert('Invalid product Id');
            this.router.navigate(['/products']);
            return false;
        }
        
        return true;
    };
    ProductDetailGuard = __decorate([
        core.Injectable()
    ], ProductDetailGuard);
    return ProductDetailGuard;
}());

var productRoutes = [
    { path: 'products', component: ProductListComponent },
    { path: 'products/:id',
        canActivate: [ProductDetailGuard],
        component: ProductDetailComponent }
];
var ProductRoutingModule = (function () {
    function ProductRoutingModule() {
    }
    ProductRoutingModule = __decorate([
        core.NgModule({
            imports: [
                _angular_router.RouterModule.forChild(productRoutes)
            ],
            exports: [_angular_router.RouterModule]
        })
    ], ProductRoutingModule);
    return ProductRoutingModule;
}());

var ProductFilterPipe = (function () {
    function ProductFilterPipe() {
    }
    ProductFilterPipe.prototype.transform = function (productList, filterBy) {
        filterBy = filterBy ? filterBy.toLocaleLowerCase() : null;
        return filterBy ? productList.filter(function (product) {
            return product.productName.toLocaleLowerCase().indexOf(filterBy) !== -1;
        }) : productList;
    };
    ProductFilterPipe = __decorate([
        core.Pipe({
            name: 'productFilter'
        })
    ], ProductFilterPipe);
    return ProductFilterPipe;
}());

var __extends$9 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function _catch$2(selector) {
    var operator = new CatchOperator(selector);
    var caught = this.lift(operator);
    return (operator.caught = caught);
}
var _catch_2 = _catch$2;
var CatchOperator = (function () {
    function CatchOperator(selector) {
        this.selector = selector;
    }
    CatchOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    };
    return CatchOperator;
}());
var CatchSubscriber = (function (_super) {
    __extends$9(CatchSubscriber, _super);
    function CatchSubscriber(destination, selector, caught) {
        _super.call(this, destination);
        this.selector = selector;
        this.caught = caught;
    }
    CatchSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var result = void 0;
            try {
                result = this.selector(err, this.caught);
            }
            catch (err2) {
                _super.prototype.error.call(this, err2);
                return;
            }
            this._unsubscribeAndRecycle();
            this.add(subscribeToResult_1.subscribeToResult(this, result));
        }
    };
    return CatchSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var _catch_1 = {
	_catch: _catch_2
};

Observable_1.Observable.prototype.catch = _catch_1._catch;
Observable_1.Observable.prototype._catch = _catch_1._catch;

var __extends$10 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function _do$2(nextOrObserver, error, complete) {
    return this.lift(new DoOperator(nextOrObserver, error, complete));
}
var _do_2 = _do$2;
var DoOperator = (function () {
    function DoOperator(nextOrObserver, error, complete) {
        this.nextOrObserver = nextOrObserver;
        this.error = error;
        this.complete = complete;
    }
    DoOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
    };
    return DoOperator;
}());
var DoSubscriber = (function (_super) {
    __extends$10(DoSubscriber, _super);
    function DoSubscriber(destination, nextOrObserver, error, complete) {
        _super.call(this, destination);
        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
        safeSubscriber.syncErrorThrowable = true;
        this.add(safeSubscriber);
        this.safeSubscriber = safeSubscriber;
    }
    DoSubscriber.prototype._next = function (value) {
        var safeSubscriber = this.safeSubscriber;
        safeSubscriber.next(value);
        if (safeSubscriber.syncErrorThrown) {
            this.destination.error(safeSubscriber.syncErrorValue);
        }
        else {
            this.destination.next(value);
        }
    };
    DoSubscriber.prototype._error = function (err) {
        var safeSubscriber = this.safeSubscriber;
        safeSubscriber.error(err);
        if (safeSubscriber.syncErrorThrown) {
            this.destination.error(safeSubscriber.syncErrorValue);
        }
        else {
            this.destination.error(err);
        }
    };
    DoSubscriber.prototype._complete = function () {
        var safeSubscriber = this.safeSubscriber;
        safeSubscriber.complete();
        if (safeSubscriber.syncErrorThrown) {
            this.destination.error(safeSubscriber.syncErrorValue);
        }
        else {
            this.destination.complete();
        }
    };
    return DoSubscriber;
}(Subscriber_1.Subscriber));
var _do_1 = {
	_do: _do_2
};

Observable_1.Observable.prototype.do = _do_1._do;
Observable_1.Observable.prototype._do = _do_1._do;

var __extends$11 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function map$2(project, thisArg) {
    if (typeof project !== 'function') {
        throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
    }
    return this.lift(new MapOperator(project, thisArg));
}
var map_2 = map$2;
var MapOperator = (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());
var MapOperator_1 = MapOperator;
var MapSubscriber = (function (_super) {
    __extends$11(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        _super.call(this, destination);
        this.project = project;
        this.count = 0;
        this.thisArg = thisArg || this;
    }
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber_1.Subscriber));
var map_1 = {
	map: map_2,
	MapOperator: MapOperator_1
};

Observable_1.Observable.prototype.map = map_1.map;

var __extends$14 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ObjectUnsubscribedError = (function (_super) {
    __extends$14(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var err = _super.call(this, 'object unsubscribed');
        this.name = err.name = 'ObjectUnsubscribedError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return ObjectUnsubscribedError;
}(Error));
var ObjectUnsubscribedError_2 = ObjectUnsubscribedError;
var ObjectUnsubscribedError_1 = {
	ObjectUnsubscribedError: ObjectUnsubscribedError_2
};

var __extends$15 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SubjectSubscription = (function (_super) {
    __extends$15(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        _super.call(this);
        this.subject = subject;
        this.subscriber = subscriber;
        this.closed = false;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription_1.Subscription));
var SubjectSubscription_2 = SubjectSubscription;
var SubjectSubscription_1 = {
	SubjectSubscription: SubjectSubscription_2
};

var __extends$13 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SubjectSubscriber = (function (_super) {
    __extends$13(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        _super.call(this, destination);
        this.destination = destination;
    }
    return SubjectSubscriber;
}(Subscriber_1.Subscriber));
var SubjectSubscriber_1 = SubjectSubscriber;
var Subject = (function (_super) {
    __extends$13(Subject, _super);
    function Subject() {
        _super.call(this);
        this.observers = [];
        this.closed = false;
        this.isStopped = false;
        this.hasError = false;
        this.thrownError = null;
    }
    Subject.prototype[rxSubscriber.$$rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_1.Observable));
var Subject_2 = Subject;
var AnonymousSubject = (function (_super) {
    __extends$13(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        _super.call(this);
        this.destination = destination;
        this.source = source;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription_1.Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));
var AnonymousSubject_1 = AnonymousSubject;
var Subject_1 = {
	SubjectSubscriber: SubjectSubscriber_1,
	Subject: Subject_2,
	AnonymousSubject: AnonymousSubject_1
};

var __extends$18 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Action = (function (_super) {
    __extends$18(Action, _super);
    function Action(scheduler, work) {
        _super.call(this);
    }
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        return this;
    };
    return Action;
}(Subscription_1.Subscription));
var Action_2 = Action;
var Action_1 = {
	Action: Action_2
};

var __extends$17 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncAction = (function (_super) {
    __extends$17(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
        this.pending = false;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (this.closed) {
            return this;
        }
        this.state = state;
        this.pending = true;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.delay = delay;
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        return root.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay !== null && this.delay === delay) {
            return id;
        }
        return root.root.clearInterval(id) && undefined || undefined;
    };
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.delay = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
    };
    return AsyncAction;
}(Action_1.Action));
var AsyncAction_2 = AsyncAction;
var AsyncAction_1 = {
	AsyncAction: AsyncAction_2
};

var __extends$16 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var QueueAction = (function (_super) {
    __extends$16(QueueAction, _super);
    function QueueAction(scheduler, work) {
        _super.call(this, scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        return scheduler.flush(this);
    };
    return QueueAction;
}(AsyncAction_1.AsyncAction));
var QueueAction_2 = QueueAction;
var QueueAction_1 = {
	QueueAction: QueueAction_2
};

var Scheduler = (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler.now; }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
    return Scheduler;
}());
var Scheduler_2 = Scheduler;
var Scheduler_1 = {
	Scheduler: Scheduler_2
};

var __extends$20 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AsyncScheduler = (function (_super) {
    __extends$20(AsyncScheduler, _super);
    function AsyncScheduler() {
        _super.apply(this, arguments);
        this.actions = [];
        this.active = false;
        this.scheduled = undefined;
    }
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift());
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler_1.Scheduler));
var AsyncScheduler_2 = AsyncScheduler;
var AsyncScheduler_1 = {
	AsyncScheduler: AsyncScheduler_2
};

var __extends$19 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var QueueScheduler = (function (_super) {
    __extends$19(QueueScheduler, _super);
    function QueueScheduler() {
        _super.apply(this, arguments);
    }
    return QueueScheduler;
}(AsyncScheduler_1.AsyncScheduler));
var QueueScheduler_2 = QueueScheduler;
var QueueScheduler_1 = {
	QueueScheduler: QueueScheduler_2
};

var queue_1 = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
var queue = {
	queue: queue_1
};

var Notification = (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return Observable_1.Observable.of(this.value);
            case 'E':
                return Observable_1.Observable.throw(this.error);
            case 'C':
                return Observable_1.Observable.empty();
        }
        throw new Error('unexpected notification kind value');
    };
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return this.undefinedValueNotification;
    };
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    Notification.createComplete = function () {
        return this.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());
var Notification_2 = Notification;
var Notification_1 = {
	Notification: Notification_2
};

var __extends$21 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return this.lift(new ObserveOnOperator(scheduler, delay));
}
var observeOn_2 = observeOn;
var ObserveOnOperator = (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());
var ObserveOnOperator_1 = ObserveOnOperator;
var ObserveOnSubscriber = (function (_super) {
    __extends$21(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        _super.call(this, destination);
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification_1.Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification_1.Notification.createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification_1.Notification.createComplete());
    };
    return ObserveOnSubscriber;
}(Subscriber_1.Subscriber));
var ObserveOnSubscriber_1 = ObserveOnSubscriber;
var ObserveOnMessage = (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());
var ObserveOnMessage_1 = ObserveOnMessage;
var observeOn_1 = {
	observeOn: observeOn_2,
	ObserveOnOperator: ObserveOnOperator_1,
	ObserveOnSubscriber: ObserveOnSubscriber_1,
	ObserveOnMessage: ObserveOnMessage_1
};

var __extends$12 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReplaySubject = (function (_super) {
    __extends$12(ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
        _super.call(this);
        this.scheduler = scheduler;
        this._events = [];
        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        this._windowTime = windowTime < 1 ? 1 : windowTime;
    }
    ReplaySubject.prototype.next = function (value) {
        var now = this._getNow();
        this._events.push(new ReplayEvent(now, value));
        this._trimBufferThenGetEvents();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        var _events = this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var subscription;
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscription = Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscription = Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
        }
        var len = _events.length;
        for (var i = 0; i < len && !subscriber.closed; i++) {
            subscriber.next(_events[i].value);
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject.prototype._getNow = function () {
        return (this.scheduler || queue.queue).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject;
}(Subject_1.Subject));
var ReplaySubject_2 = ReplaySubject;
var ReplayEvent = (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());
var ReplaySubject_1 = {
	ReplaySubject: ReplaySubject_2
};

var __extends$22 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ConnectableObservable = (function (_super) {
    __extends$22(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        _super.call(this);
        this.source = source;
        this.subjectFactory = subjectFactory;
        this._refCount = 0;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            connection = this._connection = new Subscription_1.Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription_1.Subscription.EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return this.lift(new RefCountOperator(this));
    };
    return ConnectableObservable;
}(Observable_1.Observable));
var ConnectableObservable_2 = ConnectableObservable;
var connectableObservableDescriptor = {
    operator: { value: null },
    _refCount: { value: 0, writable: true },
    _subscribe: { value: ConnectableObservable.prototype._subscribe },
    getSubject: { value: ConnectableObservable.prototype.getSubject },
    connect: { value: ConnectableObservable.prototype.connect },
    refCount: { value: ConnectableObservable.prototype.refCount }
};
var ConnectableSubscriber = (function (_super) {
    __extends$22(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber));
var RefCountOperator = (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = (function (_super) {
    __extends$22(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));
var ConnectableObservable_1 = {
	ConnectableObservable: ConnectableObservable_2,
	connectableObservableDescriptor: connectableObservableDescriptor
};

function multicast(subjectOrSubjectFactory, selector) {
    var subjectFactory;
    if (typeof subjectOrSubjectFactory === 'function') {
        subjectFactory = subjectOrSubjectFactory;
    }
    else {
        subjectFactory = function subjectFactory() {
            return subjectOrSubjectFactory;
        };
    }
    if (typeof selector === 'function') {
        return this.lift(new MulticastOperator(subjectFactory, selector));
    }
    var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
    connectable.source = this;
    connectable.subjectFactory = subjectFactory;
    return connectable;
}
var multicast_2 = multicast;
var MulticastOperator = (function () {
    function MulticastOperator(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    MulticastOperator.prototype.call = function (subscriber, source) {
        var selector = this.selector;
        var subject = this.subjectFactory();
        var subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    };
    return MulticastOperator;
}());
var MulticastOperator_1 = MulticastOperator;
var multicast_1 = {
	multicast: multicast_2,
	MulticastOperator: MulticastOperator_1
};

function publishReplay$2(bufferSize, windowTime, scheduler) {
    if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
    if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
    return multicast_1.multicast.call(this, new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler));
}
var publishReplay_2 = publishReplay$2;
var publishReplay_1 = {
	publishReplay: publishReplay_2
};

Observable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;

var ProductService = (function () {
    function ProductService(http, logger) {
        this.http = http;
        this.logger = logger;
        // private productUrl = 'api/products/products.json';
        this.productUrl = 'api/products'; // URL to web api
    }
    ProductService.prototype.getProducts = function () {
        // if (!this.products) {
        this.products = this.http.get(this.productUrl)
            .map(function (response) { return response.json().data || {}; })
            .publishReplay(1)
            .refCount()
            .catch(this.logger.handleError);
        // }
        return this.products;
    };
    ProductService.prototype.getProduct = function (id) {
        var url = this.productUrl + "/" + id;
        this.product = this.http.get(url)
            .map(function (response) { return response.json().data || {}; })
            .catch(this.logger.handleError);
        return this.product;
        // return this.getProducts()
        // .map((products: IProduct[]) => products.find(p => p.id === id));
    };
    ProductService.prototype.updateProduct = function (product) {
        var url = this.productUrl + "/" + product.id;
        var headers = new _angular_http.Headers({ 'Content-Type': 'application/json' });
        var options = new _angular_http.RequestOptions({ headers: headers });
        this.product = this.http.put(url, JSON.stringify(product), options)
            .map(function (response) { return response.json(); })
            .catch(this.logger.handleError);
        return this.product;
    };
    ProductService.prototype.deleteProduct = function (id) {
        var url = this.productUrl + "/" + id;
        this.product = this.http.delete(url)
            .map(function (response) { return response.json(); })
            .catch(this.logger.handleError);
        return this.product;
    };
    ProductService = __decorate([
        core.Injectable()
    ], ProductService);
    return ProductService;
}());

var ProductListMdCardDirective = (function () {
    function ProductListMdCardDirective(el) {
        this.el = el;
    }
    ProductListMdCardDirective.prototype.onMouseEnter = function () {
        this.setBorder();
    };
    ProductListMdCardDirective.prototype.onMouseLeave = function () {
        this.deleteBorder();
    };
    ProductListMdCardDirective.prototype.setBorder = function () {
        this.el.nativeElement.style.boxShadow = '2px 2px 5px 5px rgba(0,0,0,.2), 0 2px 2px 0 rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12)';
        // this.el.nativeElement.style.borderRadius = '12px';
    };
    ProductListMdCardDirective.prototype.deleteBorder = function () {
        this.el.nativeElement.style.boxShadow = '0 3px 1px -2px rgba(0,0,0,.2), 0 2px 2px 0 rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12)';
        // this.el.nativeElement.style.borderRadius = '2px';
    };
    __decorate([
        core.HostListener('mouseenter')
    ], ProductListMdCardDirective.prototype, "onMouseEnter");
    __decorate([
        core.HostListener('mouseleave')
    ], ProductListMdCardDirective.prototype, "onMouseLeave");
    ProductListMdCardDirective = __decorate([
        core.Directive({
            selector: '[mdCardBorder]'
        })
    ], ProductListMdCardDirective);
    return ProductListMdCardDirective;
}());

var ProductModule = (function () {
    function ProductModule() {
    }
    ProductModule = __decorate([
        core.NgModule({
            declarations: [
                ProductListComponent,
                ProductDetailComponent,
                ProductDetailDialogComponent,
                ProductFilterPipe,
                ProductListMdCardDirective
            ],
            imports: [
                ProductRoutingModule,
                SharedModule
            ],
            entryComponents: [
                ProductDetailDialogComponent
            ],
            providers: [
                ProductService,
                ProductDetailGuard
            ]
        })
    ], ProductModule);
    return ProductModule;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var globalScope;
if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
        globalScope = (self);
    }
    else {
        globalScope = (global);
    }
}
else {
    globalScope = (window);
}
function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
}
var _global = globalScope;
function getTypeNameForDebugging(type) {
    return type['name'] || typeof type;
}
_global.assert = function assert(condition) {
};
function isPresent(obj) {
    return obj != null;
}
function isBlank(obj) {
    return obj == null;
}

function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return "" + token.overriddenName;
    }
    if (token.name) {
        return "" + token.name;
    }
    var /** @type {?} */ res = token.toString();
    var /** @type {?} */ newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}

function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
}
function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
}
function print(obj) {
    console.log(obj);
}
function warn(obj) {
    console.warn(obj);
}

var _symbolIterator = null;
function getSymbolIterator() {
    if (!_symbolIterator) {
        if (((globalScope)).Symbol && Symbol.iterator) {
            _symbolIterator = Symbol.iterator;
        }
        else {
            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
                var /** @type {?} */ key = keys[i];
                if (key !== 'entries' && key !== 'size' &&
                    ((Map)).prototype[key] === Map.prototype['entries']) {
                    _symbolIterator = key;
                }
            }
        }
    }
    return _symbolIterator;
}
function isPrimitive(obj) {
    return !isJsObject(obj);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _nextClassId = 0;
var Reflect$1 = _global.Reflect;
function extractAnnotation(annotation) {
    if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
        annotation = annotation.annotation;
    }
    return annotation;
}
function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
        fnOrArray === Number || fnOrArray === Array) {
        throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
    }
    if (typeof fnOrArray === 'function') {
        return fnOrArray;
    }
    if (Array.isArray(fnOrArray)) {
        var /** @type {?} */ annotations = fnOrArray;
        var /** @type {?} */ annoLength = annotations.length - 1;
        var /** @type {?} */ fn = fnOrArray[annoLength];
        if (typeof fn !== 'function') {
            throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
        }
        if (annoLength != fn.length) {
            throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
        }
        var /** @type {?} */ paramsAnnotations = [];
        for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {
            var /** @type {?} */ paramAnnotations = [];
            paramsAnnotations.push(paramAnnotations);
            var /** @type {?} */ annotation = annotations[i];
            if (Array.isArray(annotation)) {
                for (var /** @type {?} */ j = 0; j < annotation.length; j++) {
                    paramAnnotations.push(extractAnnotation(annotation[j]));
                }
            }
            else if (typeof annotation === 'function') {
                paramAnnotations.push(extractAnnotation(annotation));
            }
            else {
                paramAnnotations.push(annotation);
            }
        }
        Reflect$1.defineMetadata('parameters', paramsAnnotations, fn);
        return fn;
    }
    throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
}
function Class(clsDef) {
    var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
    var /** @type {?} */ proto = constructor.prototype;
    if (clsDef.hasOwnProperty('extends')) {
        if (typeof clsDef.extends === 'function') {
            ((constructor)).prototype = proto =
                Object.create(((clsDef.extends)).prototype);
        }
        else {
            throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
        }
    }
    for (var key in clsDef) {
        if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
            proto[key] = applyParams(clsDef[key], key);
        }
    }
    if (this && this.annotations instanceof Array) {
        Reflect$1.defineMetadata('annotations', this.annotations, constructor);
    }
    var /** @type {?} */ constructorName = constructor['name'];
    if (!constructorName || constructorName === 'constructor') {
        ((constructor))['overriddenName'] = "class" + _nextClassId++;
    }
    return (constructor);
}
function makeDecorator(name, props, parentClass, chainFn) {
    if (chainFn === void 0) { chainFn = null; }
    var /** @type {?} */ metaCtor = makeMetadataCtor([props]);
    function DecoratorFactory(objOrType) {
        if (!(Reflect$1 && Reflect$1.getOwnMetadata)) {
            throw 'reflect-metadata shim is required when using class decorators';
        }
        if (this instanceof DecoratorFactory) {
            metaCtor.call(this, objOrType);
            return this;
        }
        var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);
        var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
        chainAnnotation.push(annotationInstance);
        var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {
            var /** @type {?} */ annotations = Reflect$1.getOwnMetadata('annotations', cls) || [];
            annotations.push(annotationInstance);
            Reflect$1.defineMetadata('annotations', annotations, cls);
            return cls;
        });
        TypeDecorator.annotations = chainAnnotation;
        TypeDecorator.Class = Class;
        if (chainFn)
            chainFn(TypeDecorator);
        return TypeDecorator;
    }
    if (parentClass) {
        DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    DecoratorFactory.prototype.toString = function () { return ("@" + name); };
    ((DecoratorFactory)).annotationCls = DecoratorFactory;
    return DecoratorFactory;
}
function makeMetadataCtor(props) {
    return function ctor() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        props.forEach(function (prop, i) {
            var /** @type {?} */ argVal = args[i];
            if (Array.isArray(prop)) {
                _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
            }
            else {
                for (var propName in prop) {
                    _this[propName] =
                        argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
                }
            }
        });
    };
}
function makeParamDecorator(name, props, parentClass) {
    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
    function ParamDecoratorFactory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        if (this instanceof ParamDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
        }
        var /** @type {?} */ annotationInstance = new ((_a = ((ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
        ((ParamDecorator)).annotation = annotationInstance;
        return ParamDecorator;
        function ParamDecorator(cls, unusedKey, index) {
            var /** @type {?} */ parameters = Reflect$1.getOwnMetadata('parameters', cls) || [];
            while (parameters.length <= index) {
                parameters.push(null);
            }
            parameters[index] = parameters[index] || [];
            parameters[index].push(annotationInstance);
            Reflect$1.defineMetadata('parameters', parameters, cls);
            return cls;
        }
        var _a;
    }
    if (parentClass) {
        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    ParamDecoratorFactory.prototype.toString = function () { return ("@" + name); };
    ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
}
function makePropDecorator(name, props, parentClass) {
    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
    function PropDecoratorFactory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        if (this instanceof PropDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
        }
        var /** @type {?} */ decoratorInstance = new ((_a = ((PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
        return function PropDecorator(target, name) {
            var /** @type {?} */ meta = Reflect$1.getOwnMetadata('propMetadata', target.constructor) || {};
            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
            meta[name].unshift(decoratorInstance);
            Reflect$1.defineMetadata('propMetadata', meta, target.constructor);
        };
        var _a;
    }
    if (parentClass) {
        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    PropDecoratorFactory.prototype.toString = function () { return ("@" + name); };
    ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var Inject$1 = makeParamDecorator('Inject', [['token', undefined]]);
var Optional$1 = makeParamDecorator('Optional', []);
var Injectable$1 = (makeDecorator('Injectable', []));
var Self$1 = makeParamDecorator('Self', []);
var SkipSelf$1 = makeParamDecorator('SkipSelf', []);
var Host$1 = makeParamDecorator('Host', []);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var OpaqueToken$1 = (function () {
    function OpaqueToken$$1(_desc) {
        this._desc = _desc;
    }
    OpaqueToken$$1.prototype.toString = function () { return "Token " + this._desc; };
    OpaqueToken$$1.decorators = [
        { type: Injectable$1 },
    ];
    OpaqueToken$$1.ctorParameters = function () { return [
        null,
    ]; };
    return OpaqueToken$$1;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken$1('AnalyzeForEntryComponents');
var Attribute$1 = makeParamDecorator('Attribute', [['attributeName', undefined]]);
var Query = (function () {
    function Query() {
    }
    return Query;
}());
var ContentChildren = (makePropDecorator('ContentChildren', [
    ['selector', undefined], {
        first: false,
        isViewQuery: false,
        descendants: false,
        read: undefined,
    }
], Query));
var ContentChild = makePropDecorator('ContentChild', [
    ['selector', undefined], {
        first: true,
        isViewQuery: false,
        descendants: true,
        read: undefined,
    }
], Query);
var ViewChildren = makePropDecorator('ViewChildren', [
    ['selector', undefined], {
        first: false,
        isViewQuery: true,
        descendants: true,
        read: undefined,
    }
], Query);
var ViewChild = makePropDecorator('ViewChild', [
    ['selector', undefined], {
        first: true,
        isViewQuery: true,
        descendants: true,
        read: undefined,
    }
], Query);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ChangeDetectionStrategy = {};
ChangeDetectionStrategy.OnPush = 0;
ChangeDetectionStrategy.Default = 1;
ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
var ChangeDetectorStatus = {};
ChangeDetectorStatus.CheckOnce = 0;
ChangeDetectorStatus.Checked = 1;
ChangeDetectorStatus.CheckAlways = 2;
ChangeDetectorStatus.Detached = 3;
ChangeDetectorStatus.Errored = 4;
ChangeDetectorStatus.Destroyed = 5;
ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce";
ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked";
ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways";
ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached";
ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored";
ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed";
function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return isBlank(changeDetectionStrategy) ||
        changeDetectionStrategy === ChangeDetectionStrategy.Default;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var Directive$1 = (makeDecorator('Directive', {
    selector: undefined,
    inputs: undefined,
    outputs: undefined,
    host: undefined,
    providers: undefined,
    exportAs: undefined,
    queries: undefined
}));
var Component$1 = (makeDecorator('Component', {
    selector: undefined,
    inputs: undefined,
    outputs: undefined,
    host: undefined,
    exportAs: undefined,
    moduleId: undefined,
    providers: undefined,
    viewProviders: undefined,
    changeDetection: ChangeDetectionStrategy.Default,
    queries: undefined,
    templateUrl: undefined,
    template: undefined,
    styleUrls: undefined,
    styles: undefined,
    animations: undefined,
    encapsulation: undefined,
    interpolation: undefined,
    entryComponents: undefined
}, Directive$1));
var Pipe$1 = (makeDecorator('Pipe', {
    name: undefined,
    pure: true,
}));
var Input$1 = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
var Output$1 = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
var HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
var HostListener$1 = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var LifecycleHooks = {};
LifecycleHooks.OnInit = 0;
LifecycleHooks.OnDestroy = 1;
LifecycleHooks.DoCheck = 2;
LifecycleHooks.OnChanges = 3;
LifecycleHooks.AfterContentInit = 4;
LifecycleHooks.AfterContentChecked = 5;
LifecycleHooks.AfterViewInit = 6;
LifecycleHooks.AfterViewChecked = 7;
LifecycleHooks[LifecycleHooks.OnInit] = "OnInit";
LifecycleHooks[LifecycleHooks.OnDestroy] = "OnDestroy";
LifecycleHooks[LifecycleHooks.DoCheck] = "DoCheck";
LifecycleHooks[LifecycleHooks.OnChanges] = "OnChanges";
LifecycleHooks[LifecycleHooks.AfterContentInit] = "AfterContentInit";
LifecycleHooks[LifecycleHooks.AfterContentChecked] = "AfterContentChecked";
LifecycleHooks[LifecycleHooks.AfterViewInit] = "AfterViewInit";
LifecycleHooks[LifecycleHooks.AfterViewChecked] = "AfterViewChecked";
var LIFECYCLE_HOOKS_VALUES = [
    LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,
    LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,
    LifecycleHooks.AfterViewChecked
];
var OnChanges = (function () {
    function OnChanges() {
    }
    OnChanges.prototype.ngOnChanges = function (changes) { };
    return OnChanges;
}());
var OnInit = (function () {
    function OnInit() {
    }
    OnInit.prototype.ngOnInit = function () { };
    return OnInit;
}());
var DoCheck = (function () {
    function DoCheck() {
    }
    DoCheck.prototype.ngDoCheck = function () { };
    return DoCheck;
}());
var OnDestroy = (function () {
    function OnDestroy() {
    }
    OnDestroy.prototype.ngOnDestroy = function () { };
    return OnDestroy;
}());
var AfterContentInit = (function () {
    function AfterContentInit() {
    }
    AfterContentInit.prototype.ngAfterContentInit = function () { };
    return AfterContentInit;
}());
var AfterContentChecked = (function () {
    function AfterContentChecked() {
    }
    AfterContentChecked.prototype.ngAfterContentChecked = function () { };
    return AfterContentChecked;
}());
var AfterViewInit = (function () {
    function AfterViewInit() {
    }
    AfterViewInit.prototype.ngAfterViewInit = function () { };
    return AfterViewInit;
}());
var AfterViewChecked = (function () {
    function AfterViewChecked() {
    }
    AfterViewChecked.prototype.ngAfterViewChecked = function () { };
    return AfterViewChecked;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var CUSTOM_ELEMENTS_SCHEMA = {
    name: 'custom-elements'
};
var NO_ERRORS_SCHEMA = {
    name: 'no-errors-schema'
};
var NgModule$1 = (makeDecorator('NgModule', {
    providers: undefined,
    declarations: undefined,
    imports: undefined,
    exports: undefined,
    entryComponents: undefined,
    bootstrap: undefined,
    schemas: undefined,
    id: undefined,
}));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ViewEncapsulation$1 = {};
ViewEncapsulation$1.Emulated = 0;
ViewEncapsulation$1.Native = 1;
ViewEncapsulation$1.None = 2;
ViewEncapsulation$1[ViewEncapsulation$1.Emulated] = "Emulated";
ViewEncapsulation$1[ViewEncapsulation$1.Native] = "Native";
ViewEncapsulation$1[ViewEncapsulation$1.None] = "None";
var ViewMetadata = (function () {
    function ViewMetadata(_a) {
        var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;
        this.templateUrl = templateUrl;
        this.template = template;
        this.styleUrls = styleUrls;
        this.styles = styles;
        this.encapsulation = encapsulation;
        this.animations = animations;
        this.interpolation = interpolation;
    }
    return ViewMetadata;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var Version$1 = (function () {
    function Version$$1(full) {
        this.full = full;
    }
    Object.defineProperty(Version$$1.prototype, "major", {
        get: function () { return this.full.split('.')[0]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Version$$1.prototype, "minor", {
        get: function () { return this.full.split('.')[1]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Version$$1.prototype, "patch", {
        get: function () { return this.full.split('.').slice(2).join('.'); },
        enumerable: true,
        configurable: true
    });
    return Version$$1;
}());
var VERSION = new Version$1('2.4.9');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function forwardRef$1(forwardRefFn) {
    ((forwardRefFn)).__forward_ref__ = forwardRef$1;
    ((forwardRefFn)).toString = function () { return stringify(this()); };
    return (((forwardRefFn)));
}
function resolveForwardRef(type) {
    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
        type.__forward_ref__ === forwardRef$1) {
        return ((type))();
    }
    else {
        return type;
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _THROW_IF_NOT_FOUND = new Object();
var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
var _NullInjector = (function () {
    function _NullInjector() {
    }
    _NullInjector.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
        if (notFoundValue === _THROW_IF_NOT_FOUND) {
            throw new Error("No provider for " + stringify(token) + "!");
        }
        return notFoundValue;
    };
    return _NullInjector;
}());
var Injector$1 = (function () {
    function Injector$$1() {
    }
    Injector$$1.prototype.get = function (token, notFoundValue) { };
    Injector$$1.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
    Injector$$1.NULL = new _NullInjector();
    return Injector$$1;
}());

var __extends$24 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

var BaseError = (function (_super) {
    __extends$24(BaseError, _super);
    function BaseError(message) {
        _super.call(this, message);
        var nativeError = new Error(message);
        this._nativeError = nativeError;
    }
    Object.defineProperty(BaseError.prototype, "message", {
        get: function () { return this._nativeError.message; },
        set: function (message) { this._nativeError.message = message; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseError.prototype, "name", {
        get: function () { return this._nativeError.name; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseError.prototype, "stack", {
        get: function () { return ((this._nativeError)).stack; },
        set: function (value) { ((this._nativeError)).stack = value; },
        enumerable: true,
        configurable: true
    });
    BaseError.prototype.toString = function () { return this._nativeError.toString(); };
    return BaseError;
}(Error));
var WrappedError = (function (_super) {
    __extends$24(WrappedError, _super);
    function WrappedError(message, error) {
        _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
        this.originalError = error;
    }
    Object.defineProperty(WrappedError.prototype, "stack", {
        get: function () {
            return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))
                .stack;
        },
        enumerable: true,
        configurable: true
    });
    return WrappedError;
}(BaseError));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$23 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function findFirstClosedCycle(keys) {
    var /** @type {?} */ res = [];
    for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
        if (res.indexOf(keys[i]) > -1) {
            res.push(keys[i]);
            return res;
        }
        res.push(keys[i]);
    }
    return res;
}
function constructResolvingPath(keys) {
    if (keys.length > 1) {
        var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());
        var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });
        return ' (' + tokenStrs.join(' -> ') + ')';
    }
    return '';
}
var AbstractProviderError = (function (_super) {
    __extends$23(AbstractProviderError, _super);
    function AbstractProviderError(injector, key, constructResolvingMessage) {
        _super.call(this, 'DI Error');
        this.keys = [key];
        this.injectors = [injector];
        this.constructResolvingMessage = constructResolvingMessage;
        this.message = this.constructResolvingMessage(this.keys);
    }
    AbstractProviderError.prototype.addKey = function (injector, key) {
        this.injectors.push(injector);
        this.keys.push(key);
        this.message = this.constructResolvingMessage(this.keys);
    };
    return AbstractProviderError;
}(BaseError));
var NoProviderError = (function (_super) {
    __extends$23(NoProviderError, _super);
    function NoProviderError(injector, key) {
        _super.call(this, injector, key, function (keys) {
            var first = stringify(keys[0].token);
            return "No provider for " + first + "!" + constructResolvingPath(keys);
        });
    }
    return NoProviderError;
}(AbstractProviderError));
var CyclicDependencyError = (function (_super) {
    __extends$23(CyclicDependencyError, _super);
    function CyclicDependencyError(injector, key) {
        _super.call(this, injector, key, function (keys) {
            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
        });
    }
    return CyclicDependencyError;
}(AbstractProviderError));
var InstantiationError = (function (_super) {
    __extends$23(InstantiationError, _super);
    function InstantiationError(injector, originalException, originalStack, key) {
        _super.call(this, 'DI Error', originalException);
        this.keys = [key];
        this.injectors = [injector];
    }
    InstantiationError.prototype.addKey = function (injector, key) {
        this.injectors.push(injector);
        this.keys.push(key);
    };
    Object.defineProperty(InstantiationError.prototype, "message", {
        get: function () {
            var /** @type {?} */ first = stringify(this.keys[0].token);
            return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InstantiationError.prototype, "causeKey", {
        get: function () { return this.keys[0]; },
        enumerable: true,
        configurable: true
    });
    return InstantiationError;
}(WrappedError));
var InvalidProviderError = (function (_super) {
    __extends$23(InvalidProviderError, _super);
    function InvalidProviderError(provider) {
        _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
    }
    return InvalidProviderError;
}(BaseError));
var NoAnnotationError = (function (_super) {
    __extends$23(NoAnnotationError, _super);
    function NoAnnotationError(typeOrFunc, params) {
        _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
    }
    NoAnnotationError._genMessage = function (typeOrFunc, params) {
        var /** @type {?} */ signature = [];
        for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {
            var /** @type {?} */ parameter = params[i];
            if (!parameter || parameter.length == 0) {
                signature.push('?');
            }
            else {
                signature.push(parameter.map(stringify).join(' '));
            }
        }
        return 'Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
            signature.join(', ') + '). ' +
            'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
            stringify(typeOrFunc) + '\' is decorated with Injectable.';
    };
    return NoAnnotationError;
}(BaseError));
var OutOfBoundsError = (function (_super) {
    __extends$23(OutOfBoundsError, _super);
    function OutOfBoundsError(index) {
        _super.call(this, "Index " + index + " is out-of-bounds.");
    }
    return OutOfBoundsError;
}(BaseError));
var MixingMultiProvidersWithRegularProvidersError = (function (_super) {
    __extends$23(MixingMultiProvidersWithRegularProvidersError, _super);
    function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
        _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' +
            provider2.toString());
    }
    return MixingMultiProvidersWithRegularProvidersError;
}(BaseError));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ReflectiveKey = (function () {
    function ReflectiveKey(token, id) {
        this.token = token;
        this.id = id;
        if (!token) {
            throw new Error('Token must be defined!');
        }
    }
    Object.defineProperty(ReflectiveKey.prototype, "displayName", {
        get: function () { return stringify(this.token); },
        enumerable: true,
        configurable: true
    });
    ReflectiveKey.get = function (token) {
        return _globalKeyRegistry.get(resolveForwardRef(token));
    };
    Object.defineProperty(ReflectiveKey, "numberOfKeys", {
        get: function () { return _globalKeyRegistry.numberOfKeys; },
        enumerable: true,
        configurable: true
    });
    return ReflectiveKey;
}());
var KeyRegistry = (function () {
    function KeyRegistry() {
        this._allKeys = new Map();
    }
    KeyRegistry.prototype.get = function (token) {
        if (token instanceof ReflectiveKey)
            return token;
        if (this._allKeys.has(token)) {
            return this._allKeys.get(token);
        }
        var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
        this._allKeys.set(token, newKey);
        return newKey;
    };
    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
        get: function () { return this._allKeys.size; },
        enumerable: true,
        configurable: true
    });
    return KeyRegistry;
}());
var _globalKeyRegistry = new KeyRegistry();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var Type = Function;
function isType(v) {
    return typeof v === 'function';
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{\s*("use strict";)?\s*(return\s+)?\S+\.apply\(this,\s*arguments\)/;
var ReflectionCapabilities = (function () {
    function ReflectionCapabilities(reflect) {
        this._reflect = reflect || _global.Reflect;
    }
    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
    ReflectionCapabilities.prototype.factory = function (t) { return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        return new (t.bind.apply(t, [void 0].concat(args)))();
    }; };
    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
        var /** @type {?} */ result;
        if (typeof paramTypes === 'undefined') {
            result = new Array(paramAnnotations.length);
        }
        else {
            result = new Array(paramTypes.length);
        }
        for (var /** @type {?} */ i = 0; i < result.length; i++) {
            if (typeof paramTypes === 'undefined') {
                result[i] = [];
            }
            else if (paramTypes[i] != Object) {
                result[i] = [paramTypes[i]];
            }
            else {
                result[i] = [];
            }
            if (paramAnnotations && isPresent(paramAnnotations[i])) {
                result[i] = result[i].concat(paramAnnotations[i]);
            }
        }
        return result;
    };
    ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
        if (DELEGATE_CTOR.exec(type.toString())) {
            return null;
        }
        if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {
            return ((type)).parameters;
        }
        var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;
        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
            var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
            var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
            var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) {
                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
            });
            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
        }
        if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) {
            var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
            var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
            if (paramTypes || paramAnnotations) {
                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
            }
        }
        return new Array(((type.length))).fill(undefined);
    };
    ReflectionCapabilities.prototype.parameters = function (type) {
        if (!isType(type)) {
            return [];
        }
        var /** @type {?} */ parentCtor = getParentCtor(type);
        var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);
        if (!parameters && parentCtor !== Object) {
            parameters = this.parameters(parentCtor);
        }
        return parameters || [];
    };
    ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
        if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {
            var /** @type {?} */ annotations = ((typeOrFunc)).annotations;
            if (typeof annotations === 'function' && annotations.annotations) {
                annotations = annotations.annotations;
            }
            return annotations;
        }
        if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {
            return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);
        }
        if (this._reflect && this._reflect.getOwnMetadata) {
            return this._reflect.getOwnMetadata('annotations', typeOrFunc);
        }
    };
    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
        if (!isType(typeOrFunc)) {
            return [];
        }
        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
        var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
        var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
        return parentAnnotations.concat(ownAnnotations);
    };
    ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
        if (((typeOrFunc)).propMetadata &&
            ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {
            var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;
            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
                propMetadata = propMetadata.propMetadata;
            }
            return propMetadata;
        }
        if (((typeOrFunc)).propDecorators &&
            ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {
            var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;
            var /** @type {?} */ propMetadata_1 = ({});
            Object.keys(propDecorators_1).forEach(function (prop) {
                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
            });
            return propMetadata_1;
        }
        if (this._reflect && this._reflect.getOwnMetadata) {
            return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
        }
    };
    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
        if (!isType(typeOrFunc)) {
            return {};
        }
        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
        var /** @type {?} */ propMetadata = {};
        if (parentCtor !== Object) {
            var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);
            Object.keys(parentPropMetadata_1).forEach(function (propName) {
                propMetadata[propName] = parentPropMetadata_1[propName];
            });
        }
        var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
        if (ownPropMetadata) {
            Object.keys(ownPropMetadata).forEach(function (propName) {
                var /** @type {?} */ decorators = [];
                if (propMetadata.hasOwnProperty(propName)) {
                    decorators.push.apply(decorators, propMetadata[propName]);
                }
                decorators.push.apply(decorators, ownPropMetadata[propName]);
                propMetadata[propName] = decorators;
            });
        }
        return propMetadata;
    };
    ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
        return type instanceof Type && lcProperty in type.prototype;
    };
    ReflectionCapabilities.prototype.getter = function (name) { return ((new Function('o', 'return o.' + name + ';'))); };
    ReflectionCapabilities.prototype.setter = function (name) {
        return ((new Function('o', 'v', 'return o.' + name + ' = v;')));
    };
    ReflectionCapabilities.prototype.method = function (name) {
        var /** @type {?} */ functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
        return ((new Function('o', 'args', functionBody)));
    };
    ReflectionCapabilities.prototype.importUri = function (type) {
        if (typeof type === 'object' && type['filePath']) {
            return type['filePath'];
        }
        return "./" + stringify(type);
    };
    ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return runtime; };
    ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
    return ReflectionCapabilities;
}());
function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    if (!decoratorInvocations) {
        return [];
    }
    return decoratorInvocations.map(function (decoratorInvocation) {
        var /** @type {?} */ decoratorType = decoratorInvocation.type;
        var /** @type {?} */ annotationCls = decoratorType.annotationCls;
        var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
    });
}
function getParentCtor(ctor) {
    var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);
    var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;
    return parentCtor || Object;
}

var ReflectorReader = (function () {
    function ReflectorReader() {
    }
    ReflectorReader.prototype.parameters = function (typeOrFunc) { };
    ReflectorReader.prototype.annotations = function (typeOrFunc) { };
    ReflectorReader.prototype.propMetadata = function (typeOrFunc) { };
    ReflectorReader.prototype.importUri = function (typeOrFunc) { };
    ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { };
    ReflectorReader.prototype.resolveEnum = function (identifier, name) { };
    return ReflectorReader;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$25 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Reflector = (function (_super) {
    __extends$25(Reflector, _super);
    function Reflector(reflectionCapabilities) {
        _super.call(this);
        this.reflectionCapabilities = reflectionCapabilities;
    }
    Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
    Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };
    Reflector.prototype.parameters = function (typeOrFunc) {
        return this.reflectionCapabilities.parameters(typeOrFunc);
    };
    Reflector.prototype.annotations = function (typeOrFunc) {
        return this.reflectionCapabilities.annotations(typeOrFunc);
    };
    Reflector.prototype.propMetadata = function (typeOrFunc) {
        return this.reflectionCapabilities.propMetadata(typeOrFunc);
    };
    Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
    };
    Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };
    Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };
    Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };
    Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
    Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {
        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);
    };
    Reflector.prototype.resolveEnum = function (identifier, name) {
        return this.reflectionCapabilities.resolveEnum(identifier, name);
    };
    return Reflector;
}(ReflectorReader));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var reflector = new Reflector(new ReflectionCapabilities());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ReflectiveDependency = (function () {
    function ReflectiveDependency(key, optional, visibility) {
        this.key = key;
        this.optional = optional;
        this.visibility = visibility;
    }
    ReflectiveDependency.fromKey = function (key) {
        return new ReflectiveDependency(key, false, null);
    };
    return ReflectiveDependency;
}());
var _EMPTY_LIST = [];
var ResolvedReflectiveProvider_ = (function () {
    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
        this.key = key;
        this.resolvedFactories = resolvedFactories;
        this.multiProvider = multiProvider;
    }
    Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
        get: function () { return this.resolvedFactories[0]; },
        enumerable: true,
        configurable: true
    });
    return ResolvedReflectiveProvider_;
}());
var ResolvedReflectiveFactory = (function () {
    function ResolvedReflectiveFactory(factory, dependencies) {
        this.factory = factory;
        this.dependencies = dependencies;
    }
    return ResolvedReflectiveFactory;
}());
function resolveReflectiveFactory(provider) {
    var /** @type {?} */ factoryFn;
    var /** @type {?} */ resolvedDeps;
    if (provider.useClass) {
        var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);
        factoryFn = reflector.factory(useClass);
        resolvedDeps = _dependenciesFor(useClass);
    }
    else if (provider.useExisting) {
        factoryFn = function (aliasInstance) { return aliasInstance; };
        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
    }
    else if (provider.useFactory) {
        factoryFn = provider.useFactory;
        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
    }
    else {
        factoryFn = function () { return provider.useValue; };
        resolvedDeps = _EMPTY_LIST;
    }
    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
}
function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
}
function resolveReflectiveProviders(providers) {
    var /** @type {?} */ normalized = _normalizeProviders(providers, []);
    var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);
    var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
    return Array.from(resolvedProviderMap.values());
}
function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (var /** @type {?} */ i = 0; i < providers.length; i++) {
        var /** @type {?} */ provider = providers[i];
        var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);
        if (existing) {
            if (provider.multiProvider !== existing.multiProvider) {
                throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
            }
            if (provider.multiProvider) {
                for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {
                    existing.resolvedFactories.push(provider.resolvedFactories[j]);
                }
            }
            else {
                normalizedProvidersMap.set(provider.key.id, provider);
            }
        }
        else {
            var /** @type {?} */ resolvedProvider = void 0;
            if (provider.multiProvider) {
                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
            }
            else {
                resolvedProvider = provider;
            }
            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
        }
    }
    return normalizedProvidersMap;
}
function _normalizeProviders(providers, res) {
    providers.forEach(function (b) {
        if (b instanceof Type) {
            res.push({ provide: b, useClass: b });
        }
        else if (b && typeof b == 'object' && ((b)).provide !== undefined) {
            res.push(/** @type {?} */ (b));
        }
        else if (b instanceof Array) {
            _normalizeProviders(b, res);
        }
        else {
            throw new InvalidProviderError(b);
        }
    });
    return res;
}
function constructDependencies(typeOrFunc, dependencies) {
    if (!dependencies) {
        return _dependenciesFor(typeOrFunc);
    }
    else {
        var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });
        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
    }
}
function _dependenciesFor(typeOrFunc) {
    var /** @type {?} */ params = reflector.parameters(typeOrFunc);
    if (!params)
        return [];
    if (params.some(function (p) { return p == null; })) {
        throw new NoAnnotationError(typeOrFunc, params);
    }
    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
}
function _extractToken(typeOrFunc, metadata, params) {
    var /** @type {?} */ token = null;
    var /** @type {?} */ optional = false;
    if (!Array.isArray(metadata)) {
        if (metadata instanceof Inject$1) {
            return _createDependency(metadata.token, optional, null);
        }
        else {
            return _createDependency(metadata, optional, null);
        }
    }
    var /** @type {?} */ visibility = null;
    for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {
        var /** @type {?} */ paramMetadata = metadata[i];
        if (paramMetadata instanceof Type) {
            token = paramMetadata;
        }
        else if (paramMetadata instanceof Inject$1) {
            token = paramMetadata.token;
        }
        else if (paramMetadata instanceof Optional$1) {
            optional = true;
        }
        else if (paramMetadata instanceof Self$1 || paramMetadata instanceof SkipSelf$1) {
            visibility = paramMetadata;
        }
    }
    token = resolveForwardRef(token);
    if (token != null) {
        return _createDependency(token, optional, visibility);
    }
    else {
        throw new NoAnnotationError(typeOrFunc, params);
    }
}
function _createDependency(token, optional, visibility) {
    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var UNDEFINED = new Object();
var ReflectiveInjector = (function () {
    function ReflectiveInjector() {
    }
    ReflectiveInjector.resolve = function (providers) {
        return resolveReflectiveProviders(providers);
    };
    ReflectiveInjector.resolveAndCreate = function (providers, parent) {
        if (parent === void 0) { parent = null; }
        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
    };
    ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
        if (parent === void 0) { parent = null; }
        return new ReflectiveInjector_(providers, parent);
    };
    ReflectiveInjector.prototype.parent = function () { };
    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };
    ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };
    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };
    ReflectiveInjector.prototype.instantiateResolved = function (provider) { };
    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };
    return ReflectiveInjector;
}());
var ReflectiveInjector_ = (function () {
    function ReflectiveInjector_(_providers, _parent) {
        if (_parent === void 0) { _parent = null; }
        this._constructionCounter = 0;
        this._providers = _providers;
        this._parent = _parent;
        var len = _providers.length;
        this.keyIds = new Array(len);
        this.objs = new Array(len);
        for (var i = 0; i < len; i++) {
            this.keyIds[i] = _providers[i].key.id;
            this.objs[i] = UNDEFINED;
        }
    }
    ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
        get: function () { return this._parent; },
        enumerable: true,
        configurable: true
    });
    ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
        return this.createChildFromResolved(ResolvedReflectiveProviders);
    };
    ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
        var /** @type {?} */ inj = new ReflectiveInjector_(providers);
        inj._parent = this;
        return inj;
    };
    ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
    };
    ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
        return this._instantiateProvider(provider);
    };
    ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {
        if (index < 0 || index >= this._providers.length) {
            throw new OutOfBoundsError(index);
        }
        return this._providers[index];
    };
    ReflectiveInjector_.prototype._new = function (provider) {
        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
            throw new CyclicDependencyError(this, provider.key);
        }
        return this._instantiateProvider(provider);
    };
    ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };
    ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
        if (provider.multiProvider) {
            var /** @type {?} */ res = new Array(provider.resolvedFactories.length);
            for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {
                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
            }
            return res;
        }
        else {
            return this._instantiate(provider, provider.resolvedFactories[0]);
        }
    };
    ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory$$1) {
        var _this = this;
        var /** @type {?} */ factory = ResolvedReflectiveFactory$$1.factory;
        var /** @type {?} */ deps;
        try {
            deps =
                ResolvedReflectiveFactory$$1.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });
        }
        catch (e) {
            if (e instanceof AbstractProviderError || e instanceof InstantiationError) {
                e.addKey(this, provider.key);
            }
            throw e;
        }
        var /** @type {?} */ obj;
        try {
            obj = factory.apply(void 0, deps);
        }
        catch (e) {
            throw new InstantiationError(this, e, e.stack, provider.key);
        }
        return obj;
    };
    ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {
        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
    };
    ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {
        if (key === INJECTOR_KEY) {
            return this;
        }
        if (visibility instanceof Self$1) {
            return this._getByKeySelf(key, notFoundValue);
        }
        else {
            return this._getByKeyDefault(key, notFoundValue, visibility);
        }
    };
    ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {
        for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {
            if (this.keyIds[i] === keyId) {
                if (this.objs[i] === UNDEFINED) {
                    this.objs[i] = this._new(this._providers[i]);
                }
                return this.objs[i];
            }
        }
        return UNDEFINED;
    };
    ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
        if (notFoundValue !== THROW_IF_NOT_FOUND) {
            return notFoundValue;
        }
        else {
            throw new NoProviderError(this, key);
        }
    };
    ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
        var /** @type {?} */ obj = this._getObjByKeyId(key.id);
        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
    };
    ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {
        var /** @type {?} */ inj;
        if (visibility instanceof SkipSelf$1) {
            inj = this._parent;
        }
        else {
            inj = this;
        }
        while (inj instanceof ReflectiveInjector_) {
            var /** @type {?} */ inj_ = (inj);
            var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);
            if (obj !== UNDEFINED)
                return obj;
            inj = inj_._parent;
        }
        if (inj !== null) {
            return inj.get(key.token, notFoundValue);
        }
        else {
            return this._throwOrNull(key, notFoundValue);
        }
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
        get: function () {
            var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
                .join(', ');
            return "ReflectiveInjector(providers: [" + providers + "])";
        },
        enumerable: true,
        configurable: true
    });
    ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
    return ReflectiveInjector_;
}());
var INJECTOR_KEY = ReflectiveKey.get(Injector$1);
function _mapProviders(injector, fn) {
    var /** @type {?} */ res = new Array(injector._providers.length);
    for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {
        res[i] = fn(injector.getProviderAtIndex(i));
    }
    return res;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ErrorHandler$1 = (function () {
    function ErrorHandler$$1(rethrowError) {
        if (rethrowError === void 0) { rethrowError = true; }
        this._console = console;
        this.rethrowError = rethrowError;
    }
    ErrorHandler$$1.prototype.handleError = function (error) {
        var /** @type {?} */ originalError = this._findOriginalError(error);
        var /** @type {?} */ originalStack = this._findOriginalStack(error);
        var /** @type {?} */ context = this._findContext(error);
        this._console.error("EXCEPTION: " + this._extractMessage(error));
        if (originalError) {
            this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
        }
        if (originalStack) {
            this._console.error('ORIGINAL STACKTRACE:');
            this._console.error(originalStack);
        }
        if (context) {
            this._console.error('ERROR CONTEXT:');
            this._console.error(context);
        }
        if (this.rethrowError)
            throw error;
    };
    ErrorHandler$$1.prototype._extractMessage = function (error) {
        return error instanceof Error ? error.message : error.toString();
    };
    ErrorHandler$$1.prototype._findContext = function (error) {
        if (error) {
            return error.context ? error.context :
                this._findContext(((error)).originalError);
        }
        return null;
    };
    ErrorHandler$$1.prototype._findOriginalError = function (error) {
        var /** @type {?} */ e = ((error)).originalError;
        while (e && ((e)).originalError) {
            e = ((e)).originalError;
        }
        return e;
    };
    ErrorHandler$$1.prototype._findOriginalStack = function (error) {
        if (!(error instanceof Error))
            return null;
        var /** @type {?} */ e = error;
        var /** @type {?} */ stack = e.stack;
        while (e instanceof Error && ((e)).originalError) {
            e = ((e)).originalError;
            if (e instanceof Error && e.stack) {
                stack = e.stack;
            }
        }
        return stack;
    };
    return ErrorHandler$$1;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var StringMapWrapper = (function () {
    function StringMapWrapper() {
    }
    StringMapWrapper.merge = function (m1, m2) {
        var /** @type {?} */ m = {};
        for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
        }
        for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
        }
        return m;
    };
    StringMapWrapper.equals = function (m1, m2) {
        var /** @type {?} */ k1 = Object.keys(m1);
        var /** @type {?} */ k2 = Object.keys(m2);
        if (k1.length != k2.length) {
            return false;
        }
        for (var /** @type {?} */ i = 0; i < k1.length; i++) {
            var /** @type {?} */ key = k1[i];
            if (m1[key] !== m2[key]) {
                return false;
            }
        }
        return true;
    };
    return StringMapWrapper;
}());
var ListWrapper = (function () {
    function ListWrapper() {
    }
    ListWrapper.findLast = function (arr, condition) {
        for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
            if (condition(arr[i])) {
                return arr[i];
            }
        }
        return null;
    };
    ListWrapper.removeAll = function (list, items) {
        for (var /** @type {?} */ i = 0; i < items.length; ++i) {
            var /** @type {?} */ index = list.indexOf(items[i]);
            if (index > -1) {
                list.splice(index, 1);
            }
        }
    };
    ListWrapper.remove = function (list, el) {
        var /** @type {?} */ index = list.indexOf(el);
        if (index > -1) {
            list.splice(index, 1);
            return true;
        }
        return false;
    };
    ListWrapper.equals = function (a, b) {
        if (a.length != b.length)
            return false;
        for (var /** @type {?} */ i = 0; i < a.length; ++i) {
            if (a[i] !== b[i])
                return false;
        }
        return true;
    };
    ListWrapper.flatten = function (list) {
        return list.reduce(function (flat, item) {
            var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
            return ((flat)).concat(flatItem);
        }, []);
    };
    return ListWrapper;
}());
function isListLikeIterable(obj) {
    if (!isJsObject(obj))
        return false;
    return Array.isArray(obj) ||
        (!(obj instanceof Map) &&
            getSymbolIterator() in obj);
}
function areIterablesEqual(a, b, comparator) {
    var /** @type {?} */ iterator1 = a[getSymbolIterator()]();
    var /** @type {?} */ iterator2 = b[getSymbolIterator()]();
    while (true) {
        var /** @type {?} */ item1 = iterator1.next();
        var /** @type {?} */ item2 = iterator2.next();
        if (item1.done && item2.done)
            return true;
        if (item1.done || item2.done)
            return false;
        if (!comparator(item1.value, item2.value))
            return false;
    }
}
function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
        for (var /** @type {?} */ i = 0; i < obj.length; i++) {
            fn(obj[i]);
        }
    }
    else {
        var /** @type {?} */ iterator = obj[getSymbolIterator()]();
        var /** @type {?} */ item = void 0;
        while (!((item = iterator.next()).done)) {
            fn(item.value);
        }
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function isPromise$1(obj) {
    return !!obj && typeof obj.then === 'function';
}
function isObservable(obj) {
    return !!(obj && obj[$$observable]);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var APP_INITIALIZER = new OpaqueToken$1('Application Initializer');
var ApplicationInitStatus = (function () {
    function ApplicationInitStatus(appInits) {
        var _this = this;
        this._done = false;
        var asyncInitPromises = [];
        if (appInits) {
            for (var i = 0; i < appInits.length; i++) {
                var initResult = appInits[i]();
                if (isPromise$1(initResult)) {
                    asyncInitPromises.push(initResult);
                }
            }
        }
        this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });
        if (asyncInitPromises.length === 0) {
            this._done = true;
        }
    }
    Object.defineProperty(ApplicationInitStatus.prototype, "done", {
        get: function () { return this._done; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
        get: function () { return this._donePromise; },
        enumerable: true,
        configurable: true
    });
    ApplicationInitStatus.decorators = [
        { type: Injectable$1 },
    ];
    ApplicationInitStatus.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject$1, args: [APP_INITIALIZER,] }, { type: Optional$1 },] },
    ]; };
    return ApplicationInitStatus;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var APP_ID$1 = new OpaqueToken$1('AppId');
function _appIdRandomProviderFactory() {
    return "" + _randomChar() + _randomChar() + _randomChar();
}
var APP_ID_RANDOM_PROVIDER = {
    provide: APP_ID$1,
    useFactory: _appIdRandomProviderFactory,
    deps: /** @type {?} */ ([]),
};
function _randomChar() {
    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
}
var PLATFORM_INITIALIZER$1 = new OpaqueToken$1('Platform Initializer');
var APP_BOOTSTRAP_LISTENER = new OpaqueToken$1('appBootstrapListener');
var PACKAGE_ROOT_URL = new OpaqueToken$1('Application Packages Root URL');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var Console = (function () {
    function Console() {
    }
    Console.prototype.log = function (message) { print(message); };
    Console.prototype.warn = function (message) { warn(message); };
    Console.decorators = [
        { type: Injectable$1 },
    ];
    Console.ctorParameters = function () { return []; };
    return Console;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$27 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ComponentStillLoadingError = (function (_super) {
    __extends$27(ComponentStillLoadingError, _super);
    function ComponentStillLoadingError(compType) {
        _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
        this.compType = compType;
    }
    return ComponentStillLoadingError;
}(BaseError));
var ModuleWithComponentFactories = (function () {
    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
        this.ngModuleFactory = ngModuleFactory;
        this.componentFactories = componentFactories;
    }
    return ModuleWithComponentFactories;
}());
function _throwError() {
    throw new Error("Runtime compiler is not loaded");
}
var Compiler = (function () {
    function Compiler() {
    }
    Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
    Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
    Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
        throw _throwError();
    };
    Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
        throw _throwError();
    };
    Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };
    Compiler.prototype.clearCache = function () { };
    Compiler.prototype.clearCacheFor = function (type) { };
    Compiler.decorators = [
        { type: Injectable$1 },
    ];
    Compiler.ctorParameters = function () { return []; };
    return Compiler;
}());
var COMPILER_OPTIONS = new OpaqueToken$1('compilerOptions');
var CompilerFactory = (function () {
    function CompilerFactory() {
    }
    CompilerFactory.prototype.createCompiler = function (options) { };
    return CompilerFactory;
}());

var ElementRef$1 = (function () {
    function ElementRef$$1(nativeElement) {
        this.nativeElement = nativeElement;
    }
    return ElementRef$$1;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$29 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EventEmitter$1 = (function (_super) {
    __extends$29(EventEmitter$$1, _super);
    function EventEmitter$$1(isAsync) {
        if (isAsync === void 0) { isAsync = false; }
        _super.call(this);
        this.__isAsync = isAsync;
    }
    EventEmitter$$1.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
    EventEmitter$$1.prototype.subscribe = function (generatorOrNext, error, complete) {
        var /** @type {?} */ schedulerFn;
        var /** @type {?} */ errorFn = function (err) { return null; };
        var /** @type {?} */ completeFn = function () { return null; };
        if (generatorOrNext && typeof generatorOrNext === 'object') {
            schedulerFn = this.__isAsync ? function (value) {
                setTimeout(function () { return generatorOrNext.next(value); });
            } : function (value) { generatorOrNext.next(value); };
            if (generatorOrNext.error) {
                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
                    function (err) { generatorOrNext.error(err); };
            }
            if (generatorOrNext.complete) {
                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
                    function () { generatorOrNext.complete(); };
            }
        }
        else {
            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
                function (value) { generatorOrNext(value); };
            if (error) {
                errorFn =
                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
            }
            if (complete) {
                completeFn =
                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
            }
        }
        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
    };
    return EventEmitter$$1;
}(Subject_2));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NgZone$1 = (function () {
    function NgZone$$1(_a) {
        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
        this._hasPendingMicrotasks = false;
        this._hasPendingMacrotasks = false;
        this._isStable = true;
        this._nesting = 0;
        this._onUnstable = new EventEmitter$1(false);
        this._onMicrotaskEmpty = new EventEmitter$1(false);
        this._onStable = new EventEmitter$1(false);
        this._onErrorEvents = new EventEmitter$1(false);
        if (typeof Zone == 'undefined') {
            throw new Error('Angular requires Zone.js prolyfill.');
        }
        Zone.assertZonePatched();
        this.outer = this.inner = Zone.current;
        if (Zone['wtfZoneSpec']) {
            this.inner = this.inner.fork(Zone['wtfZoneSpec']);
        }
        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
            this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
        }
        this.forkInnerZoneWithAngularBehavior();
    }
    NgZone$$1.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
    NgZone$$1.assertInAngularZone = function () {
        if (!NgZone$$1.isInAngularZone()) {
            throw new Error('Expected to be in Angular Zone, but it is not!');
        }
    };
    NgZone$$1.assertNotInAngularZone = function () {
        if (NgZone$$1.isInAngularZone()) {
            throw new Error('Expected to not be in Angular Zone, but it is!');
        }
    };
    NgZone$$1.prototype.run = function (fn) { return this.inner.run(fn); };
    NgZone$$1.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };
    NgZone$$1.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };
    Object.defineProperty(NgZone$$1.prototype, "onUnstable", {
        get: function () { return this._onUnstable; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone$$1.prototype, "onMicrotaskEmpty", {
        get: function () { return this._onMicrotaskEmpty; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone$$1.prototype, "onStable", {
        get: function () { return this._onStable; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone$$1.prototype, "onError", {
        get: function () { return this._onErrorEvents; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone$$1.prototype, "isStable", {
        get: function () { return this._isStable; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone$$1.prototype, "hasPendingMicrotasks", {
        get: function () { return this._hasPendingMicrotasks; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone$$1.prototype, "hasPendingMacrotasks", {
        get: function () { return this._hasPendingMacrotasks; },
        enumerable: true,
        configurable: true
    });
    NgZone$$1.prototype.checkStable = function () {
        var _this = this;
        if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
            try {
                this._nesting++;
                this._onMicrotaskEmpty.emit(null);
            }
            finally {
                this._nesting--;
                if (!this._hasPendingMicrotasks) {
                    try {
                        this.runOutsideAngular(function () { return _this._onStable.emit(null); });
                    }
                    finally {
                        this._isStable = true;
                    }
                }
            }
        }
    };
    NgZone$$1.prototype.forkInnerZoneWithAngularBehavior = function () {
        var _this = this;
        this.inner = this.inner.fork({
            name: 'angular',
            properties: /** @type {?} */ ({ 'isAngularZone': true }),
            onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
                try {
                    _this.onEnter();
                    return delegate.invokeTask(target, task, applyThis, applyArgs);
                }
                finally {
                    _this.onLeave();
                }
            },
            onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
                try {
                    _this.onEnter();
                    return delegate.invoke(target, callback, applyThis, applyArgs, source);
                }
                finally {
                    _this.onLeave();
                }
            },
            onHasTask: function (delegate, current, target, hasTaskState) {
                delegate.hasTask(target, hasTaskState);
                if (current === target) {
                    if (hasTaskState.change == 'microTask') {
                        _this.setHasMicrotask(hasTaskState.microTask);
                    }
                    else if (hasTaskState.change == 'macroTask') {
                        _this.setHasMacrotask(hasTaskState.macroTask);
                    }
                }
            },
            onHandleError: function (delegate, current, target, error) {
                delegate.handleError(target, error);
                _this.triggerError(error);
                return false;
            }
        });
    };
    NgZone$$1.prototype.onEnter = function () {
        this._nesting++;
        if (this._isStable) {
            this._isStable = false;
            this._onUnstable.emit(null);
        }
    };
    NgZone$$1.prototype.onLeave = function () {
        this._nesting--;
        this.checkStable();
    };
    NgZone$$1.prototype.setHasMicrotask = function (hasMicrotasks) {
        this._hasPendingMicrotasks = hasMicrotasks;
        this.checkStable();
    };
    NgZone$$1.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };
    NgZone$$1.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };
    return NgZone$$1;
}());

var AnimationQueue = (function () {
    function AnimationQueue(_zone) {
        this._zone = _zone;
        this.entries = [];
    }
    AnimationQueue.prototype.enqueue = function (player) { this.entries.push(player); };
    AnimationQueue.prototype.flush = function () {
        var _this = this;
        if (this.entries.length) {
            this._zone.runOutsideAngular(function () {
                Promise.resolve(null).then(function () { return _this._triggerAnimations(); });
            });
        }
    };
    AnimationQueue.prototype._triggerAnimations = function () {
        NgZone$1.assertNotInAngularZone();
        while (this.entries.length) {
            var /** @type {?} */ player = this.entries.shift();
            if (!player.hasStarted()) {
                player.play();
            }
        }
    };
    AnimationQueue.decorators = [
        { type: Injectable$1 },
    ];
    AnimationQueue.ctorParameters = function () { return [
        { type: NgZone$1, },
    ]; };
    return AnimationQueue;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DefaultIterableDifferFactory = (function () {
    function DefaultIterableDifferFactory() {
    }
    DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
    DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {
        return new DefaultIterableDiffer(trackByFn);
    };
    return DefaultIterableDifferFactory;
}());
var trackByIdentity = function (index, item) { return item; };
var DefaultIterableDiffer = (function () {
    function DefaultIterableDiffer(_trackByFn) {
        this._trackByFn = _trackByFn;
        this._length = null;
        this._collection = null;
        this._linkedRecords = null;
        this._unlinkedRecords = null;
        this._previousItHead = null;
        this._itHead = null;
        this._itTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._movesHead = null;
        this._movesTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
        this._identityChangesHead = null;
        this._identityChangesTail = null;
        this._trackByFn = this._trackByFn || trackByIdentity;
    }
    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
        get: function () { return this._collection; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
        get: function () { return this._length; },
        enumerable: true,
        configurable: true
    });
    DefaultIterableDiffer.prototype.forEachItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._itHead; record !== null; record = record._next) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
        var /** @type {?} */ nextIt = this._itHead;
        var /** @type {?} */ nextRemove = this._removalsHead;
        var /** @type {?} */ addRemoveOffset = 0;
        var /** @type {?} */ moveOffsets = null;
        while (nextIt || nextRemove) {
            var /** @type {?} */ record = !nextRemove ||
                nextIt &&
                    nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
                nextIt :
                nextRemove;
            var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
            var /** @type {?} */ currentIndex = record.currentIndex;
            if (record === nextRemove) {
                addRemoveOffset--;
                nextRemove = nextRemove._nextRemoved;
            }
            else {
                nextIt = nextIt._next;
                if (record.previousIndex == null) {
                    addRemoveOffset++;
                }
                else {
                    if (!moveOffsets)
                        moveOffsets = [];
                    var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                    var /** @type {?} */ localCurrentIndex = currentIndex - addRemoveOffset;
                    if (localMovePreviousIndex != localCurrentIndex) {
                        for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {
                            var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
                            var /** @type {?} */ index = offset + i;
                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                                moveOffsets[i] = offset + 1;
                            }
                        }
                        var /** @type {?} */ previousIndex = record.previousIndex;
                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                    }
                }
            }
            if (adjPreviousIndex !== currentIndex) {
                fn(record, adjPreviousIndex, currentIndex);
            }
        }
    };
    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._movesHead; record !== null; record = record._nextMoved) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
        var /** @type {?} */ record;
        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
            fn(record);
        }
    };
    DefaultIterableDiffer.prototype.diff = function (collection) {
        if (isBlank(collection))
            collection = [];
        if (!isListLikeIterable(collection)) {
            throw new Error("Error trying to diff '" + collection + "'");
        }
        if (this.check(collection)) {
            return this;
        }
        else {
            return null;
        }
    };
    DefaultIterableDiffer.prototype.onDestroy = function () { };
    DefaultIterableDiffer.prototype.check = function (collection) {
        var _this = this;
        this._reset();
        var /** @type {?} */ record = this._itHead;
        var /** @type {?} */ mayBeDirty = false;
        var /** @type {?} */ index;
        var /** @type {?} */ item;
        var /** @type {?} */ itemTrackBy;
        if (Array.isArray(collection)) {
            var /** @type {?} */ list = collection;
            this._length = collection.length;
            for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {
                item = list[index_1];
                itemTrackBy = this._trackByFn(index_1, item);
                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                    record = this._mismatch(record, item, itemTrackBy, index_1);
                    mayBeDirty = true;
                }
                else {
                    if (mayBeDirty) {
                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
                    }
                    if (!looseIdentical(record.item, item))
                        this._addIdentityChange(record, item);
                }
                record = record._next;
            }
        }
        else {
            index = 0;
            iterateListLike(collection, function (item /** TODO #9100 */) {
                itemTrackBy = _this._trackByFn(index, item);
                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                    record = _this._mismatch(record, item, itemTrackBy, index);
                    mayBeDirty = true;
                }
                else {
                    if (mayBeDirty) {
                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);
                    }
                    if (!looseIdentical(record.item, item))
                        _this._addIdentityChange(record, item);
                }
                record = record._next;
                index++;
            });
            this._length = index;
        }
        this._truncate(record);
        this._collection = collection;
        return this.isDirty;
    };
    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
        get: function () {
            return this._additionsHead !== null || this._movesHead !== null ||
                this._removalsHead !== null || this._identityChangesHead !== null;
        },
        enumerable: true,
        configurable: true
    });
    DefaultIterableDiffer.prototype._reset = function () {
        if (this.isDirty) {
            var /** @type {?} */ record = void 0;
            var /** @type {?} */ nextRecord = void 0;
            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                record.previousIndex = record.currentIndex;
            }
            this._additionsHead = this._additionsTail = null;
            for (record = this._movesHead; record !== null; record = nextRecord) {
                record.previousIndex = record.currentIndex;
                nextRecord = record._nextMoved;
            }
            this._movesHead = this._movesTail = null;
            this._removalsHead = this._removalsTail = null;
            this._identityChangesHead = this._identityChangesTail = null;
        }
    };
    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
        var /** @type {?} */ previousRecord;
        if (record === null) {
            previousRecord = this._itTail;
        }
        else {
            previousRecord = record._prev;
            this._remove(record);
        }
        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
        if (record !== null) {
            if (!looseIdentical(record.item, item))
                this._addIdentityChange(record, item);
            this._moveAfter(record, previousRecord, index);
        }
        else {
            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
            if (record !== null) {
                if (!looseIdentical(record.item, item))
                    this._addIdentityChange(record, item);
                this._reinsertAfter(record, previousRecord, index);
            }
            else {
                record =
                    this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
            }
        }
        return record;
    };
    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
        var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
        if (reinsertRecord !== null) {
            record = this._reinsertAfter(reinsertRecord, record._prev, index);
        }
        else if (record.currentIndex != index) {
            record.currentIndex = index;
            this._addToMoves(record, index);
        }
        return record;
    };
    DefaultIterableDiffer.prototype._truncate = function (record) {
        while (record !== null) {
            var /** @type {?} */ nextRecord = record._next;
            this._addToRemovals(this._unlink(record));
            record = nextRecord;
        }
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.clear();
        }
        if (this._additionsTail !== null) {
            this._additionsTail._nextAdded = null;
        }
        if (this._movesTail !== null) {
            this._movesTail._nextMoved = null;
        }
        if (this._itTail !== null) {
            this._itTail._next = null;
        }
        if (this._removalsTail !== null) {
            this._removalsTail._nextRemoved = null;
        }
        if (this._identityChangesTail !== null) {
            this._identityChangesTail._nextIdentityChange = null;
        }
    };
    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.remove(record);
        }
        var /** @type {?} */ prev = record._prevRemoved;
        var /** @type {?} */ next = record._nextRemoved;
        if (prev === null) {
            this._removalsHead = next;
        }
        else {
            prev._nextRemoved = next;
        }
        if (next === null) {
            this._removalsTail = prev;
        }
        else {
            next._prevRemoved = prev;
        }
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    };
    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
        this._unlink(record);
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    };
    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
        this._insertAfter(record, prevRecord, index);
        if (this._additionsTail === null) {
            this._additionsTail = this._additionsHead = record;
        }
        else {
            this._additionsTail = this._additionsTail._nextAdded = record;
        }
        return record;
    };
    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
        var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;
        record._next = next;
        record._prev = prevRecord;
        if (next === null) {
            this._itTail = record;
        }
        else {
            next._prev = record;
        }
        if (prevRecord === null) {
            this._itHead = record;
        }
        else {
            prevRecord._next = record;
        }
        if (this._linkedRecords === null) {
            this._linkedRecords = new _DuplicateMap();
        }
        this._linkedRecords.put(record);
        record.currentIndex = index;
        return record;
    };
    DefaultIterableDiffer.prototype._remove = function (record) {
        return this._addToRemovals(this._unlink(record));
    };
    DefaultIterableDiffer.prototype._unlink = function (record) {
        if (this._linkedRecords !== null) {
            this._linkedRecords.remove(record);
        }
        var /** @type {?} */ prev = record._prev;
        var /** @type {?} */ next = record._next;
        if (prev === null) {
            this._itHead = next;
        }
        else {
            prev._next = next;
        }
        if (next === null) {
            this._itTail = prev;
        }
        else {
            next._prev = prev;
        }
        return record;
    };
    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
        if (record.previousIndex === toIndex) {
            return record;
        }
        if (this._movesTail === null) {
            this._movesTail = this._movesHead = record;
        }
        else {
            this._movesTail = this._movesTail._nextMoved = record;
        }
        return record;
    };
    DefaultIterableDiffer.prototype._addToRemovals = function (record) {
        if (this._unlinkedRecords === null) {
            this._unlinkedRecords = new _DuplicateMap();
        }
        this._unlinkedRecords.put(record);
        record.currentIndex = null;
        record._nextRemoved = null;
        if (this._removalsTail === null) {
            this._removalsTail = this._removalsHead = record;
            record._prevRemoved = null;
        }
        else {
            record._prevRemoved = this._removalsTail;
            this._removalsTail = this._removalsTail._nextRemoved = record;
        }
        return record;
    };
    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
        record.item = item;
        if (this._identityChangesTail === null) {
            this._identityChangesTail = this._identityChangesHead = record;
        }
        else {
            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
        }
        return record;
    };
    DefaultIterableDiffer.prototype.toString = function () {
        var /** @type {?} */ list = [];
        this.forEachItem(function (record /** TODO #9100 */) { return list.push(record); });
        var /** @type {?} */ previous = [];
        this.forEachPreviousItem(function (record /** TODO #9100 */) { return previous.push(record); });
        var /** @type {?} */ additions = [];
        this.forEachAddedItem(function (record /** TODO #9100 */) { return additions.push(record); });
        var /** @type {?} */ moves = [];
        this.forEachMovedItem(function (record /** TODO #9100 */) { return moves.push(record); });
        var /** @type {?} */ removals = [];
        this.forEachRemovedItem(function (record /** TODO #9100 */) { return removals.push(record); });
        var /** @type {?} */ identityChanges = [];
        this.forEachIdentityChange(function (record /** TODO #9100 */) { return identityChanges.push(record); });
        return 'collection: ' + list.join(', ') + '\n' +
            'previous: ' + previous.join(', ') + '\n' +
            'additions: ' + additions.join(', ') + '\n' +
            'moves: ' + moves.join(', ') + '\n' +
            'removals: ' + removals.join(', ') + '\n' +
            'identityChanges: ' + identityChanges.join(', ') + '\n';
    };
    return DefaultIterableDiffer;
}());
var CollectionChangeRecord = (function () {
    function CollectionChangeRecord(item, trackById) {
        this.item = item;
        this.trackById = trackById;
        this.currentIndex = null;
        this.previousIndex = null;
        this._nextPrevious = null;
        this._prev = null;
        this._next = null;
        this._prevDup = null;
        this._nextDup = null;
        this._prevRemoved = null;
        this._nextRemoved = null;
        this._nextAdded = null;
        this._nextMoved = null;
        this._nextIdentityChange = null;
    }
    CollectionChangeRecord.prototype.toString = function () {
        return this.previousIndex === this.currentIndex ? stringify(this.item) :
            stringify(this.item) + '[' +
                stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
    };
    return CollectionChangeRecord;
}());
var _DuplicateItemRecordList = (function () {
    function _DuplicateItemRecordList() {
        this._head = null;
        this._tail = null;
    }
    _DuplicateItemRecordList.prototype.add = function (record) {
        if (this._head === null) {
            this._head = this._tail = record;
            record._nextDup = null;
            record._prevDup = null;
        }
        else {
            this._tail._nextDup = record;
            record._prevDup = this._tail;
            record._nextDup = null;
            this._tail = record;
        }
    };
    _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
        var /** @type {?} */ record;
        for (record = this._head; record !== null; record = record._nextDup) {
            if ((afterIndex === null || afterIndex < record.currentIndex) &&
                looseIdentical(record.trackById, trackById)) {
                return record;
            }
        }
        return null;
    };
    _DuplicateItemRecordList.prototype.remove = function (record) {
        var /** @type {?} */ prev = record._prevDup;
        var /** @type {?} */ next = record._nextDup;
        if (prev === null) {
            this._head = next;
        }
        else {
            prev._nextDup = next;
        }
        if (next === null) {
            this._tail = prev;
        }
        else {
            next._prevDup = prev;
        }
        return this._head === null;
    };
    return _DuplicateItemRecordList;
}());
var _DuplicateMap = (function () {
    function _DuplicateMap() {
        this.map = new Map();
    }
    _DuplicateMap.prototype.put = function (record) {
        var /** @type {?} */ key = record.trackById;
        var /** @type {?} */ duplicates = this.map.get(key);
        if (!duplicates) {
            duplicates = new _DuplicateItemRecordList();
            this.map.set(key, duplicates);
        }
        duplicates.add(record);
    };
    _DuplicateMap.prototype.get = function (trackById, afterIndex) {
        if (afterIndex === void 0) { afterIndex = null; }
        var /** @type {?} */ key = trackById;
        var /** @type {?} */ recordList = this.map.get(key);
        return recordList ? recordList.get(trackById, afterIndex) : null;
    };
    _DuplicateMap.prototype.remove = function (record) {
        var /** @type {?} */ key = record.trackById;
        var /** @type {?} */ recordList = this.map.get(key);
        if (recordList.remove(record)) {
            this.map.delete(key);
        }
        return record;
    };
    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
        get: function () { return this.map.size === 0; },
        enumerable: true,
        configurable: true
    });
    _DuplicateMap.prototype.clear = function () { this.map.clear(); };
    _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };
    return _DuplicateMap;
}());
function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
    var /** @type {?} */ previousIndex = item.previousIndex;
    if (previousIndex === null)
        return previousIndex;
    var /** @type {?} */ moveOffset = 0;
    if (moveOffsets && previousIndex < moveOffsets.length) {
        moveOffset = moveOffsets[previousIndex];
    }
    return previousIndex + addRemoveOffset + moveOffset;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DefaultKeyValueDifferFactory = (function () {
    function DefaultKeyValueDifferFactory() {
    }
    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
    DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };
    return DefaultKeyValueDifferFactory;
}());
var DefaultKeyValueDiffer = (function () {
    function DefaultKeyValueDiffer() {
        this._records = new Map();
        this._mapHead = null;
        this._previousMapHead = null;
        this._changesHead = null;
        this._changesTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
    }
    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
        get: function () {
            return this._additionsHead !== null || this._changesHead !== null ||
                this._removalsHead !== null;
        },
        enumerable: true,
        configurable: true
    });
    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._mapHead; record !== null; record = record._next) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    };
    DefaultKeyValueDiffer.prototype.diff = function (map) {
        if (!map) {
            map = new Map();
        }
        else if (!(map instanceof Map || isJsObject(map))) {
            throw new Error("Error trying to diff '" + map + "'");
        }
        return this.check(map) ? this : null;
    };
    DefaultKeyValueDiffer.prototype.onDestroy = function () { };
    DefaultKeyValueDiffer.prototype.check = function (map) {
        var _this = this;
        this._reset();
        var /** @type {?} */ records = this._records;
        var /** @type {?} */ oldSeqRecord = this._mapHead;
        var /** @type {?} */ lastOldSeqRecord = null;
        var /** @type {?} */ lastNewSeqRecord = null;
        var /** @type {?} */ seqChanged = false;
        this._forEach(map, function (value, key) {
            var /** @type {?} */ newSeqRecord;
            if (oldSeqRecord && key === oldSeqRecord.key) {
                newSeqRecord = oldSeqRecord;
                _this._maybeAddToChanges(newSeqRecord, value);
            }
            else {
                seqChanged = true;
                if (oldSeqRecord !== null) {
                    _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
                    _this._addToRemovals(oldSeqRecord);
                }
                if (records.has(key)) {
                    newSeqRecord = records.get(key);
                    _this._maybeAddToChanges(newSeqRecord, value);
                }
                else {
                    newSeqRecord = new KeyValueChangeRecord(key);
                    records.set(key, newSeqRecord);
                    newSeqRecord.currentValue = value;
                    _this._addToAdditions(newSeqRecord);
                }
            }
            if (seqChanged) {
                if (_this._isInRemovals(newSeqRecord)) {
                    _this._removeFromRemovals(newSeqRecord);
                }
                if (lastNewSeqRecord == null) {
                    _this._mapHead = newSeqRecord;
                }
                else {
                    lastNewSeqRecord._next = newSeqRecord;
                }
            }
            lastOldSeqRecord = oldSeqRecord;
            lastNewSeqRecord = newSeqRecord;
            oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
        });
        this._truncate(lastOldSeqRecord, oldSeqRecord);
        return this.isDirty;
    };
    DefaultKeyValueDiffer.prototype._reset = function () {
        if (this.isDirty) {
            var /** @type {?} */ record = void 0;
            for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                record.previousValue = record.currentValue;
            }
            for (record = this._additionsHead; record != null; record = record._nextAdded) {
                record.previousValue = record.currentValue;
            }
            this._changesHead = this._changesTail = null;
            this._additionsHead = this._additionsTail = null;
            this._removalsHead = this._removalsTail = null;
        }
    };
    DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
        while (record !== null) {
            if (lastRecord === null) {
                this._mapHead = null;
            }
            else {
                lastRecord._next = null;
            }
            var /** @type {?} */ nextRecord = record._next;
            this._addToRemovals(record);
            lastRecord = record;
            record = nextRecord;
        }
        for (var /** @type {?} */ rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
            rec.previousValue = rec.currentValue;
            rec.currentValue = null;
            this._records.delete(rec.key);
        }
    };
    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
        if (!looseIdentical(newValue, record.currentValue)) {
            record.previousValue = record.currentValue;
            record.currentValue = newValue;
            this._addToChanges(record);
        }
    };
    DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
        return record === this._removalsHead || record._nextRemoved !== null ||
            record._prevRemoved !== null;
    };
    DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
        if (this._removalsHead === null) {
            this._removalsHead = this._removalsTail = record;
        }
        else {
            this._removalsTail._nextRemoved = record;
            record._prevRemoved = this._removalsTail;
            this._removalsTail = record;
        }
    };
    DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
        var /** @type {?} */ next = record._next;
        if (prev === null) {
            this._mapHead = next;
        }
        else {
            prev._next = next;
        }
        record._next = null;
    };
    DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
        var /** @type {?} */ prev = record._prevRemoved;
        var /** @type {?} */ next = record._nextRemoved;
        if (prev === null) {
            this._removalsHead = next;
        }
        else {
            prev._nextRemoved = next;
        }
        if (next === null) {
            this._removalsTail = prev;
        }
        else {
            next._prevRemoved = prev;
        }
        record._prevRemoved = record._nextRemoved = null;
    };
    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
        if (this._additionsHead === null) {
            this._additionsHead = this._additionsTail = record;
        }
        else {
            this._additionsTail._nextAdded = record;
            this._additionsTail = record;
        }
    };
    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
        if (this._changesHead === null) {
            this._changesHead = this._changesTail = record;
        }
        else {
            this._changesTail._nextChanged = record;
            this._changesTail = record;
        }
    };
    DefaultKeyValueDiffer.prototype.toString = function () {
        var /** @type {?} */ items = [];
        var /** @type {?} */ previous = [];
        var /** @type {?} */ changes = [];
        var /** @type {?} */ additions = [];
        var /** @type {?} */ removals = [];
        var /** @type {?} */ record;
        for (record = this._mapHead; record !== null; record = record._next) {
            items.push(stringify(record));
        }
        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            previous.push(stringify(record));
        }
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
            changes.push(stringify(record));
        }
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            additions.push(stringify(record));
        }
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            removals.push(stringify(record));
        }
        return 'map: ' + items.join(', ') + '\n' +
            'previous: ' + previous.join(', ') + '\n' +
            'additions: ' + additions.join(', ') + '\n' +
            'changes: ' + changes.join(', ') + '\n' +
            'removals: ' + removals.join(', ') + '\n';
    };
    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
        if (obj instanceof Map) {
            obj.forEach(fn);
        }
        else {
            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
        }
    };
    return DefaultKeyValueDiffer;
}());
var KeyValueChangeRecord = (function () {
    function KeyValueChangeRecord(key) {
        this.key = key;
        this.previousValue = null;
        this.currentValue = null;
        this._nextPrevious = null;
        this._next = null;
        this._nextAdded = null;
        this._nextRemoved = null;
        this._prevRemoved = null;
        this._nextChanged = null;
    }
    KeyValueChangeRecord.prototype.toString = function () {
        return looseIdentical(this.previousValue, this.currentValue) ?
            stringify(this.key) :
            (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +
                stringify(this.currentValue) + ']');
    };
    return KeyValueChangeRecord;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var IterableDiffers$1 = (function () {
    function IterableDiffers$$1(factories) {
        this.factories = factories;
    }
    IterableDiffers$$1.create = function (factories, parent) {
        if (isPresent(parent)) {
            var /** @type {?} */ copied = parent.factories.slice();
            factories = factories.concat(copied);
            return new IterableDiffers$$1(factories);
        }
        else {
            return new IterableDiffers$$1(factories);
        }
    };
    IterableDiffers$$1.extend = function (factories) {
        return {
            provide: IterableDiffers$$1,
            useFactory: function (parent) {
                if (!parent) {
                    throw new Error('Cannot extend IterableDiffers without a parent injector');
                }
                return IterableDiffers$$1.create(factories, parent);
            },
            deps: [[IterableDiffers$$1, new SkipSelf$1(), new Optional$1()]]
        };
    };
    IterableDiffers$$1.prototype.find = function (iterable) {
        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });
        if (isPresent(factory)) {
            return factory;
        }
        else {
            throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
        }
    };
    return IterableDiffers$$1;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var KeyValueDiffers$1 = (function () {
    function KeyValueDiffers$$1(factories) {
        this.factories = factories;
    }
    KeyValueDiffers$$1.create = function (factories, parent) {
        if (isPresent(parent)) {
            var /** @type {?} */ copied = parent.factories.slice();
            factories = factories.concat(copied);
            return new KeyValueDiffers$$1(factories);
        }
        else {
            return new KeyValueDiffers$$1(factories);
        }
    };
    KeyValueDiffers$$1.extend = function (factories) {
        return {
            provide: KeyValueDiffers$$1,
            useFactory: function (parent) {
                if (!parent) {
                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');
                }
                return KeyValueDiffers$$1.create(factories, parent);
            },
            deps: [[KeyValueDiffers$$1, new SkipSelf$1(), new Optional$1()]]
        };
    };
    KeyValueDiffers$$1.prototype.find = function (kv) {
        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });
        if (isPresent(factory)) {
            return factory;
        }
        else {
            throw new Error("Cannot find a differ supporting object '" + kv + "'");
        }
    };
    return KeyValueDiffers$$1;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var UNINITIALIZED = {
    toString: function () { return 'CD_INIT_VALUE'; }
};
function devModeEqual(a, b) {
    if (isListLikeIterable(a) && isListLikeIterable(b)) {
        return areIterablesEqual(a, b, devModeEqual);
    }
    else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
        return true;
    }
    else {
        return looseIdentical(a, b);
    }
}
var WrappedValue$1 = (function () {
    function WrappedValue$$1(wrapped) {
        this.wrapped = wrapped;
    }
    WrappedValue$$1.wrap = function (value) { return new WrappedValue$$1(value); };
    return WrappedValue$$1;
}());
var ValueUnwrapper = (function () {
    function ValueUnwrapper() {
        this.hasWrappedValue = false;
    }
    ValueUnwrapper.prototype.unwrap = function (value) {
        if (value instanceof WrappedValue$1) {
            this.hasWrappedValue = true;
            return value.wrapped;
        }
        return value;
    };
    ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };
    return ValueUnwrapper;
}());
var SimpleChange = (function () {
    function SimpleChange(previousValue, currentValue) {
        this.previousValue = previousValue;
        this.currentValue = currentValue;
    }
    SimpleChange.prototype.isFirstChange = function () { return this.previousValue === UNINITIALIZED; };
    return SimpleChange;
}());

var ChangeDetectorRef$1 = (function () {
    function ChangeDetectorRef$$1() {
    }
    ChangeDetectorRef$$1.prototype.markForCheck = function () { };
    ChangeDetectorRef$$1.prototype.detach = function () { };
    ChangeDetectorRef$$1.prototype.detectChanges = function () { };
    ChangeDetectorRef$$1.prototype.checkNoChanges = function () { };
    ChangeDetectorRef$$1.prototype.reattach = function () { };
    return ChangeDetectorRef$$1;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var keyValDiff = [new DefaultKeyValueDifferFactory()];
var iterableDiff = [new DefaultIterableDifferFactory()];
var defaultIterableDiffers = new IterableDiffers$1(iterableDiff);
var defaultKeyValueDiffers = new KeyValueDiffers$1(keyValDiff);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var RenderComponentType = (function () {
    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
        this.id = id;
        this.templateUrl = templateUrl;
        this.slotCount = slotCount;
        this.encapsulation = encapsulation;
        this.styles = styles;
        this.animations = animations;
    }
    return RenderComponentType;
}());
var RenderDebugInfo = (function () {
    function RenderDebugInfo() {
    }
    RenderDebugInfo.prototype.injector = function () { };
    RenderDebugInfo.prototype.component = function () { };
    RenderDebugInfo.prototype.providerTokens = function () { };
    RenderDebugInfo.prototype.references = function () { };
    RenderDebugInfo.prototype.context = function () { };
    RenderDebugInfo.prototype.source = function () { };
    return RenderDebugInfo;
}());
var Renderer$1 = (function () {
    function Renderer$$1() {
    }
    Renderer$$1.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };
    Renderer$$1.prototype.createElement = function (parentElement, name, debugInfo) { };
    Renderer$$1.prototype.createViewRoot = function (hostElement) { };
    Renderer$$1.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };
    Renderer$$1.prototype.createText = function (parentElement, value, debugInfo) { };
    Renderer$$1.prototype.projectNodes = function (parentElement, nodes) { };
    Renderer$$1.prototype.attachViewAfter = function (node, viewRootNodes) { };
    Renderer$$1.prototype.detachView = function (viewRootNodes) { };
    Renderer$$1.prototype.destroyView = function (hostElement, viewAllNodes) { };
    Renderer$$1.prototype.listen = function (renderElement, name, callback) { };
    Renderer$$1.prototype.listenGlobal = function (target, name, callback) { };
    Renderer$$1.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };
    Renderer$$1.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };
    Renderer$$1.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
    Renderer$$1.prototype.setElementClass = function (renderElement, className, isAdd) { };
    Renderer$$1.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };
    Renderer$$1.prototype.invokeElementMethod = function (renderElement, methodName, args) { };
    Renderer$$1.prototype.setText = function (renderNode, text) { };
    Renderer$$1.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
    return Renderer$$1;
}());
var RootRenderer$1 = (function () {
    function RootRenderer$$1() {
    }
    RootRenderer$$1.prototype.renderComponent = function (componentType) { };
    return RootRenderer$$1;
}());

var SecurityContext$1 = {};
SecurityContext$1.NONE = 0;
SecurityContext$1.HTML = 1;
SecurityContext$1.STYLE = 2;
SecurityContext$1.SCRIPT = 3;
SecurityContext$1.URL = 4;
SecurityContext$1.RESOURCE_URL = 5;
SecurityContext$1[SecurityContext$1.NONE] = "NONE";
SecurityContext$1[SecurityContext$1.HTML] = "HTML";
SecurityContext$1[SecurityContext$1.STYLE] = "STYLE";
SecurityContext$1[SecurityContext$1.SCRIPT] = "SCRIPT";
SecurityContext$1[SecurityContext$1.URL] = "URL";
SecurityContext$1[SecurityContext$1.RESOURCE_URL] = "RESOURCE_URL";
var Sanitizer$1 = (function () {
    function Sanitizer$$1() {
    }
    Sanitizer$$1.prototype.sanitize = function (context, value) { };
    return Sanitizer$$1;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$30 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ExpressionChangedAfterItHasBeenCheckedError = (function (_super) {
    __extends$30(ExpressionChangedAfterItHasBeenCheckedError, _super);
    function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {
        var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
        if (oldValue === UNINITIALIZED) {
            msg +=
                " It seems like the view has been created after its parent and its children have been dirty checked." +
                    " Has it been created in a change detection hook ?";
        }
        _super.call(this, msg);
    }
    return ExpressionChangedAfterItHasBeenCheckedError;
}(BaseError));
var ViewWrappedError = (function (_super) {
    __extends$30(ViewWrappedError, _super);
    function ViewWrappedError(originalError, context) {
        _super.call(this, "Error in " + context.source, originalError);
        this.context = context;
    }
    return ViewWrappedError;
}(WrappedError));
var ViewDestroyedError = (function (_super) {
    __extends$30(ViewDestroyedError, _super);
    function ViewDestroyedError(details) {
        _super.call(this, "Attempt to use a destroyed view: " + details);
    }
    return ViewDestroyedError;
}(BaseError));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ViewUtils = (function () {
    function ViewUtils(_renderer, sanitizer, animationQueue) {
        this._renderer = _renderer;
        this.animationQueue = animationQueue;
        this.sanitizer = sanitizer;
    }
    ViewUtils.prototype.renderComponent = function (renderComponentType) {
        return this._renderer.renderComponent(renderComponentType);
    };
    ViewUtils.decorators = [
        { type: Injectable$1 },
    ];
    ViewUtils.ctorParameters = function () { return [
        { type: RootRenderer$1, },
        { type: Sanitizer$1, },
        { type: AnimationQueue, },
    ]; };
    return ViewUtils;
}());
var nextRenderComponentTypeId = 0;
function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {
    return new RenderComponentType("" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
}
function addToArray(e, array) {
    array.push(e);
}
function interpolate(valueCount, constAndInterp) {
    var /** @type {?} */ result = '';
    for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {
        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
    }
    return result + constAndInterp[valueCount * 2];
}
function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {
        case 1:
            return c0 + _toStringWithNull(a1) + c1;
        case 2:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
        case 3:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3;
        case 4:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4;
        case 5:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
        case 6:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
        case 7:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7;
        case 8:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
        case 9:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
        default:
            throw new Error("Does not support more than 9 expressions");
    }
}
function _toStringWithNull(v) {
    return v != null ? v.toString() : '';
}
function checkBinding(throwOnChange, oldValue, newValue) {
    if (throwOnChange) {
        if (!devModeEqual(oldValue, newValue)) {
            throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
        }
        return false;
    }
    else {
        return !looseIdentical(oldValue, newValue);
    }
}
function castByValue(input, value) {
    return (input);
}
var EMPTY_ARRAY = [];
var EMPTY_MAP = {};
function pureProxy1(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0 = UNINITIALIZED;
    return function (p0) {
        if (!looseIdentical(v0, p0)) {
            v0 = p0;
            result = fn(p0);
        }
        return result;
    };
}
function pureProxy2(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0 = UNINITIALIZED;
    var /** @type {?} */ v1 = UNINITIALIZED;
    return function (p0, p1) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
            v0 = p0;
            v1 = p1;
            result = fn(p0, p1);
        }
        return result;
    };
}
function pureProxy3(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0 = UNINITIALIZED;
    var /** @type {?} */ v1 = UNINITIALIZED;
    var /** @type {?} */ v2 = UNINITIALIZED;
    return function (p0, p1, p2) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            result = fn(p0, p1, p2);
        }
        return result;
    };
}
function pureProxy4(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3;
    v0 = v1 = v2 = v3 = UNINITIALIZED;
    return function (p0, p1, p2, p3) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            result = fn(p0, p1, p2, p3);
        }
        return result;
    };
}
function pureProxy5(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4;
    v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
    return function (p0, p1, p2, p3, p4) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            result = fn(p0, p1, p2, p3, p4);
        }
        return result;
    };
}
function pureProxy6(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5;
    v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
    return function (p0, p1, p2, p3, p4, p5) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            result = fn(p0, p1, p2, p3, p4, p5);
        }
        return result;
    };
}
function pureProxy7(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
    return function (p0, p1, p2, p3, p4, p5, p6) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
            !looseIdentical(v6, p6)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            result = fn(p0, p1, p2, p3, p4, p5, p6);
        }
        return result;
    };
}
function pureProxy8(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
    return function (p0, p1, p2, p3, p4, p5, p6, p7) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
            !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            v7 = p7;
            result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
        }
        return result;
    };
}
function pureProxy9(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
    return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
            !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            v7 = p7;
            v8 = p8;
            result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
        }
        return result;
    };
}
function pureProxy10(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8, /** @type {?} */ v9;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
    return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
            !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) ||
            !looseIdentical(v9, p9)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            v7 = p7;
            v8 = p8;
            v9 = p9;
            result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
        }
        return result;
    };
}
function setBindingDebugInfoForChanges(renderer, el, changes) {
    Object.keys(changes).forEach(function (propName) {
        setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);
    });
}
function setBindingDebugInfo(renderer, el, propName, value) {
    try {
        renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), value ? value.toString() : null);
    }
    catch (e) {
        renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');
    }
}
var CAMEL_CASE_REGEXP = /([A-Z])/g;
function camelCaseToDashCase(input) {
    return input.replace(CAMEL_CASE_REGEXP, function () {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            m[_i - 0] = arguments[_i];
        }
        return '-' + m[1].toLowerCase();
    });
}
function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {
    var /** @type {?} */ el = renderer.createElement(parentElement, name, debugInfo);
    for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
        renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));
    }
    return el;
}
function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {
    var /** @type {?} */ hostElement;
    if (isPresent(rootSelectorOrNode)) {
        hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);
        for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
            renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));
        }
        renderer.setElementAttribute(hostElement, 'ng-version', VERSION.full);
    }
    else {
        hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);
    }
    return hostElement;
}
function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {
    var /** @type {?} */ disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);
    for (var /** @type {?} */ i = 0; i < eventNamesAndTargets.length; i += 2) {
        var /** @type {?} */ eventName = eventNamesAndTargets.get(i);
        var /** @type {?} */ eventTarget = eventNamesAndTargets.get(i + 1);
        var /** @type {?} */ disposable = void 0;
        if (eventTarget) {
            disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + ":" + eventName));
        }
        else {
            disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));
        }
        disposables.set(i / 2, disposable);
    }
    return disposeInlineArray.bind(null, disposables);
}
function disposeInlineArray(disposables) {
    for (var /** @type {?} */ i = 0; i < disposables.length; i++) {
        disposables.get(i)();
    }
}
function noop() { }
function createEmptyInlineArray(length) {
    var /** @type {?} */ ctor;
    if (length <= 2) {
        ctor = InlineArray2;
    }
    else if (length <= 4) {
        ctor = InlineArray4;
    }
    else if (length <= 8) {
        ctor = InlineArray8;
    }
    else if (length <= 16) {
        ctor = InlineArray16;
    }
    else {
        ctor = InlineArrayDynamic;
    }
    return new ctor(length);
}
var InlineArray0 = (function () {
    function InlineArray0() {
        this.length = 0;
    }
    InlineArray0.prototype.get = function (index) { return undefined; };
    InlineArray0.prototype.set = function (index, value) { };
    return InlineArray0;
}());
var InlineArray2 = (function () {
    function InlineArray2(length, _v0, _v1) {
        this.length = length;
        this._v0 = _v0;
        this._v1 = _v1;
    }
    InlineArray2.prototype.get = function (index) {
        switch (index) {
            case 0:
                return this._v0;
            case 1:
                return this._v1;
            default:
                return undefined;
        }
    };
    InlineArray2.prototype.set = function (index, value) {
        switch (index) {
            case 0:
                this._v0 = value;
                break;
            case 1:
                this._v1 = value;
                break;
        }
    };
    return InlineArray2;
}());
var InlineArray4 = (function () {
    function InlineArray4(length, _v0, _v1, _v2, _v3) {
        this.length = length;
        this._v0 = _v0;
        this._v1 = _v1;
        this._v2 = _v2;
        this._v3 = _v3;
    }
    InlineArray4.prototype.get = function (index) {
        switch (index) {
            case 0:
                return this._v0;
            case 1:
                return this._v1;
            case 2:
                return this._v2;
            case 3:
                return this._v3;
            default:
                return undefined;
        }
    };
    InlineArray4.prototype.set = function (index, value) {
        switch (index) {
            case 0:
                this._v0 = value;
                break;
            case 1:
                this._v1 = value;
                break;
            case 2:
                this._v2 = value;
                break;
            case 3:
                this._v3 = value;
                break;
        }
    };
    return InlineArray4;
}());
var InlineArray8 = (function () {
    function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
        this.length = length;
        this._v0 = _v0;
        this._v1 = _v1;
        this._v2 = _v2;
        this._v3 = _v3;
        this._v4 = _v4;
        this._v5 = _v5;
        this._v6 = _v6;
        this._v7 = _v7;
    }
    InlineArray8.prototype.get = function (index) {
        switch (index) {
            case 0:
                return this._v0;
            case 1:
                return this._v1;
            case 2:
                return this._v2;
            case 3:
                return this._v3;
            case 4:
                return this._v4;
            case 5:
                return this._v5;
            case 6:
                return this._v6;
            case 7:
                return this._v7;
            default:
                return undefined;
        }
    };
    InlineArray8.prototype.set = function (index, value) {
        switch (index) {
            case 0:
                this._v0 = value;
                break;
            case 1:
                this._v1 = value;
                break;
            case 2:
                this._v2 = value;
                break;
            case 3:
                this._v3 = value;
                break;
            case 4:
                this._v4 = value;
                break;
            case 5:
                this._v5 = value;
                break;
            case 6:
                this._v6 = value;
                break;
            case 7:
                this._v7 = value;
                break;
        }
    };
    return InlineArray8;
}());
var InlineArray16 = (function () {
    function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {
        this.length = length;
        this._v0 = _v0;
        this._v1 = _v1;
        this._v2 = _v2;
        this._v3 = _v3;
        this._v4 = _v4;
        this._v5 = _v5;
        this._v6 = _v6;
        this._v7 = _v7;
        this._v8 = _v8;
        this._v9 = _v9;
        this._v10 = _v10;
        this._v11 = _v11;
        this._v12 = _v12;
        this._v13 = _v13;
        this._v14 = _v14;
        this._v15 = _v15;
    }
    InlineArray16.prototype.get = function (index) {
        switch (index) {
            case 0:
                return this._v0;
            case 1:
                return this._v1;
            case 2:
                return this._v2;
            case 3:
                return this._v3;
            case 4:
                return this._v4;
            case 5:
                return this._v5;
            case 6:
                return this._v6;
            case 7:
                return this._v7;
            case 8:
                return this._v8;
            case 9:
                return this._v9;
            case 10:
                return this._v10;
            case 11:
                return this._v11;
            case 12:
                return this._v12;
            case 13:
                return this._v13;
            case 14:
                return this._v14;
            case 15:
                return this._v15;
            default:
                return undefined;
        }
    };
    InlineArray16.prototype.set = function (index, value) {
        switch (index) {
            case 0:
                this._v0 = value;
                break;
            case 1:
                this._v1 = value;
                break;
            case 2:
                this._v2 = value;
                break;
            case 3:
                this._v3 = value;
                break;
            case 4:
                this._v4 = value;
                break;
            case 5:
                this._v5 = value;
                break;
            case 6:
                this._v6 = value;
                break;
            case 7:
                this._v7 = value;
                break;
            case 8:
                this._v8 = value;
                break;
            case 9:
                this._v9 = value;
                break;
            case 10:
                this._v10 = value;
                break;
            case 11:
                this._v11 = value;
                break;
            case 12:
                this._v12 = value;
                break;
            case 13:
                this._v13 = value;
                break;
            case 14:
                this._v14 = value;
                break;
            case 15:
                this._v15 = value;
                break;
        }
    };
    return InlineArray16;
}());
var InlineArrayDynamic = (function () {
    function InlineArrayDynamic(length) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        this.length = length;
        this._values = values;
    }
    InlineArrayDynamic.prototype.get = function (index) { return this._values[index]; };
    InlineArrayDynamic.prototype.set = function (index, value) { this._values[index] = value; };
    return InlineArrayDynamic;
}());
var EMPTY_INLINE_ARRAY = new InlineArray0();


var view_utils = Object.freeze({
	ViewUtils: ViewUtils,
	createRenderComponentType: createRenderComponentType,
	addToArray: addToArray,
	interpolate: interpolate,
	inlineInterpolate: inlineInterpolate,
	checkBinding: checkBinding,
	castByValue: castByValue,
	EMPTY_ARRAY: EMPTY_ARRAY,
	EMPTY_MAP: EMPTY_MAP,
	pureProxy1: pureProxy1,
	pureProxy2: pureProxy2,
	pureProxy3: pureProxy3,
	pureProxy4: pureProxy4,
	pureProxy5: pureProxy5,
	pureProxy6: pureProxy6,
	pureProxy7: pureProxy7,
	pureProxy8: pureProxy8,
	pureProxy9: pureProxy9,
	pureProxy10: pureProxy10,
	setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,
	setBindingDebugInfo: setBindingDebugInfo,
	createRenderElement: createRenderElement,
	selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,
	subscribeToRenderElement: subscribeToRenderElement,
	noop: noop,
	InlineArray2: InlineArray2,
	InlineArray4: InlineArray4,
	InlineArray8: InlineArray8,
	InlineArray16: InlineArray16,
	InlineArrayDynamic: InlineArrayDynamic,
	EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY
});

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$28 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ComponentRef = (function () {
    function ComponentRef() {
    }
    ComponentRef.prototype.location = function () { };
    ComponentRef.prototype.injector = function () { };
    ComponentRef.prototype.instance = function () { };
    ComponentRef.prototype.hostView = function () { };
    ComponentRef.prototype.changeDetectorRef = function () { };
    ComponentRef.prototype.componentType = function () { };
    ComponentRef.prototype.destroy = function () { };
    ComponentRef.prototype.onDestroy = function (callback) { };
    return ComponentRef;
}());
var ComponentRef_ = (function (_super) {
    __extends$28(ComponentRef_, _super);
    function ComponentRef_(_index, _parentView, _nativeElement, _component) {
        _super.call(this);
        this._index = _index;
        this._parentView = _parentView;
        this._nativeElement = _nativeElement;
        this._component = _component;
    }
    Object.defineProperty(ComponentRef_.prototype, "location", {
        get: function () { return new ElementRef$1(this._nativeElement); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "injector", {
        get: function () { return this._parentView.injector(this._index); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "instance", {
        get: function () { return this._component; },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ComponentRef_.prototype, "hostView", {
        get: function () { return this._parentView.ref; },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
        get: function () { return this._parentView.ref; },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ComponentRef_.prototype, "componentType", {
        get: function () { return (this._component.constructor); },
        enumerable: true,
        configurable: true
    });
    ComponentRef_.prototype.destroy = function () { this._parentView.detachAndDestroy(); };
    ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback); };
    return ComponentRef_;
}(ComponentRef));
var ComponentFactory = (function () {
    function ComponentFactory(selector, _viewClass, _componentType) {
        this.selector = selector;
        this._viewClass = _viewClass;
        this._componentType = _componentType;
    }
    Object.defineProperty(ComponentFactory.prototype, "componentType", {
        get: function () { return this._componentType; },
        enumerable: true,
        configurable: true
    });
    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {
        if (projectableNodes === void 0) { projectableNodes = null; }
        if (rootSelectorOrNode === void 0) { rootSelectorOrNode = null; }
        var /** @type {?} */ vu = injector.get(ViewUtils);
        if (!projectableNodes) {
            projectableNodes = [];
        }
        var /** @type {?} */ hostView = new this._viewClass(vu, null, null, null);
        return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);
    };
    return ComponentFactory;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$31 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var NoComponentFactoryError = (function (_super) {
    __extends$31(NoComponentFactoryError, _super);
    function NoComponentFactoryError(component) {
        _super.call(this, "No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
        this.component = component;
    }
    return NoComponentFactoryError;
}(BaseError));
var _NullComponentFactoryResolver = (function () {
    function _NullComponentFactoryResolver() {
    }
    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
        throw new NoComponentFactoryError(component);
    };
    return _NullComponentFactoryResolver;
}());
var ComponentFactoryResolver = (function () {
    function ComponentFactoryResolver() {
    }
    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };
    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
    return ComponentFactoryResolver;
}());
var CodegenComponentFactoryResolver = (function () {
    function CodegenComponentFactoryResolver(factories, _parent) {
        this._parent = _parent;
        this._factories = new Map();
        for (var i = 0; i < factories.length; i++) {
            var factory = factories[i];
            this._factories.set(factory.componentType, factory);
        }
    }
    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
        var /** @type {?} */ result = this._factories.get(component);
        if (!result) {
            result = this._parent.resolveComponentFactory(component);
        }
        return result;
    };
    return CodegenComponentFactoryResolver;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var trace;
var events;
function detectWTF() {
    var /** @type {?} */ wtf = ((_global) /** TODO #9100 */)['wtf'];
    if (wtf) {
        trace = wtf['trace'];
        if (trace) {
            events = trace['events'];
            return true;
        }
    }
    return false;
}
function createScope$1(signature, flags) {
    if (flags === void 0) { flags = null; }
    return events.createScope(signature, flags);
}
function leave(scope, returnValue) {
    trace.leaveScope(scope, returnValue);
    return returnValue;
}
function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
}
function endTimeRange(range) {
    trace.endTimeRange(range);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var wtfEnabled = detectWTF();
function noopScope(arg0, arg1) {
    return null;
}
var wtfCreateScope = wtfEnabled ? createScope$1 : function (signature, flags) { return noopScope; };
var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };
var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var Testability$1 = (function () {
    function Testability$$1(_ngZone) {
        this._ngZone = _ngZone;
        this._pendingCount = 0;
        this._isZoneStable = true;
        this._didWork = false;
        this._callbacks = [];
        this._watchAngularEvents();
    }
    Testability$$1.prototype._watchAngularEvents = function () {
        var _this = this;
        this._ngZone.onUnstable.subscribe({
            next: function () {
                _this._didWork = true;
                _this._isZoneStable = false;
            }
        });
        this._ngZone.runOutsideAngular(function () {
            _this._ngZone.onStable.subscribe({
                next: function () {
                    NgZone$1.assertNotInAngularZone();
                    scheduleMicroTask(function () {
                        _this._isZoneStable = true;
                        _this._runCallbacksIfReady();
                    });
                }
            });
        });
    };
    Testability$$1.prototype.increasePendingRequestCount = function () {
        this._pendingCount += 1;
        this._didWork = true;
        return this._pendingCount;
    };
    Testability$$1.prototype.decreasePendingRequestCount = function () {
        this._pendingCount -= 1;
        if (this._pendingCount < 0) {
            throw new Error('pending async requests below zero');
        }
        this._runCallbacksIfReady();
        return this._pendingCount;
    };
    Testability$$1.prototype.isStable = function () {
        return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
    };
    Testability$$1.prototype._runCallbacksIfReady = function () {
        var _this = this;
        if (this.isStable()) {
            scheduleMicroTask(function () {
                while (_this._callbacks.length !== 0) {
                    (_this._callbacks.pop())(_this._didWork);
                }
                _this._didWork = false;
            });
        }
        else {
            this._didWork = true;
        }
    };
    Testability$$1.prototype.whenStable = function (callback) {
        this._callbacks.push(callback);
        this._runCallbacksIfReady();
    };
    Testability$$1.prototype.getPendingRequestCount = function () { return this._pendingCount; };
    Testability$$1.prototype.findBindings = function (using, provider, exactMatch) {
        return [];
    };
    Testability$$1.prototype.findProviders = function (using, provider, exactMatch) {
        return [];
    };
    Testability$$1.decorators = [
        { type: Injectable$1 },
    ];
    Testability$$1.ctorParameters = function () { return [
        { type: NgZone$1, },
    ]; };
    return Testability$$1;
}());
var TestabilityRegistry = (function () {
    function TestabilityRegistry() {
        this._applications = new Map();
        _testabilityGetter.addToWindow(this);
    }
    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
        this._applications.set(token, testability);
    };
    TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };
    TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
    TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
        if (findInAncestors === void 0) { findInAncestors = true; }
        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
    };
    TestabilityRegistry.decorators = [
        { type: Injectable$1 },
    ];
    TestabilityRegistry.ctorParameters = function () { return []; };
    return TestabilityRegistry;
}());
var _NoopGetTestability = (function () {
    function _NoopGetTestability() {
    }
    _NoopGetTestability.prototype.addToWindow = function (registry) { };
    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
        return null;
    };
    return _NoopGetTestability;
}());
function setTestabilityGetter$1(getter) {
    _testabilityGetter = getter;
}
var _testabilityGetter = new _NoopGetTestability();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$26 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _devMode = true;
var _runModeLocked = false;
var _platform;
function enableProdMode$1() {
    if (_runModeLocked) {
        throw new Error('Cannot enable prod mode after platform setup.');
    }
    _devMode = false;
}
function isDevMode$1() {
    _runModeLocked = true;
    return _devMode;
}
var NgProbeToken$1 = (function () {
    function NgProbeToken$$1(name, token) {
        this.name = name;
        this.token = token;
    }
    return NgProbeToken$$1;
}());
function createPlatform(injector) {
    if (_platform && !_platform.destroyed) {
        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
    }
    _platform = injector.get(PlatformRef);
    var /** @type {?} */ inits = (injector.get(PLATFORM_INITIALIZER$1, null));
    if (inits)
        inits.forEach(function (init) { return init(); });
    return _platform;
}
function createPlatformFactory$1(parentPlatformFactory, name, providers) {
    if (providers === void 0) { providers = []; }
    var /** @type {?} */ marker = new OpaqueToken$1("Platform: " + name);
    return function (extraProviders) {
        if (extraProviders === void 0) { extraProviders = []; }
        if (!getPlatform()) {
            if (parentPlatformFactory) {
                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
            }
            else {
                createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
            }
        }
        return assertPlatform(marker);
    };
}
function assertPlatform(requiredToken) {
    var /** @type {?} */ platform = getPlatform();
    if (!platform) {
        throw new Error('No platform exists!');
    }
    if (!platform.injector.get(requiredToken, null)) {
        throw new Error('A platform with a different configuration has been created. Please destroy it first.');
    }
    return platform;
}
function destroyPlatform() {
    if (_platform && !_platform.destroyed) {
        _platform.destroy();
    }
}
function getPlatform() {
    return _platform && !_platform.destroyed ? _platform : null;
}
var PlatformRef = (function () {
    function PlatformRef() {
    }
    PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { };
    PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { };
    PlatformRef.prototype.onDestroy = function (callback) { };
    PlatformRef.prototype.injector = function () { };
    PlatformRef.prototype.destroy = function () { };
    PlatformRef.prototype.destroyed = function () { };
    return PlatformRef;
}());
function _callAndReportToErrorHandler(errorHandler, callback) {
    try {
        var /** @type {?} */ result = callback();
        if (isPromise$1(result)) {
            return result.catch(function (e) {
                errorHandler.handleError(e);
                throw e;
            });
        }
        return result;
    }
    catch (e) {
        errorHandler.handleError(e);
        throw e;
    }
}
var PlatformRef_ = (function (_super) {
    __extends$26(PlatformRef_, _super);
    function PlatformRef_(_injector) {
        _super.call(this);
        this._injector = _injector;
        this._modules = [];
        this._destroyListeners = [];
        this._destroyed = false;
    }
    PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
    Object.defineProperty(PlatformRef_.prototype, "injector", {
        get: function () { return this._injector; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlatformRef_.prototype, "destroyed", {
        get: function () { return this._destroyed; },
        enumerable: true,
        configurable: true
    });
    PlatformRef_.prototype.destroy = function () {
        if (this._destroyed) {
            throw new Error('The platform has already been destroyed!');
        }
        this._modules.slice().forEach(function (module) { return module.destroy(); });
        this._destroyListeners.forEach(function (listener) { return listener(); });
        this._destroyed = true;
    };
    PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
        return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
    };
    PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
        var _this = this;
        if (!ngZone)
            ngZone = new NgZone$1({ enableLongStackTrace: isDevMode$1() });
        return ngZone.run(function () {
            var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone$1, useValue: ngZone }], _this.injector);
            var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));
            var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler$1, null);
            if (!exceptionHandler) {
                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
            }
            moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef); });
            ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });
            return _callAndReportToErrorHandler(exceptionHandler, function () {
                var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);
                return initStatus.donePromise.then(function () {
                    _this._moduleDoBootstrap(moduleRef);
                    return moduleRef;
                });
            });
        });
    };
    PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
        if (compilerOptions === void 0) { compilerOptions = []; }
        return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
    };
    PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {
        var _this = this;
        if (compilerOptions === void 0) { compilerOptions = []; }
        var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);
        var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
        if (componentFactoryCallback) {
            return compiler.compileModuleAndAllComponentsAsync(moduleType)
                .then(function (_a) {
                var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;
                componentFactoryCallback(componentFactories);
                return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
            });
        }
        return compiler.compileModuleAsync(moduleType)
            .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
    };
    PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
        var /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef$1);
        if (moduleRef.bootstrapFactories.length > 0) {
            moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory); });
        }
        else if (moduleRef.instance.ngDoBootstrap) {
            moduleRef.instance.ngDoBootstrap(appRef);
        }
        else {
            throw new Error(("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") +
                "Please define one of these.");
        }
        this._modules.push(moduleRef);
    };
    PlatformRef_.decorators = [
        { type: Injectable$1 },
    ];
    PlatformRef_.ctorParameters = function () { return [
        { type: Injector$1, },
    ]; };
    return PlatformRef_;
}(PlatformRef));
var ApplicationRef$1 = (function () {
    function ApplicationRef$$1() {
    }
    ApplicationRef$$1.prototype.bootstrap = function (componentFactory) { };
    ApplicationRef$$1.prototype.tick = function () { };
    ApplicationRef$$1.prototype.componentTypes = function () { };
    ApplicationRef$$1.prototype.components = function () { };
    ApplicationRef$$1.prototype.attachView = function (view) { };
    ApplicationRef$$1.prototype.detachView = function (view) { };
    ApplicationRef$$1.prototype.viewCount = function () { };
    return ApplicationRef$$1;
}());
var ApplicationRef_ = (function (_super) {
    __extends$26(ApplicationRef_, _super);
    function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
        var _this = this;
        _super.call(this);
        this._zone = _zone;
        this._console = _console;
        this._injector = _injector;
        this._exceptionHandler = _exceptionHandler;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._initStatus = _initStatus;
        this._testabilityRegistry = _testabilityRegistry;
        this._testability = _testability;
        this._bootstrapListeners = [];
        this._rootComponents = [];
        this._rootComponentTypes = [];
        this._views = [];
        this._runningTick = false;
        this._enforceNoNewChanges = false;
        this._enforceNoNewChanges = isDevMode$1();
        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
    }
    ApplicationRef_.prototype.attachView = function (viewRef) {
        var /** @type {?} */ view = ((viewRef)).internalView;
        this._views.push(view);
        view.attachToAppRef(this);
    };
    ApplicationRef_.prototype.detachView = function (viewRef) {
        var /** @type {?} */ view = ((viewRef)).internalView;
        ListWrapper.remove(this._views, view);
        view.detach();
    };
    ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
        var _this = this;
        if (!this._initStatus.done) {
            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
        }
        var /** @type {?} */ componentFactory;
        if (componentOrFactory instanceof ComponentFactory) {
            componentFactory = componentOrFactory;
        }
        else {
            componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
        }
        this._rootComponentTypes.push(componentFactory.componentType);
        var /** @type {?} */ compRef = componentFactory.create(this._injector, [], componentFactory.selector);
        compRef.onDestroy(function () { _this._unloadComponent(compRef); });
        var /** @type {?} */ testability = compRef.injector.get(Testability$1, null);
        if (testability) {
            compRef.injector.get(TestabilityRegistry)
                .registerApplication(compRef.location.nativeElement, testability);
        }
        this._loadComponent(compRef);
        if (isDevMode$1()) {
            this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
        }
        return compRef;
    };
    ApplicationRef_.prototype._loadComponent = function (componentRef) {
        this.attachView(componentRef.hostView);
        this.tick();
        this._rootComponents.push(componentRef);
        var /** @type {?} */ listeners = (this._injector.get(APP_BOOTSTRAP_LISTENER, [])
            .concat(this._bootstrapListeners));
        listeners.forEach(function (listener) { return listener(componentRef); });
    };
    ApplicationRef_.prototype._unloadComponent = function (componentRef) {
        this.detachView(componentRef.hostView);
        ListWrapper.remove(this._rootComponents, componentRef);
    };
    ApplicationRef_.prototype.tick = function () {
        if (this._runningTick) {
            throw new Error('ApplicationRef.tick is called recursively');
        }
        var /** @type {?} */ scope = ApplicationRef_._tickScope();
        try {
            this._runningTick = true;
            this._views.forEach(function (view) { return view.ref.detectChanges(); });
            if (this._enforceNoNewChanges) {
                this._views.forEach(function (view) { return view.ref.checkNoChanges(); });
            }
        }
        finally {
            this._runningTick = false;
            wtfLeave(scope);
        }
    };
    ApplicationRef_.prototype.ngOnDestroy = function () {
        this._views.slice().forEach(function (view) { return view.destroy(); });
    };
    Object.defineProperty(ApplicationRef_.prototype, "viewCount", {
        get: function () { return this._views.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
        get: function () { return this._rootComponentTypes; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationRef_.prototype, "components", {
        get: function () { return this._rootComponents; },
        enumerable: true,
        configurable: true
    });
    ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
    ApplicationRef_.decorators = [
        { type: Injectable$1 },
    ];
    ApplicationRef_.ctorParameters = function () { return [
        { type: NgZone$1, },
        { type: Console, },
        { type: Injector$1, },
        { type: ErrorHandler$1, },
        { type: ComponentFactoryResolver, },
        { type: ApplicationInitStatus, },
        { type: TestabilityRegistry, decorators: [{ type: Optional$1 },] },
        { type: Testability$1, decorators: [{ type: Optional$1 },] },
    ]; };
    return ApplicationRef_;
}(ApplicationRef$1));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$32 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var NgModuleRef = (function () {
    function NgModuleRef() {
    }
    NgModuleRef.prototype.injector = function () { };
    NgModuleRef.prototype.componentFactoryResolver = function () { };
    NgModuleRef.prototype.instance = function () { };
    NgModuleRef.prototype.destroy = function () { };
    NgModuleRef.prototype.onDestroy = function (callback) { };
    return NgModuleRef;
}());
var NgModuleFactory = (function () {
    function NgModuleFactory(_injectorClass, _moduleType) {
        this._injectorClass = _injectorClass;
        this._moduleType = _moduleType;
    }
    Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
        get: function () { return this._moduleType; },
        enumerable: true,
        configurable: true
    });
    NgModuleFactory.prototype.create = function (parentInjector) {
        if (!parentInjector) {
            parentInjector = Injector$1.NULL;
        }
        var /** @type {?} */ instance = new this._injectorClass(parentInjector);
        instance.create();
        return instance;
    };
    return NgModuleFactory;
}());
var _UNDEFINED = new Object();
var NgModuleInjector = (function (_super) {
    __extends$32(NgModuleInjector, _super);
    function NgModuleInjector(parent, factories, bootstrapFactories) {
        _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
        this.parent = parent;
        this.bootstrapFactories = bootstrapFactories;
        this._destroyListeners = [];
        this._destroyed = false;
    }
    NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };
    NgModuleInjector.prototype.createInternal = function () { };
    NgModuleInjector.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
        if (token === Injector$1 || token === ComponentFactoryResolver) {
            return this;
        }
        var /** @type {?} */ result = this.getInternal(token, _UNDEFINED);
        return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
    };
    NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { };
    Object.defineProperty(NgModuleInjector.prototype, "injector", {
        get: function () { return this; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
        get: function () { return this; },
        enumerable: true,
        configurable: true
    });
    NgModuleInjector.prototype.destroy = function () {
        if (this._destroyed) {
            throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
        }
        this._destroyed = true;
        this.destroyInternal();
        this._destroyListeners.forEach(function (listener) { return listener(); });
    };
    NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
    NgModuleInjector.prototype.destroyInternal = function () { };
    return NgModuleInjector;
}(CodegenComponentFactoryResolver));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NgModuleFactoryLoader = (function () {
    function NgModuleFactoryLoader() {
    }
    NgModuleFactoryLoader.prototype.load = function (path) { };
    return NgModuleFactoryLoader;
}());
var moduleFactories = new Map();
function registerModuleFactory(id, factory) {
    var /** @type {?} */ existing = moduleFactories.get(id);
    if (existing) {
        throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
    }
    moduleFactories.set(id, factory);
}

function getModuleFactory(id) {
    var /** @type {?} */ factory = moduleFactories.get(id);
    if (!factory)
        throw new Error("No module with ID " + id + " loaded");
    return factory;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var QueryList = (function () {
    function QueryList() {
        this._dirty = true;
        this._results = [];
        this._emitter = new EventEmitter$1();
    }
    Object.defineProperty(QueryList.prototype, "changes", {
        get: function () { return this._emitter; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "length", {
        get: function () { return this._results.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "first", {
        get: function () { return this._results[0]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "last", {
        get: function () { return this._results[this.length - 1]; },
        enumerable: true,
        configurable: true
    });
    QueryList.prototype.map = function (fn) { return this._results.map(fn); };
    QueryList.prototype.filter = function (fn) {
        return this._results.filter(fn);
    };
    QueryList.prototype.find = function (fn) { return this._results.find(fn); };
    QueryList.prototype.reduce = function (fn, init) {
        return this._results.reduce(fn, init);
    };
    QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
    QueryList.prototype.some = function (fn) {
        return this._results.some(fn);
    };
    QueryList.prototype.toArray = function () { return this._results.slice(); };
    QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };
    QueryList.prototype.toString = function () { return this._results.toString(); };
    QueryList.prototype.reset = function (res) {
        this._results = ListWrapper.flatten(res);
        this._dirty = false;
    };
    QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
    QueryList.prototype.setDirty = function () { this._dirty = true; };
    Object.defineProperty(QueryList.prototype, "dirty", {
        get: function () { return this._dirty; },
        enumerable: true,
        configurable: true
    });
    return QueryList;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _SEPARATOR = '#';
var FACTORY_CLASS_SUFFIX = 'NgFactory';
var SystemJsNgModuleLoaderConfig = (function () {
    function SystemJsNgModuleLoaderConfig() {
    }
    return SystemJsNgModuleLoaderConfig;
}());
var DEFAULT_CONFIG = {
    factoryPathPrefix: '',
    factoryPathSuffix: '.ngfactory',
};
var SystemJsNgModuleLoader = (function () {
    function SystemJsNgModuleLoader(_compiler, config) {
        this._compiler = _compiler;
        this._config = config || DEFAULT_CONFIG;
    }
    SystemJsNgModuleLoader.prototype.load = function (path) {
        var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;
        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
    };
    SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
        var _this = this;
        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
        if (exportName === undefined) {
            exportName = 'default';
        }
        return System.import(module)
            .then(function (module) { return module[exportName]; })
            .then(function (type) { return checkNotEmpty(type, module, exportName); })
            .then(function (type) { return _this._compiler.compileModuleAsync(type); });
    };
    SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
        var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;
        if (exportName === undefined) {
            exportName = 'default';
            factoryClassSuffix = '';
        }
        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
            .then(function (module) { return module[exportName + factoryClassSuffix]; })
            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
    };
    SystemJsNgModuleLoader.decorators = [
        { type: Injectable$1 },
    ];
    SystemJsNgModuleLoader.ctorParameters = function () { return [
        { type: Compiler, },
        { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional$1 },] },
    ]; };
    return SystemJsNgModuleLoader;
}());
function checkNotEmpty(value, modulePath, exportName) {
    if (!value) {
        throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
    }
    return value;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$33 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var TemplateRef$1 = (function () {
    function TemplateRef$$1() {
    }
    TemplateRef$$1.prototype.elementRef = function () { };
    TemplateRef$$1.prototype.createEmbeddedView = function (context) { };
    return TemplateRef$$1;
}());
var TemplateRef_ = (function (_super) {
    __extends$33(TemplateRef_, _super);
    function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {
        _super.call(this);
        this._parentView = _parentView;
        this._nodeIndex = _nodeIndex;
        this._nativeElement = _nativeElement;
    }
    TemplateRef_.prototype.createEmbeddedView = function (context) {
        var /** @type {?} */ view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);
        view.create(context || ({}));
        return view.ref;
    };
    Object.defineProperty(TemplateRef_.prototype, "elementRef", {
        get: function () { return new ElementRef$1(this._nativeElement); },
        enumerable: true,
        configurable: true
    });
    return TemplateRef_;
}(TemplateRef$1));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ViewContainerRef$1 = (function () {
    function ViewContainerRef$$1() {
    }
    ViewContainerRef$$1.prototype.element = function () { };
    ViewContainerRef$$1.prototype.injector = function () { };
    ViewContainerRef$$1.prototype.parentInjector = function () { };
    ViewContainerRef$$1.prototype.clear = function () { };
    ViewContainerRef$$1.prototype.get = function (index) { };
    ViewContainerRef$$1.prototype.length = function () { };
    ViewContainerRef$$1.prototype.createEmbeddedView = function (templateRef, context, index) { };
    ViewContainerRef$$1.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) { };
    ViewContainerRef$$1.prototype.insert = function (viewRef, index) { };
    ViewContainerRef$$1.prototype.move = function (viewRef, currentIndex) { };
    ViewContainerRef$$1.prototype.indexOf = function (viewRef) { };
    ViewContainerRef$$1.prototype.remove = function (index) { };
    ViewContainerRef$$1.prototype.detach = function (index) { };
    return ViewContainerRef$$1;
}());
var ViewContainerRef_ = (function () {
    function ViewContainerRef_(_element) {
        this._element = _element;
        this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');
        this._insertScope = wtfCreateScope('ViewContainerRef#insert()');
        this._removeScope = wtfCreateScope('ViewContainerRef#remove()');
        this._detachScope = wtfCreateScope('ViewContainerRef#detach()');
    }
    ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };
    Object.defineProperty(ViewContainerRef_.prototype, "length", {
        get: function () {
            var /** @type {?} */ views = this._element.nestedViews;
            return isPresent(views) ? views.length : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "element", {
        get: function () { return this._element.elementRef; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "injector", {
        get: function () { return this._element.injector; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
        get: function () { return this._element.parentInjector; },
        enumerable: true,
        configurable: true
    });
    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
        if (context === void 0) { context = null; }
        if (index === void 0) { index = -1; }
        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context);
        this.insert(viewRef, index);
        return viewRef;
    };
    ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {
        if (index === void 0) { index = -1; }
        if (injector === void 0) { injector = null; }
        if (projectableNodes === void 0) { projectableNodes = null; }
        var /** @type {?} */ s = this._createComponentInContainerScope();
        var /** @type {?} */ contextInjector = injector || this._element.parentInjector;
        var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes);
        this.insert(componentRef.hostView, index);
        return wtfLeave(s, componentRef);
    };
    ViewContainerRef_.prototype.insert = function (viewRef, index) {
        if (index === void 0) { index = -1; }
        var /** @type {?} */ s = this._insertScope();
        if (index == -1)
            index = this.length;
        var /** @type {?} */ viewRef_ = (viewRef);
        this._element.attachView(viewRef_.internalView, index);
        return wtfLeave(s, viewRef_);
    };
    ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
        var /** @type {?} */ s = this._insertScope();
        if (currentIndex == -1)
            return;
        var /** @type {?} */ viewRef_ = (viewRef);
        this._element.moveView(viewRef_.internalView, currentIndex);
        return wtfLeave(s, viewRef_);
    };
    ViewContainerRef_.prototype.indexOf = function (viewRef) {
        return this.length ? this._element.nestedViews.indexOf(((viewRef)).internalView) :
            -1;
    };
    ViewContainerRef_.prototype.remove = function (index) {
        if (index === void 0) { index = -1; }
        var /** @type {?} */ s = this._removeScope();
        if (index == -1)
            index = this.length - 1;
        var /** @type {?} */ view = this._element.detachView(index);
        view.destroy();
        wtfLeave(s);
    };
    ViewContainerRef_.prototype.detach = function (index) {
        if (index === void 0) { index = -1; }
        var /** @type {?} */ s = this._detachScope();
        if (index == -1)
            index = this.length - 1;
        var /** @type {?} */ view = this._element.detachView(index);
        return wtfLeave(s, view.ref);
    };
    ViewContainerRef_.prototype.clear = function () {
        for (var /** @type {?} */ i = this.length - 1; i >= 0; i--) {
            this.remove(i);
        }
    };
    return ViewContainerRef_;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$34 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ViewRef = (function (_super) {
    __extends$34(ViewRef, _super);
    function ViewRef() {
        _super.apply(this, arguments);
    }
    ViewRef.prototype.destroy = function () { };
    ViewRef.prototype.destroyed = function () { };
    ViewRef.prototype.onDestroy = function (callback) { };
    return ViewRef;
}(ChangeDetectorRef$1));
var EmbeddedViewRef = (function (_super) {
    __extends$34(EmbeddedViewRef, _super);
    function EmbeddedViewRef() {
        _super.apply(this, arguments);
    }
    EmbeddedViewRef.prototype.context = function () { };
    EmbeddedViewRef.prototype.rootNodes = function () { };
    return EmbeddedViewRef;
}(ViewRef));
var ViewRef_ = (function () {
    function ViewRef_(_view, animationQueue) {
        this._view = _view;
        this.animationQueue = animationQueue;
        this._view = _view;
        this._originalMode = this._view.cdMode;
    }
    Object.defineProperty(ViewRef_.prototype, "internalView", {
        get: function () { return this._view; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
        get: function () { return this._view.flatRootNodes; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "context", {
        get: function () { return this._view.context; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "destroyed", {
        get: function () { return this._view.destroyed; },
        enumerable: true,
        configurable: true
    });
    ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };
    ViewRef_.prototype.detach = function () { this._view.cdMode = ChangeDetectorStatus.Detached; };
    ViewRef_.prototype.detectChanges = function () {
        this._view.detectChanges(false);
        this.animationQueue.flush();
    };
    ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };
    ViewRef_.prototype.reattach = function () {
        this._view.cdMode = this._originalMode;
        this.markForCheck();
    };
    ViewRef_.prototype.onDestroy = function (callback) {
        if (!this._view.disposables) {
            this._view.disposables = [];
        }
        this._view.disposables.push(callback);
    };
    ViewRef_.prototype.destroy = function () { this._view.detachAndDestroy(); };
    return ViewRef_;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$35 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EventListener = (function () {
    function EventListener(name, callback) {
        this.name = name;
        this.callback = callback;
    }
    
    return EventListener;
}());
var DebugNode = (function () {
    function DebugNode(nativeNode, parent, _debugInfo) {
        this._debugInfo = _debugInfo;
        this.nativeNode = nativeNode;
        if (parent && parent instanceof DebugElement) {
            parent.addChild(this);
        }
        else {
            this.parent = null;
        }
        this.listeners = [];
    }
    Object.defineProperty(DebugNode.prototype, "injector", {
        get: function () { return this._debugInfo ? this._debugInfo.injector : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "componentInstance", {
        get: function () { return this._debugInfo ? this._debugInfo.component : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "context", {
        get: function () { return this._debugInfo ? this._debugInfo.context : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "references", {
        get: function () {
            return this._debugInfo ? this._debugInfo.references : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "providerTokens", {
        get: function () { return this._debugInfo ? this._debugInfo.providerTokens : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "source", {
        get: function () { return this._debugInfo ? this._debugInfo.source : null; },
        enumerable: true,
        configurable: true
    });
    return DebugNode;
}());
var DebugElement = (function (_super) {
    __extends$35(DebugElement, _super);
    function DebugElement(nativeNode, parent, _debugInfo) {
        _super.call(this, nativeNode, parent, _debugInfo);
        this.properties = {};
        this.attributes = {};
        this.classes = {};
        this.styles = {};
        this.childNodes = [];
        this.nativeElement = nativeNode;
    }
    DebugElement.prototype.addChild = function (child) {
        if (child) {
            this.childNodes.push(child);
            child.parent = this;
        }
    };
    DebugElement.prototype.removeChild = function (child) {
        var /** @type {?} */ childIndex = this.childNodes.indexOf(child);
        if (childIndex !== -1) {
            child.parent = null;
            this.childNodes.splice(childIndex, 1);
        }
    };
    DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
        var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);
        if (siblingIndex !== -1) {
            var /** @type {?} */ previousChildren = this.childNodes.slice(0, siblingIndex + 1);
            var /** @type {?} */ nextChildren = this.childNodes.slice(siblingIndex + 1);
            this.childNodes = previousChildren.concat(newChildren, nextChildren);
            for (var /** @type {?} */ i = 0; i < newChildren.length; ++i) {
                var /** @type {?} */ newChild = newChildren[i];
                if (newChild.parent) {
                    newChild.parent.removeChild(newChild);
                }
                newChild.parent = this;
            }
        }
    };
    DebugElement.prototype.query = function (predicate) {
        var /** @type {?} */ results = this.queryAll(predicate);
        return results[0] || null;
    };
    DebugElement.prototype.queryAll = function (predicate) {
        var /** @type {?} */ matches = [];
        _queryElementChildren(this, predicate, matches);
        return matches;
    };
    DebugElement.prototype.queryAllNodes = function (predicate) {
        var /** @type {?} */ matches = [];
        _queryNodeChildren(this, predicate, matches);
        return matches;
    };
    Object.defineProperty(DebugElement.prototype, "children", {
        get: function () {
            return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));
        },
        enumerable: true,
        configurable: true
    });
    DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
        this.listeners.forEach(function (listener) {
            if (listener.name == eventName) {
                listener.callback(eventObj);
            }
        });
    };
    return DebugElement;
}(DebugNode));
function asNativeElements(debugEls) {
    return debugEls.map(function (el) { return el.nativeElement; });
}
function _queryElementChildren(element, predicate, matches) {
    element.childNodes.forEach(function (node) {
        if (node instanceof DebugElement) {
            if (predicate(node)) {
                matches.push(node);
            }
            _queryElementChildren(node, predicate, matches);
        }
    });
}
function _queryNodeChildren(parentNode, predicate, matches) {
    if (parentNode instanceof DebugElement) {
        parentNode.childNodes.forEach(function (node) {
            if (predicate(node)) {
                matches.push(node);
            }
            if (node instanceof DebugElement) {
                _queryNodeChildren(node, predicate, matches);
            }
        });
    }
}
var _nativeNodeToDebugNode = new Map();
function getDebugNode$1(nativeNode) {
    return _nativeNodeToDebugNode.get(nativeNode);
}

function indexDebugNode(node) {
    _nativeNodeToDebugNode.set(node.nativeNode, node);
}
function removeDebugNodeFromIndex(node) {
    _nativeNodeToDebugNode.delete(node.nativeNode);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function _reflector() {
    return reflector;
}
var _CORE_PLATFORM_PROVIDERS = [
    PlatformRef_,
    { provide: PlatformRef, useExisting: PlatformRef_ },
    { provide: Reflector, useFactory: _reflector, deps: [] },
    { provide: ReflectorReader, useExisting: Reflector },
    TestabilityRegistry,
    Console,
];
var platformCore$1 = createPlatformFactory$1(null, 'core', _CORE_PLATFORM_PROVIDERS);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var LOCALE_ID$1 = new OpaqueToken$1('LocaleId');
var TRANSLATIONS = new OpaqueToken$1('Translations');
var TRANSLATIONS_FORMAT = new OpaqueToken$1('TranslationsFormat');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function _iterableDiffersFactory() {
    return defaultIterableDiffers;
}
function _keyValueDiffersFactory() {
    return defaultKeyValueDiffers;
}
function _localeFactory(locale) {
    return locale || 'en-US';
}
var ApplicationModule$1 = (function () {
    function ApplicationModule$$1() {
    }
    ApplicationModule$$1.decorators = [
        { type: NgModule$1, args: [{
                    providers: [
                        ApplicationRef_,
                        { provide: ApplicationRef$1, useExisting: ApplicationRef_ },
                        ApplicationInitStatus,
                        Compiler,
                        APP_ID_RANDOM_PROVIDER,
                        ViewUtils,
                        AnimationQueue,
                        { provide: IterableDiffers$1, useFactory: _iterableDiffersFactory },
                        { provide: KeyValueDiffers$1, useFactory: _keyValueDiffersFactory },
                        {
                            provide: LOCALE_ID$1,
                            useFactory: _localeFactory,
                            deps: [[new Inject$1(LOCALE_ID$1), new Optional$1(), new SkipSelf$1()]]
                        },
                    ]
                },] },
    ];
    ApplicationModule$$1.ctorParameters = function () { return []; };
    return ApplicationModule$$1;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var FILL_STYLE_FLAG = 'true';
var ANY_STATE = '*';
var DEFAULT_STATE = '*';
var EMPTY_STATE = 'void';

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var AnimationGroupPlayer = (function () {
    function AnimationGroupPlayer(_players) {
        var _this = this;
        this._players = _players;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._finished = false;
        this._started = false;
        this._destroyed = false;
        this.parentPlayer = null;
        var count = 0;
        var total = this._players.length;
        if (total == 0) {
            scheduleMicroTask(function () { return _this._onFinish(); });
        }
        else {
            this._players.forEach(function (player) {
                player.parentPlayer = _this;
                player.onDone(function () {
                    if (++count >= total) {
                        _this._onFinish();
                    }
                });
            });
        }
    }
    AnimationGroupPlayer.prototype._onFinish = function () {
        if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach(function (fn) { return fn(); });
            this._onDoneFns = [];
        }
    };
    AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
    AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
    AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
    AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };
    AnimationGroupPlayer.prototype.play = function () {
        if (!isPresent(this.parentPlayer)) {
            this.init();
        }
        if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) { return fn(); });
            this._onStartFns = [];
            this._started = true;
        }
        this._players.forEach(function (player) { return player.play(); });
    };
    AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };
    AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };
    AnimationGroupPlayer.prototype.finish = function () {
        this._onFinish();
        this._players.forEach(function (player) { return player.finish(); });
    };
    AnimationGroupPlayer.prototype.destroy = function () {
        if (!this._destroyed) {
            this._onFinish();
            this._players.forEach(function (player) { return player.destroy(); });
            this._destroyed = true;
        }
    };
    AnimationGroupPlayer.prototype.reset = function () {
        this._players.forEach(function (player) { return player.reset(); });
        this._destroyed = false;
        this._finished = false;
        this._started = false;
    };
    AnimationGroupPlayer.prototype.setPosition = function (p) {
        this._players.forEach(function (player) { player.setPosition(p); });
    };
    AnimationGroupPlayer.prototype.getPosition = function () {
        var /** @type {?} */ min = 0;
        this._players.forEach(function (player) {
            var /** @type {?} */ p = player.getPosition();
            min = Math.min(p, min);
        });
        return min;
    };
    Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
        get: function () { return this._players; },
        enumerable: true,
        configurable: true
    });
    return AnimationGroupPlayer;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var AnimationKeyframe = (function () {
    function AnimationKeyframe(offset, styles) {
        this.offset = offset;
        this.styles = styles;
    }
    return AnimationKeyframe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var AnimationPlayer = (function () {
    function AnimationPlayer() {
    }
    AnimationPlayer.prototype.onDone = function (fn) { };
    AnimationPlayer.prototype.onStart = function (fn) { };
    AnimationPlayer.prototype.init = function () { };
    AnimationPlayer.prototype.hasStarted = function () { };
    AnimationPlayer.prototype.play = function () { };
    AnimationPlayer.prototype.pause = function () { };
    AnimationPlayer.prototype.restart = function () { };
    AnimationPlayer.prototype.finish = function () { };
    AnimationPlayer.prototype.destroy = function () { };
    AnimationPlayer.prototype.reset = function () { };
    AnimationPlayer.prototype.setPosition = function (p) { };
    AnimationPlayer.prototype.getPosition = function () { };
    Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
        get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
        set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },
        enumerable: true,
        configurable: true
    });
    return AnimationPlayer;
}());
var NoOpAnimationPlayer = (function () {
    function NoOpAnimationPlayer() {
        var _this = this;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._started = false;
        this.parentPlayer = null;
        scheduleMicroTask(function () { return _this._onFinish(); });
    }
    NoOpAnimationPlayer.prototype._onFinish = function () {
        this._onDoneFns.forEach(function (fn) { return fn(); });
        this._onDoneFns = [];
    };
    NoOpAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
    NoOpAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
    NoOpAnimationPlayer.prototype.hasStarted = function () { return this._started; };
    NoOpAnimationPlayer.prototype.init = function () { };
    NoOpAnimationPlayer.prototype.play = function () {
        if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) { return fn(); });
            this._onStartFns = [];
        }
        this._started = true;
    };
    NoOpAnimationPlayer.prototype.pause = function () { };
    NoOpAnimationPlayer.prototype.restart = function () { };
    NoOpAnimationPlayer.prototype.finish = function () { this._onFinish(); };
    NoOpAnimationPlayer.prototype.destroy = function () { };
    NoOpAnimationPlayer.prototype.reset = function () { };
    NoOpAnimationPlayer.prototype.setPosition = function (p) { };
    NoOpAnimationPlayer.prototype.getPosition = function () { return 0; };
    return NoOpAnimationPlayer;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var AnimationSequencePlayer = (function () {
    function AnimationSequencePlayer(_players) {
        var _this = this;
        this._players = _players;
        this._currentIndex = 0;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._finished = false;
        this._started = false;
        this._destroyed = false;
        this.parentPlayer = null;
        this._players.forEach(function (player) { player.parentPlayer = _this; });
        this._onNext(false);
    }
    AnimationSequencePlayer.prototype._onNext = function (start) {
        var _this = this;
        if (this._finished)
            return;
        if (this._players.length == 0) {
            this._activePlayer = new NoOpAnimationPlayer();
            scheduleMicroTask(function () { return _this._onFinish(); });
        }
        else if (this._currentIndex >= this._players.length) {
            this._activePlayer = new NoOpAnimationPlayer();
            this._onFinish();
        }
        else {
            var /** @type {?} */ player = this._players[this._currentIndex++];
            player.onDone(function () { return _this._onNext(true); });
            this._activePlayer = player;
            if (start) {
                player.play();
            }
        }
    };
    AnimationSequencePlayer.prototype._onFinish = function () {
        if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach(function (fn) { return fn(); });
            this._onDoneFns = [];
        }
    };
    AnimationSequencePlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
    AnimationSequencePlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
    AnimationSequencePlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
    AnimationSequencePlayer.prototype.hasStarted = function () { return this._started; };
    AnimationSequencePlayer.prototype.play = function () {
        if (!isPresent(this.parentPlayer)) {
            this.init();
        }
        if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) { return fn(); });
            this._onStartFns = [];
            this._started = true;
        }
        this._activePlayer.play();
    };
    AnimationSequencePlayer.prototype.pause = function () { this._activePlayer.pause(); };
    AnimationSequencePlayer.prototype.restart = function () {
        this.reset();
        if (this._players.length > 0) {
            this._players[0].restart();
        }
    };
    AnimationSequencePlayer.prototype.reset = function () {
        this._players.forEach(function (player) { return player.reset(); });
        this._destroyed = false;
        this._finished = false;
        this._started = false;
    };
    AnimationSequencePlayer.prototype.finish = function () {
        this._onFinish();
        this._players.forEach(function (player) { return player.finish(); });
    };
    AnimationSequencePlayer.prototype.destroy = function () {
        if (!this._destroyed) {
            this._onFinish();
            this._players.forEach(function (player) { return player.destroy(); });
            this._destroyed = true;
            this._activePlayer = new NoOpAnimationPlayer();
        }
    };
    AnimationSequencePlayer.prototype.setPosition = function (p) { this._players[0].setPosition(p); };
    AnimationSequencePlayer.prototype.getPosition = function () { return this._players[0].getPosition(); };
    Object.defineProperty(AnimationSequencePlayer.prototype, "players", {
        get: function () { return this._players; },
        enumerable: true,
        configurable: true
    });
    return AnimationSequencePlayer;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$36 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AUTO_STYLE$1 = '*';
var AnimationEntryMetadata = (function () {
    function AnimationEntryMetadata(name, definitions) {
        this.name = name;
        this.definitions = definitions;
    }
    return AnimationEntryMetadata;
}());
var AnimationStateMetadata = (function () {
    function AnimationStateMetadata() {
    }
    return AnimationStateMetadata;
}());
var AnimationStateDeclarationMetadata = (function (_super) {
    __extends$36(AnimationStateDeclarationMetadata, _super);
    function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
        _super.call(this);
        this.stateNameExpr = stateNameExpr;
        this.styles = styles;
    }
    return AnimationStateDeclarationMetadata;
}(AnimationStateMetadata));
var AnimationStateTransitionMetadata = (function (_super) {
    __extends$36(AnimationStateTransitionMetadata, _super);
    function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
        _super.call(this);
        this.stateChangeExpr = stateChangeExpr;
        this.steps = steps;
    }
    return AnimationStateTransitionMetadata;
}(AnimationStateMetadata));
var AnimationMetadata = (function () {
    function AnimationMetadata() {
    }
    return AnimationMetadata;
}());
var AnimationKeyframesSequenceMetadata = (function (_super) {
    __extends$36(AnimationKeyframesSequenceMetadata, _super);
    function AnimationKeyframesSequenceMetadata(steps) {
        _super.call(this);
        this.steps = steps;
    }
    return AnimationKeyframesSequenceMetadata;
}(AnimationMetadata));
var AnimationStyleMetadata = (function (_super) {
    __extends$36(AnimationStyleMetadata, _super);
    function AnimationStyleMetadata(styles, offset) {
        if (offset === void 0) { offset = null; }
        _super.call(this);
        this.styles = styles;
        this.offset = offset;
    }
    return AnimationStyleMetadata;
}(AnimationMetadata));
var AnimationAnimateMetadata = (function (_super) {
    __extends$36(AnimationAnimateMetadata, _super);
    function AnimationAnimateMetadata(timings, styles) {
        _super.call(this);
        this.timings = timings;
        this.styles = styles;
    }
    return AnimationAnimateMetadata;
}(AnimationMetadata));
var AnimationWithStepsMetadata = (function (_super) {
    __extends$36(AnimationWithStepsMetadata, _super);
    function AnimationWithStepsMetadata() {
        _super.call(this);
    }
    Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
        get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
        enumerable: true,
        configurable: true
    });
    return AnimationWithStepsMetadata;
}(AnimationMetadata));
var AnimationSequenceMetadata = (function (_super) {
    __extends$36(AnimationSequenceMetadata, _super);
    function AnimationSequenceMetadata(_steps) {
        _super.call(this);
        this._steps = _steps;
    }
    Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
        get: function () { return this._steps; },
        enumerable: true,
        configurable: true
    });
    return AnimationSequenceMetadata;
}(AnimationWithStepsMetadata));
var AnimationGroupMetadata = (function (_super) {
    __extends$36(AnimationGroupMetadata, _super);
    function AnimationGroupMetadata(_steps) {
        _super.call(this);
        this._steps = _steps;
    }
    Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
        get: function () { return this._steps; },
        enumerable: true,
        configurable: true
    });
    return AnimationGroupMetadata;
}(AnimationWithStepsMetadata));
function animate(timing, styles) {
    if (styles === void 0) { styles = null; }
    var /** @type {?} */ stylesEntry = styles;
    if (!isPresent(stylesEntry)) {
        var /** @type {?} */ EMPTY_STYLE = {};
        stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
    }
    return new AnimationAnimateMetadata(timing, stylesEntry);
}
function group(steps) {
    return new AnimationGroupMetadata(steps);
}
function sequence(steps) {
    return new AnimationSequenceMetadata(steps);
}
function style(tokens) {
    var /** @type {?} */ input;
    var /** @type {?} */ offset = null;
    if (typeof tokens === 'string') {
        input = [(tokens)];
    }
    else {
        if (Array.isArray(tokens)) {
            input = (tokens);
        }
        else {
            input = [(tokens)];
        }
        input.forEach(function (entry) {
            var /** @type {?} */ entryOffset = ((entry) /** TODO #9100 */)['offset'];
            if (isPresent(entryOffset)) {
                offset = offset == null ? parseFloat(entryOffset) : offset;
            }
        });
    }
    return new AnimationStyleMetadata(input, offset);
}
function state(stateNameExpr, styles) {
    return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
}
function keyframes(steps) {
    return new AnimationKeyframesSequenceMetadata(steps);
}
function transition(stateChangeExpr, steps) {
    var /** @type {?} */ animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
    return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
}
function trigger(name, animation) {
    return new AnimationEntryMetadata(name, animation);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
    if (nullValue === void 0) { nullValue = null; }
    var /** @type {?} */ finalStyles = {};
    Object.keys(newStyles).forEach(function (prop) {
        var /** @type {?} */ value = newStyles[prop];
        finalStyles[prop] = value == AUTO_STYLE$1 ? nullValue : value.toString();
    });
    Object.keys(previousStyles).forEach(function (prop) {
        if (!isPresent(finalStyles[prop])) {
            finalStyles[prop] = nullValue;
        }
    });
    return finalStyles;
}
function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes$$1) {
    var /** @type {?} */ limit = keyframes$$1.length - 1;
    var /** @type {?} */ firstKeyframe = keyframes$$1[0];
    var /** @type {?} */ flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
    var /** @type {?} */ extraFirstKeyframeStyles = {};
    var /** @type {?} */ hasExtraFirstStyles = false;
    Object.keys(collectedStyles).forEach(function (prop) {
        var /** @type {?} */ value = (collectedStyles[prop]);
        if (!flatenedFirstKeyframeStyles[prop]) {
            flatenedFirstKeyframeStyles[prop] = value;
            extraFirstKeyframeStyles[prop] = value;
            hasExtraFirstStyles = true;
        }
    });
    var /** @type {?} */ keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
    var /** @type {?} */ finalKeyframe = keyframes$$1[limit];
    finalKeyframe.styles.styles.unshift(finalStateStyles);
    var /** @type {?} */ flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
    var /** @type {?} */ extraFinalKeyframeStyles = {};
    var /** @type {?} */ hasExtraFinalStyles = false;
    Object.keys(keyframeCollectedStyles).forEach(function (prop) {
        if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
            extraFinalKeyframeStyles[prop] = AUTO_STYLE$1;
            hasExtraFinalStyles = true;
        }
    });
    if (hasExtraFinalStyles) {
        finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
    }
    Object.keys(flatenedFinalKeyframeStyles).forEach(function (prop) {
        if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
            extraFirstKeyframeStyles[prop] = AUTO_STYLE$1;
            hasExtraFirstStyles = true;
        }
    });
    if (hasExtraFirstStyles) {
        firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
    }
    collectAndResolveStyles(collectedStyles, [finalStateStyles]);
    return keyframes$$1;
}
function clearStyles(styles) {
    var /** @type {?} */ finalStyles = {};
    Object.keys(styles).forEach(function (key) { finalStyles[key] = null; });
    return finalStyles;
}
function collectAndResolveStyles(collection, styles) {
    return styles.map(function (entry) {
        var /** @type {?} */ stylesObj = {};
        Object.keys(entry).forEach(function (prop) {
            var /** @type {?} */ value = entry[prop];
            if (value == FILL_STYLE_FLAG) {
                value = collection[prop];
                if (!isPresent(value)) {
                    value = AUTO_STYLE$1;
                }
            }
            collection[prop] = value;
            stylesObj[prop] = value;
        });
        return stylesObj;
    });
}
function renderStyles(element, renderer, styles) {
    Object.keys(styles).forEach(function (prop) { renderer.setElementStyle(element, prop, styles[prop]); });
}
function flattenStyles(styles) {
    var /** @type {?} */ finalStyles = {};
    styles.forEach(function (entry) {
        Object.keys(entry).forEach(function (prop) { finalStyles[prop] = (entry[prop]); });
    });
    return finalStyles;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var AnimationStyles = (function () {
    function AnimationStyles(styles) {
        this.styles = styles;
    }
    return AnimationStyles;
}());

var AnimationTransitionEvent = (function () {
    function AnimationTransitionEvent(_a) {
        var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime, phaseName = _a.phaseName;
        this.fromState = fromState;
        this.toState = toState;
        this.totalTime = totalTime;
        this.phaseName = phaseName;
    }
    return AnimationTransitionEvent;
}());

var AnimationTransition = (function () {
    function AnimationTransition(_player, _fromState, _toState, _totalTime) {
        this._player = _player;
        this._fromState = _fromState;
        this._toState = _toState;
        this._totalTime = _totalTime;
    }
    AnimationTransition.prototype._createEvent = function (phaseName) {
        return new AnimationTransitionEvent({
            fromState: this._fromState,
            toState: this._toState,
            totalTime: this._totalTime,
            phaseName: phaseName
        });
    };
    AnimationTransition.prototype.onStart = function (callback) {
        var _this = this;
        var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('start')); }, 'player.onStart'));
        this._player.onStart(fn);
    };
    AnimationTransition.prototype.onDone = function (callback) {
        var _this = this;
        var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('done')); }, 'player.onDone'));
        this._player.onDone(fn);
    };
    return AnimationTransition;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DebugDomRootRenderer = (function () {
    function DebugDomRootRenderer(_delegate) {
        this._delegate = _delegate;
    }
    DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {
        return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
    };
    return DebugDomRootRenderer;
}());
var DebugDomRenderer = (function () {
    function DebugDomRenderer(_delegate) {
        this._delegate = _delegate;
    }
    DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
        var /** @type {?} */ nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
        var /** @type {?} */ debugEl = new DebugElement(nativeEl, null, debugInfo);
        indexDebugNode(debugEl);
        return nativeEl;
    };
    DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {
        var /** @type {?} */ nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
        var /** @type {?} */ debugEl = new DebugElement(nativeEl, getDebugNode$1(parentElement), debugInfo);
        debugEl.name = name;
        indexDebugNode(debugEl);
        return nativeEl;
    };
    DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };
    DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
        var /** @type {?} */ comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
        var /** @type {?} */ debugEl = new DebugNode(comment, getDebugNode$1(parentElement), debugInfo);
        indexDebugNode(debugEl);
        return comment;
    };
    DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
        var /** @type {?} */ text = this._delegate.createText(parentElement, value, debugInfo);
        var /** @type {?} */ debugEl = new DebugNode(text, getDebugNode$1(parentElement), debugInfo);
        indexDebugNode(debugEl);
        return text;
    };
    DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {
        var /** @type {?} */ debugParent = getDebugNode$1(parentElement);
        if (isPresent(debugParent) && debugParent instanceof DebugElement) {
            var /** @type {?} */ debugElement_1 = debugParent;
            nodes.forEach(function (node) { debugElement_1.addChild(getDebugNode$1(node)); });
        }
        this._delegate.projectNodes(parentElement, nodes);
    };
    DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
        var /** @type {?} */ debugNode = getDebugNode$1(node);
        if (isPresent(debugNode)) {
            var /** @type {?} */ debugParent = debugNode.parent;
            if (viewRootNodes.length > 0 && isPresent(debugParent)) {
                var /** @type {?} */ debugViewRootNodes_1 = [];
                viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes_1.push(getDebugNode$1(rootNode)); });
                debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);
            }
        }
        this._delegate.attachViewAfter(node, viewRootNodes);
    };
    DebugDomRenderer.prototype.detachView = function (viewRootNodes) {
        viewRootNodes.forEach(function (node) {
            var /** @type {?} */ debugNode = getDebugNode$1(node);
            if (isPresent(debugNode) && isPresent(debugNode.parent)) {
                debugNode.parent.removeChild(debugNode);
            }
        });
        this._delegate.detachView(viewRootNodes);
    };
    DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
        viewAllNodes = viewAllNodes || [];
        viewAllNodes.forEach(function (node) { removeDebugNodeFromIndex(getDebugNode$1(node)); });
        this._delegate.destroyView(hostElement, viewAllNodes);
    };
    DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {
        var /** @type {?} */ debugEl = getDebugNode$1(renderElement);
        if (isPresent(debugEl)) {
            debugEl.listeners.push(new EventListener(name, callback));
        }
        return this._delegate.listen(renderElement, name, callback);
    };
    DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {
        return this._delegate.listenGlobal(target, name, callback);
    };
    DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
        var /** @type {?} */ debugEl = getDebugNode$1(renderElement);
        if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.properties[propertyName] = propertyValue;
        }
        this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
    };
    DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
        var /** @type {?} */ debugEl = getDebugNode$1(renderElement);
        if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.attributes[attributeName] = attributeValue;
        }
        this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
    };
    DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
        this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
    };
    DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
        var /** @type {?} */ debugEl = getDebugNode$1(renderElement);
        if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.classes[className] = isAdd;
        }
        this._delegate.setElementClass(renderElement, className, isAdd);
    };
    DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
        var /** @type {?} */ debugEl = getDebugNode$1(renderElement);
        if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.styles[styleName] = styleValue;
        }
        this._delegate.setElementStyle(renderElement, styleName, styleValue);
    };
    DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
        this._delegate.invokeElementMethod(renderElement, methodName, args);
    };
    DebugDomRenderer.prototype.setText = function (renderNode, text) { this._delegate.setText(renderNode, text); };
    DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
    };
    return DebugDomRenderer;
}());

var ViewType = {};
ViewType.HOST = 0;
ViewType.COMPONENT = 1;
ViewType.EMBEDDED = 2;
ViewType[ViewType.HOST] = "HOST";
ViewType[ViewType.COMPONENT] = "COMPONENT";
ViewType[ViewType.EMBEDDED] = "EMBEDDED";

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var StaticNodeDebugInfo = (function () {
    function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
        this.providerTokens = providerTokens;
        this.componentToken = componentToken;
        this.refTokens = refTokens;
    }
    return StaticNodeDebugInfo;
}());
var DebugContext = (function () {
    function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
        this._view = _view;
        this._nodeIndex = _nodeIndex;
        this._tplRow = _tplRow;
        this._tplCol = _tplCol;
    }
    Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
        get: function () {
            return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "context", {
        get: function () { return this._view.context; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "component", {
        get: function () {
            var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
            if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
                return this.injector.get(staticNodeInfo.componentToken);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
        get: function () {
            var /** @type {?} */ componentView = this._view;
            while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {
                componentView = (componentView.parentView);
            }
            return componentView.parentElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "injector", {
        get: function () { return this._view.injector(this._nodeIndex); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "renderNode", {
        get: function () {
            if (isPresent(this._nodeIndex) && this._view.allNodes) {
                return this._view.allNodes[this._nodeIndex];
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "providerTokens", {
        get: function () {
            var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
            return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "source", {
        get: function () {
            return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "references", {
        get: function () {
            var _this = this;
            var /** @type {?} */ varValues = {};
            var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
            if (isPresent(staticNodeInfo)) {
                var /** @type {?} */ refs_1 = staticNodeInfo.refTokens;
                Object.keys(refs_1).forEach(function (refName) {
                    var /** @type {?} */ refToken = refs_1[refName];
                    var /** @type {?} */ varValue;
                    if (isBlank(refToken)) {
                        varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
                    }
                    else {
                        varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
                    }
                    varValues[refName] = varValue;
                });
            }
            return varValues;
        },
        enumerable: true,
        configurable: true
    });
    return DebugContext;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ViewAnimationMap = (function () {
    function ViewAnimationMap() {
        this._map = new Map();
        this._allPlayers = [];
    }
    ViewAnimationMap.prototype.find = function (element, animationName) {
        var /** @type {?} */ playersByAnimation = this._map.get(element);
        if (isPresent(playersByAnimation)) {
            return playersByAnimation[animationName];
        }
    };
    ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {
        var /** @type {?} */ el = this._map.get(element);
        return el ? Object.keys(el).map(function (k) { return el[k]; }) : [];
    };
    ViewAnimationMap.prototype.set = function (element, animationName, player) {
        var /** @type {?} */ playersByAnimation = this._map.get(element);
        if (!isPresent(playersByAnimation)) {
            playersByAnimation = {};
        }
        var /** @type {?} */ existingEntry = playersByAnimation[animationName];
        if (isPresent(existingEntry)) {
            this.remove(element, animationName);
        }
        playersByAnimation[animationName] = player;
        this._allPlayers.push(player);
        this._map.set(element, playersByAnimation);
    };
    ViewAnimationMap.prototype.getAllPlayers = function () { return this._allPlayers; };
    ViewAnimationMap.prototype.remove = function (element, animationName, targetPlayer) {
        if (targetPlayer === void 0) { targetPlayer = null; }
        var /** @type {?} */ playersByAnimation = this._map.get(element);
        if (playersByAnimation) {
            var /** @type {?} */ player = playersByAnimation[animationName];
            if (!targetPlayer || player === targetPlayer) {
                delete playersByAnimation[animationName];
                var /** @type {?} */ index = this._allPlayers.indexOf(player);
                this._allPlayers.splice(index, 1);
                if (Object.keys(playersByAnimation).length === 0) {
                    this._map.delete(element);
                }
            }
        }
    };
    return ViewAnimationMap;
}());

var AnimationViewContext = (function () {
    function AnimationViewContext(_animationQueue) {
        this._animationQueue = _animationQueue;
        this._players = new ViewAnimationMap();
    }
    AnimationViewContext.prototype.onAllActiveAnimationsDone = function (callback) {
        var /** @type {?} */ activeAnimationPlayers = this._players.getAllPlayers();
        if (activeAnimationPlayers.length) {
            new AnimationGroupPlayer(activeAnimationPlayers).onDone(function () { return callback(); });
        }
        else {
            callback();
        }
    };
    AnimationViewContext.prototype.queueAnimation = function (element, animationName, player) {
        var _this = this;
        this._animationQueue.enqueue(player);
        this._players.set(element, animationName, player);
        player.onDone(function () { return _this._players.remove(element, animationName, player); });
    };
    AnimationViewContext.prototype.getAnimationPlayers = function (element, animationName) {
        if (animationName === void 0) { animationName = null; }
        var /** @type {?} */ players = [];
        if (animationName) {
            var /** @type {?} */ currentPlayer = this._players.find(element, animationName);
            if (currentPlayer) {
                _recursePlayers(currentPlayer, players);
            }
        }
        else {
            this._players.findAllPlayersByElement(element).forEach(function (player) { return _recursePlayers(player, players); });
        }
        return players;
    };
    return AnimationViewContext;
}());
function _recursePlayers(player, collectedPlayers) {
    if ((player instanceof AnimationGroupPlayer) || (player instanceof AnimationSequencePlayer)) {
        player.players.forEach(function (player) { return _recursePlayers(player, collectedPlayers); });
    }
    else {
        collectedPlayers.push(player);
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$38 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ElementInjector = (function (_super) {
    __extends$38(ElementInjector, _super);
    function ElementInjector(_view, _nodeIndex) {
        _super.call(this);
        this._view = _view;
        this._nodeIndex = _nodeIndex;
    }
    ElementInjector.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
        return this._view.injectorGet(token, this._nodeIndex, notFoundValue);
    };
    return ElementInjector;
}(Injector$1));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$37 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _scope_check = wtfCreateScope("AppView#check(ascii id)");
var EMPTY_CONTEXT = new Object();
var UNDEFINED$1 = new Object();
var AppView = (function () {
    function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {
        if (declaredViewContainer === void 0) { declaredViewContainer = null; }
        this.clazz = clazz;
        this.componentType = componentType;
        this.type = type;
        this.viewUtils = viewUtils;
        this.parentView = parentView;
        this.parentIndex = parentIndex;
        this.parentElement = parentElement;
        this.cdMode = cdMode;
        this.declaredViewContainer = declaredViewContainer;
        this.numberOfChecks = 0;
        this.ref = new ViewRef_(this, viewUtils.animationQueue);
        if (type === ViewType.COMPONENT || type === ViewType.HOST) {
            this.renderer = viewUtils.renderComponent(componentType);
        }
        else {
            this.renderer = parentView.renderer;
        }
        this._directRenderer = this.renderer.directRenderer;
    }
    Object.defineProperty(AppView.prototype, "animationContext", {
        get: function () {
            if (!this._animationContext) {
                this._animationContext = new AnimationViewContext(this.viewUtils.animationQueue);
            }
            return this._animationContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppView.prototype, "destroyed", {
        get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed; },
        enumerable: true,
        configurable: true
    });
    AppView.prototype.create = function (context) {
        this.context = context;
        return this.createInternal(null);
    };
    AppView.prototype.createHostView = function (rootSelectorOrNode, hostInjector, projectableNodes) {
        this.context = (EMPTY_CONTEXT);
        this._hasExternalHostElement = isPresent(rootSelectorOrNode);
        this._hostInjector = hostInjector;
        this._hostProjectableNodes = projectableNodes;
        return this.createInternal(rootSelectorOrNode);
    };
    AppView.prototype.createInternal = function (rootSelectorOrNode) { return null; };
    AppView.prototype.createEmbeddedViewInternal = function (templateNodeIndex) { return null; };
    AppView.prototype.init = function (lastRootNode, allNodes, disposables) {
        this.lastRootNode = lastRootNode;
        this.allNodes = allNodes;
        this.disposables = disposables;
        if (this.type === ViewType.COMPONENT) {
            this.dirtyParentQueriesInternal();
        }
    };
    AppView.prototype.injectorGet = function (token, nodeIndex, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
        var /** @type {?} */ result = UNDEFINED$1;
        var /** @type {?} */ view = this;
        while (result === UNDEFINED$1) {
            if (isPresent(nodeIndex)) {
                result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);
            }
            if (result === UNDEFINED$1 && view.type === ViewType.HOST) {
                result = view._hostInjector.get(token, notFoundValue);
            }
            nodeIndex = view.parentIndex;
            view = view.parentView;
        }
        return result;
    };
    AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {
        return notFoundResult;
    };
    AppView.prototype.injector = function (nodeIndex) { return new ElementInjector(this, nodeIndex); };
    AppView.prototype.detachAndDestroy = function () {
        if (this.viewContainer) {
            this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));
        }
        else if (this.appRef) {
            this.appRef.detachView(this.ref);
        }
        else if (this._hasExternalHostElement) {
            this.detach();
        }
        this.destroy();
    };
    AppView.prototype.destroy = function () {
        var _this = this;
        if (this.cdMode === ChangeDetectorStatus.Destroyed) {
            return;
        }
        var /** @type {?} */ hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;
        if (this.disposables) {
            for (var /** @type {?} */ i = 0; i < this.disposables.length; i++) {
                this.disposables[i]();
            }
        }
        this.destroyInternal();
        this.dirtyParentQueriesInternal();
        if (this._animationContext) {
            this._animationContext.onAllActiveAnimationsDone(function () { return _this.renderer.destroyView(hostElement, _this.allNodes); });
        }
        else {
            this.renderer.destroyView(hostElement, this.allNodes);
        }
        this.cdMode = ChangeDetectorStatus.Destroyed;
    };
    AppView.prototype.destroyInternal = function () { };
    AppView.prototype.detachInternal = function () { };
    AppView.prototype.detach = function () {
        var _this = this;
        this.detachInternal();
        if (this._animationContext) {
            this._animationContext.onAllActiveAnimationsDone(function () { return _this._renderDetach(); });
        }
        else {
            this._renderDetach();
        }
        if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer &&
            this.declaredViewContainer.projectedViews) {
            var /** @type {?} */ projectedViews = this.declaredViewContainer.projectedViews;
            var /** @type {?} */ index = projectedViews.indexOf(this);
            if (index >= projectedViews.length - 1) {
                projectedViews.pop();
            }
            else {
                projectedViews.splice(index, 1);
            }
        }
        this.appRef = null;
        this.viewContainer = null;
        this.dirtyParentQueriesInternal();
    };
    AppView.prototype._renderDetach = function () {
        if (this._directRenderer) {
            this.visitRootNodesInternal(this._directRenderer.remove, null);
        }
        else {
            this.renderer.detachView(this.flatRootNodes);
        }
    };
    AppView.prototype.attachToAppRef = function (appRef) {
        if (this.viewContainer) {
            throw new Error('This view is already attached to a ViewContainer!');
        }
        this.appRef = appRef;
        this.dirtyParentQueriesInternal();
    };
    AppView.prototype.attachAfter = function (viewContainer, prevView) {
        if (this.appRef) {
            throw new Error('This view is already attached directly to the ApplicationRef!');
        }
        this._renderAttach(viewContainer, prevView);
        this.viewContainer = viewContainer;
        if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {
            if (!this.declaredViewContainer.projectedViews) {
                this.declaredViewContainer.projectedViews = [];
            }
            this.declaredViewContainer.projectedViews.push(this);
        }
        this.dirtyParentQueriesInternal();
    };
    AppView.prototype.moveAfter = function (viewContainer, prevView) {
        this._renderAttach(viewContainer, prevView);
        this.dirtyParentQueriesInternal();
    };
    AppView.prototype._renderAttach = function (viewContainer, prevView) {
        var /** @type {?} */ prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;
        if (this._directRenderer) {
            var /** @type {?} */ nextSibling = this._directRenderer.nextSibling(prevNode);
            if (nextSibling) {
                this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);
            }
            else {
                var /** @type {?} */ parentElement = this._directRenderer.parentElement(prevNode);
                if (parentElement) {
                    this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);
                }
            }
        }
        else {
            this.renderer.attachViewAfter(prevNode, this.flatRootNodes);
        }
    };
    Object.defineProperty(AppView.prototype, "changeDetectorRef", {
        get: function () { return this.ref; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppView.prototype, "flatRootNodes", {
        get: function () {
            var /** @type {?} */ nodes = [];
            this.visitRootNodesInternal(addToArray, nodes);
            return nodes;
        },
        enumerable: true,
        configurable: true
    });
    AppView.prototype.projectNodes = function (parentElement, ngContentIndex) {
        if (this._directRenderer) {
            this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);
        }
        else {
            var /** @type {?} */ nodes = [];
            this.visitProjectedNodes(ngContentIndex, addToArray, nodes);
            this.renderer.projectNodes(parentElement, nodes);
        }
    };
    AppView.prototype.visitProjectedNodes = function (ngContentIndex, cb, c) {
        switch (this.type) {
            case ViewType.EMBEDDED:
                this.parentView.visitProjectedNodes(ngContentIndex, cb, c);
                break;
            case ViewType.COMPONENT:
                if (this.parentView.type === ViewType.HOST) {
                    var /** @type {?} */ nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];
                    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
                        cb(nodes[i], c);
                    }
                }
                else {
                    this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);
                }
                break;
        }
    };
    AppView.prototype.visitRootNodesInternal = function (cb, c) { };
    AppView.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, c) { };
    AppView.prototype.dirtyParentQueriesInternal = function () { };
    AppView.prototype.internalDetectChanges = function (throwOnChange) {
        if (this.cdMode !== ChangeDetectorStatus.Detached) {
            this.detectChanges(throwOnChange);
        }
    };
    AppView.prototype.detectChanges = function (throwOnChange) {
        var /** @type {?} */ s = _scope_check(this.clazz);
        if (this.cdMode === ChangeDetectorStatus.Checked ||
            this.cdMode === ChangeDetectorStatus.Errored)
            return;
        if (this.cdMode === ChangeDetectorStatus.Destroyed) {
            this.throwDestroyedError('detectChanges');
        }
        this.detectChangesInternal(throwOnChange);
        if (this.cdMode === ChangeDetectorStatus.CheckOnce)
            this.cdMode = ChangeDetectorStatus.Checked;
        this.numberOfChecks++;
        wtfLeave(s);
    };
    AppView.prototype.detectChangesInternal = function (throwOnChange) { };
    AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce; };
    AppView.prototype.markPathToRootAsCheckOnce = function () {
        var /** @type {?} */ c = this;
        while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
            if (c.cdMode === ChangeDetectorStatus.Checked) {
                c.cdMode = ChangeDetectorStatus.CheckOnce;
            }
            if (c.type === ViewType.COMPONENT) {
                c = c.parentView;
            }
            else {
                c = c.viewContainer ? c.viewContainer.parentView : null;
            }
        }
    };
    AppView.prototype.eventHandler = function (cb) {
        return cb;
    };
    AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details); };
    return AppView;
}());
var DebugAppView = (function (_super) {
    __extends$37(DebugAppView, _super);
    function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {
        if (declaredViewContainer === void 0) { declaredViewContainer = null; }
        _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);
        this.staticNodeDebugInfos = staticNodeDebugInfos;
        this._currentDebugContext = null;
    }
    DebugAppView.prototype.create = function (context) {
        this._resetDebug();
        try {
            return _super.prototype.create.call(this, context);
        }
        catch (e) {
            this._rethrowWithContext(e);
            throw e;
        }
    };
    DebugAppView.prototype.createHostView = function (rootSelectorOrNode, injector, projectableNodes) {
        if (projectableNodes === void 0) { projectableNodes = null; }
        this._resetDebug();
        try {
            return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);
        }
        catch (e) {
            this._rethrowWithContext(e);
            throw e;
        }
    };
    DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
        this._resetDebug();
        try {
            return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
        }
        catch (e) {
            this._rethrowWithContext(e);
            throw e;
        }
    };
    DebugAppView.prototype.detach = function () {
        this._resetDebug();
        try {
            _super.prototype.detach.call(this);
        }
        catch (e) {
            this._rethrowWithContext(e);
            throw e;
        }
    };
    DebugAppView.prototype.destroy = function () {
        this._resetDebug();
        try {
            _super.prototype.destroy.call(this);
        }
        catch (e) {
            this._rethrowWithContext(e);
            throw e;
        }
    };
    DebugAppView.prototype.detectChanges = function (throwOnChange) {
        this._resetDebug();
        try {
            _super.prototype.detectChanges.call(this, throwOnChange);
        }
        catch (e) {
            this._rethrowWithContext(e);
            throw e;
        }
    };
    DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null; };
    DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {
        return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
    };
    DebugAppView.prototype._rethrowWithContext = function (e) {
        if (!(e instanceof ViewWrappedError)) {
            if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
                this.cdMode = ChangeDetectorStatus.Errored;
            }
            if (isPresent(this._currentDebugContext)) {
                throw new ViewWrappedError(e, this._currentDebugContext);
            }
        }
    };
    DebugAppView.prototype.eventHandler = function (cb) {
        var _this = this;
        var /** @type {?} */ superHandler = _super.prototype.eventHandler.call(this, cb);
        return function (eventName, event) {
            _this._resetDebug();
            try {
                return superHandler.call(_this, eventName, event);
            }
            catch (e) {
                _this._rethrowWithContext(e);
                throw e;
            }
        };
    };
    return DebugAppView;
}(AppView));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ViewContainer = (function () {
    function ViewContainer(index, parentIndex, parentView, nativeElement) {
        this.index = index;
        this.parentIndex = parentIndex;
        this.parentView = parentView;
        this.nativeElement = nativeElement;
    }
    Object.defineProperty(ViewContainer.prototype, "elementRef", {
        get: function () { return new ElementRef$1(this.nativeElement); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainer.prototype, "vcRef", {
        get: function () { return new ViewContainerRef_(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainer.prototype, "parentInjector", {
        get: function () { return this.parentView.injector(this.parentIndex); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainer.prototype, "injector", {
        get: function () { return this.parentView.injector(this.index); },
        enumerable: true,
        configurable: true
    });
    ViewContainer.prototype.detectChangesInNestedViews = function (throwOnChange) {
        if (this.nestedViews) {
            for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
                this.nestedViews[i].detectChanges(throwOnChange);
            }
        }
    };
    ViewContainer.prototype.destroyNestedViews = function () {
        if (this.nestedViews) {
            for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
                this.nestedViews[i].destroy();
            }
        }
    };
    ViewContainer.prototype.visitNestedViewRootNodes = function (cb, c) {
        if (this.nestedViews) {
            for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
                this.nestedViews[i].visitRootNodesInternal(cb, c);
            }
        }
    };
    ViewContainer.prototype.mapNestedViews = function (nestedViewClass, callback) {
        var /** @type {?} */ result = [];
        if (this.nestedViews) {
            for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
                var /** @type {?} */ nestedView = this.nestedViews[i];
                if (nestedView.clazz === nestedViewClass) {
                    result.push(callback(nestedView));
                }
            }
        }
        if (this.projectedViews) {
            for (var /** @type {?} */ i = 0; i < this.projectedViews.length; i++) {
                var /** @type {?} */ projectedView = this.projectedViews[i];
                if (projectedView.clazz === nestedViewClass) {
                    result.push(callback(projectedView));
                }
            }
        }
        return result;
    };
    ViewContainer.prototype.moveView = function (view, currentIndex) {
        var /** @type {?} */ previousIndex = this.nestedViews.indexOf(view);
        if (view.type === ViewType.COMPONENT) {
            throw new Error("Component views can't be moved!");
        }
        var /** @type {?} */ nestedViews = this.nestedViews;
        if (nestedViews == null) {
            nestedViews = [];
            this.nestedViews = nestedViews;
        }
        nestedViews.splice(previousIndex, 1);
        nestedViews.splice(currentIndex, 0, view);
        var /** @type {?} */ prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;
        view.moveAfter(this, prevView);
    };
    ViewContainer.prototype.attachView = function (view, viewIndex) {
        if (view.type === ViewType.COMPONENT) {
            throw new Error("Component views can't be moved!");
        }
        var /** @type {?} */ nestedViews = this.nestedViews;
        if (nestedViews == null) {
            nestedViews = [];
            this.nestedViews = nestedViews;
        }
        if (viewIndex >= nestedViews.length) {
            nestedViews.push(view);
        }
        else {
            nestedViews.splice(viewIndex, 0, view);
        }
        var /** @type {?} */ prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;
        view.attachAfter(this, prevView);
    };
    ViewContainer.prototype.detachView = function (viewIndex) {
        var /** @type {?} */ view = this.nestedViews[viewIndex];
        if (viewIndex >= this.nestedViews.length - 1) {
            this.nestedViews.pop();
        }
        else {
            this.nestedViews.splice(viewIndex, 1);
        }
        if (view.type === ViewType.COMPONENT) {
            throw new Error("Component views can't be moved!");
        }
        view.detach();
        return view;
    };
    return ViewContainer;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __core_private__$1 = {
    isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
    ChangeDetectorStatus: ChangeDetectorStatus,
    constructDependencies: constructDependencies,
    LifecycleHooks: LifecycleHooks,
    LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
    ReflectorReader: ReflectorReader,
    CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
    ComponentRef_: ComponentRef_,
    ViewContainer: ViewContainer,
    AppView: AppView,
    DebugAppView: DebugAppView,
    NgModuleInjector: NgModuleInjector,
    registerModuleFactory: registerModuleFactory,
    ViewType: ViewType,
    view_utils: view_utils,
    ViewMetadata: ViewMetadata,
    DebugContext: DebugContext,
    StaticNodeDebugInfo: StaticNodeDebugInfo,
    devModeEqual: devModeEqual,
    UNINITIALIZED: UNINITIALIZED,
    ValueUnwrapper: ValueUnwrapper,
    RenderDebugInfo: RenderDebugInfo,
    TemplateRef_: TemplateRef_,
    ReflectionCapabilities: ReflectionCapabilities,
    makeDecorator: makeDecorator,
    DebugDomRootRenderer: DebugDomRootRenderer,
    Console: Console,
    reflector: reflector,
    Reflector: Reflector,
    NoOpAnimationPlayer: NoOpAnimationPlayer,
    AnimationPlayer: AnimationPlayer,
    AnimationSequencePlayer: AnimationSequencePlayer,
    AnimationGroupPlayer: AnimationGroupPlayer,
    AnimationKeyframe: AnimationKeyframe,
    prepareFinalAnimationStyles: prepareFinalAnimationStyles,
    balanceAnimationKeyframes: balanceAnimationKeyframes,
    flattenStyles: flattenStyles,
    clearStyles: clearStyles,
    renderStyles: renderStyles,
    collectAndResolveStyles: collectAndResolveStyles,
    APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,
    AnimationStyles: AnimationStyles,
    ANY_STATE: ANY_STATE,
    DEFAULT_STATE: DEFAULT_STATE,
    EMPTY_STATE: EMPTY_STATE,
    FILL_STYLE_FLAG: FILL_STYLE_FLAG,
    ComponentStillLoadingError: ComponentStillLoadingError,
    isPromise: isPromise$1,
    isObservable: isObservable,
    AnimationTransition: AnimationTransition
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */



var index$4 = Object.freeze({
	createPlatform: createPlatform,
	assertPlatform: assertPlatform,
	destroyPlatform: destroyPlatform,
	getPlatform: getPlatform,
	PlatformRef: PlatformRef,
	ApplicationRef: ApplicationRef$1,
	enableProdMode: enableProdMode$1,
	isDevMode: isDevMode$1,
	createPlatformFactory: createPlatformFactory$1,
	NgProbeToken: NgProbeToken$1,
	APP_ID: APP_ID$1,
	PACKAGE_ROOT_URL: PACKAGE_ROOT_URL,
	PLATFORM_INITIALIZER: PLATFORM_INITIALIZER$1,
	APP_BOOTSTRAP_LISTENER: APP_BOOTSTRAP_LISTENER,
	APP_INITIALIZER: APP_INITIALIZER,
	ApplicationInitStatus: ApplicationInitStatus,
	DebugElement: DebugElement,
	DebugNode: DebugNode,
	asNativeElements: asNativeElements,
	getDebugNode: getDebugNode$1,
	Testability: Testability$1,
	TestabilityRegistry: TestabilityRegistry,
	setTestabilityGetter: setTestabilityGetter$1,
	TRANSLATIONS: TRANSLATIONS,
	TRANSLATIONS_FORMAT: TRANSLATIONS_FORMAT,
	LOCALE_ID: LOCALE_ID$1,
	ApplicationModule: ApplicationModule$1,
	wtfCreateScope: wtfCreateScope,
	wtfLeave: wtfLeave,
	wtfStartTimeRange: wtfStartTimeRange,
	wtfEndTimeRange: wtfEndTimeRange,
	Type: Type,
	EventEmitter: EventEmitter$1,
	ErrorHandler: ErrorHandler$1,
	AnimationTransitionEvent: AnimationTransitionEvent,
	AnimationPlayer: AnimationPlayer,
	AnimationStyles: AnimationStyles,
	AnimationKeyframe: AnimationKeyframe,
	Sanitizer: Sanitizer$1,
	SecurityContext: SecurityContext$1,
	ANALYZE_FOR_ENTRY_COMPONENTS: ANALYZE_FOR_ENTRY_COMPONENTS,
	Attribute: Attribute$1,
	ContentChild: ContentChild,
	ContentChildren: ContentChildren,
	Query: Query,
	ViewChild: ViewChild,
	ViewChildren: ViewChildren,
	Component: Component$1,
	Directive: Directive$1,
	HostBinding: HostBinding,
	HostListener: HostListener$1,
	Input: Input$1,
	Output: Output$1,
	Pipe: Pipe$1,
	AfterContentChecked: AfterContentChecked,
	AfterContentInit: AfterContentInit,
	AfterViewChecked: AfterViewChecked,
	AfterViewInit: AfterViewInit,
	DoCheck: DoCheck,
	OnChanges: OnChanges,
	OnDestroy: OnDestroy,
	OnInit: OnInit,
	CUSTOM_ELEMENTS_SCHEMA: CUSTOM_ELEMENTS_SCHEMA,
	NO_ERRORS_SCHEMA: NO_ERRORS_SCHEMA,
	NgModule: NgModule$1,
	ViewEncapsulation: ViewEncapsulation$1,
	Version: Version$1,
	VERSION: VERSION,
	Class: Class,
	forwardRef: forwardRef$1,
	resolveForwardRef: resolveForwardRef,
	Injector: Injector$1,
	ReflectiveInjector: ReflectiveInjector,
	ResolvedReflectiveFactory: ResolvedReflectiveFactory,
	ReflectiveKey: ReflectiveKey,
	OpaqueToken: OpaqueToken$1,
	Inject: Inject$1,
	Optional: Optional$1,
	Injectable: Injectable$1,
	Self: Self$1,
	SkipSelf: SkipSelf$1,
	Host: Host$1,
	NgZone: NgZone$1,
	RenderComponentType: RenderComponentType,
	Renderer: Renderer$1,
	RootRenderer: RootRenderer$1,
	COMPILER_OPTIONS: COMPILER_OPTIONS,
	Compiler: Compiler,
	CompilerFactory: CompilerFactory,
	ModuleWithComponentFactories: ModuleWithComponentFactories,
	ComponentFactory: ComponentFactory,
	ComponentRef: ComponentRef,
	ComponentFactoryResolver: ComponentFactoryResolver,
	ElementRef: ElementRef$1,
	NgModuleFactory: NgModuleFactory,
	NgModuleRef: NgModuleRef,
	NgModuleFactoryLoader: NgModuleFactoryLoader,
	getModuleFactory: getModuleFactory,
	QueryList: QueryList,
	SystemJsNgModuleLoader: SystemJsNgModuleLoader,
	SystemJsNgModuleLoaderConfig: SystemJsNgModuleLoaderConfig,
	TemplateRef: TemplateRef$1,
	ViewContainerRef: ViewContainerRef$1,
	EmbeddedViewRef: EmbeddedViewRef,
	ViewRef: ViewRef,
	ChangeDetectionStrategy: ChangeDetectionStrategy,
	ChangeDetectorRef: ChangeDetectorRef$1,
	CollectionChangeRecord: CollectionChangeRecord,
	DefaultIterableDiffer: DefaultIterableDiffer,
	IterableDiffers: IterableDiffers$1,
	KeyValueChangeRecord: KeyValueChangeRecord,
	KeyValueDiffers: KeyValueDiffers$1,
	SimpleChange: SimpleChange,
	WrappedValue: WrappedValue$1,
	platformCore: platformCore$1,
	__core_private__: __core_private__$1,
	AUTO_STYLE: AUTO_STYLE$1,
	AnimationEntryMetadata: AnimationEntryMetadata,
	AnimationStateMetadata: AnimationStateMetadata,
	AnimationStateDeclarationMetadata: AnimationStateDeclarationMetadata,
	AnimationStateTransitionMetadata: AnimationStateTransitionMetadata,
	AnimationMetadata: AnimationMetadata,
	AnimationKeyframesSequenceMetadata: AnimationKeyframesSequenceMetadata,
	AnimationStyleMetadata: AnimationStyleMetadata,
	AnimationAnimateMetadata: AnimationAnimateMetadata,
	AnimationWithStepsMetadata: AnimationWithStepsMetadata,
	AnimationSequenceMetadata: AnimationSequenceMetadata,
	AnimationGroupMetadata: AnimationGroupMetadata,
	animate: animate,
	group: group,
	sequence: sequence,
	style: style,
	state: state,
	keyframes: keyframes,
	transition: transition,
	trigger: trigger
});

var core_1 = ( index$4 && undefined ) || index$4;

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var BrowserXhr = (function () {
    function BrowserXhr() {
    }
    BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };
    BrowserXhr.decorators = [
        { type: core.Injectable },
    ];
    BrowserXhr.ctorParameters = function () { return []; };
    return BrowserXhr;
}());

var RequestMethod = {};
RequestMethod.Get = 0;
RequestMethod.Post = 1;
RequestMethod.Put = 2;
RequestMethod.Delete = 3;
RequestMethod.Options = 4;
RequestMethod.Head = 5;
RequestMethod.Patch = 6;
RequestMethod[RequestMethod.Get] = "Get";
RequestMethod[RequestMethod.Post] = "Post";
RequestMethod[RequestMethod.Put] = "Put";
RequestMethod[RequestMethod.Delete] = "Delete";
RequestMethod[RequestMethod.Options] = "Options";
RequestMethod[RequestMethod.Head] = "Head";
RequestMethod[RequestMethod.Patch] = "Patch";
var ReadyState = {};
ReadyState.Unsent = 0;
ReadyState.Open = 1;
ReadyState.HeadersReceived = 2;
ReadyState.Loading = 3;
ReadyState.Done = 4;
ReadyState.Cancelled = 5;
ReadyState[ReadyState.Unsent] = "Unsent";
ReadyState[ReadyState.Open] = "Open";
ReadyState[ReadyState.HeadersReceived] = "HeadersReceived";
ReadyState[ReadyState.Loading] = "Loading";
ReadyState[ReadyState.Done] = "Done";
ReadyState[ReadyState.Cancelled] = "Cancelled";
var ResponseType = {};
ResponseType.Basic = 0;
ResponseType.Cors = 1;
ResponseType.Default = 2;
ResponseType.Error = 3;
ResponseType.Opaque = 4;
ResponseType[ResponseType.Basic] = "Basic";
ResponseType[ResponseType.Cors] = "Cors";
ResponseType[ResponseType.Default] = "Default";
ResponseType[ResponseType.Error] = "Error";
ResponseType[ResponseType.Opaque] = "Opaque";
var ContentType = {};
ContentType.NONE = 0;
ContentType.JSON = 1;
ContentType.FORM = 2;
ContentType.FORM_DATA = 3;
ContentType.TEXT = 4;
ContentType.BLOB = 5;
ContentType.ARRAY_BUFFER = 6;
ContentType[ContentType.NONE] = "NONE";
ContentType[ContentType.JSON] = "JSON";
ContentType[ContentType.FORM] = "FORM";
ContentType[ContentType.FORM_DATA] = "FORM_DATA";
ContentType[ContentType.TEXT] = "TEXT";
ContentType[ContentType.BLOB] = "BLOB";
ContentType[ContentType.ARRAY_BUFFER] = "ARRAY_BUFFER";
var ResponseContentType = {};
ResponseContentType.Text = 0;
ResponseContentType.Json = 1;
ResponseContentType.ArrayBuffer = 2;
ResponseContentType.Blob = 3;
ResponseContentType[ResponseContentType.Text] = "Text";
ResponseContentType[ResponseContentType.Json] = "Json";
ResponseContentType[ResponseContentType.ArrayBuffer] = "ArrayBuffer";
ResponseContentType[ResponseContentType.Blob] = "Blob";

var Headers$1 = (function () {
    function Headers$$1(headers) {
        var _this = this;
        this._headers = new Map();
        this._normalizedNames = new Map();
        if (!headers) {
            return;
        }
        if (headers instanceof Headers$$1) {
            headers.forEach(function (values, name) {
                values.forEach(function (value) { return _this.append(name, value); });
            });
            return;
        }
        Object.keys(headers).forEach(function (name) {
            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];
            _this.delete(name);
            values.forEach(function (value) { return _this.append(name, value); });
        });
    }
    Headers$$1.fromResponseHeaderString = function (headersString) {
        var /** @type {?} */ headers = new Headers$$1();
        headersString.split('\n').forEach(function (line) {
            var /** @type {?} */ index = line.indexOf(':');
            if (index > 0) {
                var /** @type {?} */ name_1 = line.slice(0, index);
                var /** @type {?} */ value = line.slice(index + 1).trim();
                headers.set(name_1, value);
            }
        });
        return headers;
    };
    Headers$$1.prototype.append = function (name, value) {
        var /** @type {?} */ values = this.getAll(name);
        if (values === null) {
            this.set(name, value);
        }
        else {
            values.push(value);
        }
    };
    Headers$$1.prototype.delete = function (name) {
        var /** @type {?} */ lcName = name.toLowerCase();
        this._normalizedNames.delete(lcName);
        this._headers.delete(lcName);
    };
    Headers$$1.prototype.forEach = function (fn) {
        var _this = this;
        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });
    };
    Headers$$1.prototype.get = function (name) {
        var /** @type {?} */ values = this.getAll(name);
        if (values === null) {
            return null;
        }
        return values.length > 0 ? values[0] : null;
    };
    Headers$$1.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };
    Headers$$1.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };
    Headers$$1.prototype.set = function (name, value) {
        if (Array.isArray(value)) {
            if (value.length) {
                this._headers.set(name.toLowerCase(), [value.join(',')]);
            }
        }
        else {
            this._headers.set(name.toLowerCase(), [value]);
        }
        this.mayBeSetNormalizedName(name);
    };
    Headers$$1.prototype.values = function () { return Array.from(this._headers.values()); };
    Headers$$1.prototype.toJSON = function () {
        var _this = this;
        var /** @type {?} */ serialized = {};
        this._headers.forEach(function (values, name) {
            var /** @type {?} */ split = [];
            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });
            serialized[_this._normalizedNames.get(name)] = split;
        });
        return serialized;
    };
    Headers$$1.prototype.getAll = function (name) {
        return this.has(name) ? this._headers.get(name.toLowerCase()) : null;
    };
    Headers$$1.prototype.entries = function () { throw new Error('"entries" method is not implemented on Headers class'); };
    Headers$$1.prototype.mayBeSetNormalizedName = function (name) {
        var /** @type {?} */ lcName = name.toLowerCase();
        if (!this._normalizedNames.has(lcName)) {
            this._normalizedNames.set(lcName, name);
        }
    };
    return Headers$$1;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$40 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ResponseOptions = (function () {
    function ResponseOptions(_a) {
        var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;
        this.body = body != null ? body : null;
        this.status = status != null ? status : null;
        this.headers = headers != null ? headers : null;
        this.statusText = statusText != null ? statusText : null;
        this.type = type != null ? type : null;
        this.url = url != null ? url : null;
    }
    ResponseOptions.prototype.merge = function (options) {
        return new ResponseOptions({
            body: options && options.body != null ? options.body : this.body,
            status: options && options.status != null ? options.status : this.status,
            headers: options && options.headers != null ? options.headers : this.headers,
            statusText: options && options.statusText != null ? options.statusText : this.statusText,
            type: options && options.type != null ? options.type : this.type,
            url: options && options.url != null ? options.url : this.url,
        });
    };
    return ResponseOptions;
}());
var BaseResponseOptions = (function (_super) {
    __extends$40(BaseResponseOptions, _super);
    function BaseResponseOptions() {
        _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers$1() });
    }
    BaseResponseOptions.decorators = [
        { type: core.Injectable },
    ];
    BaseResponseOptions.ctorParameters = function () { return []; };
    return BaseResponseOptions;
}(ResponseOptions));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ConnectionBackend = (function () {
    function ConnectionBackend() {
    }
    ConnectionBackend.prototype.createConnection = function (request) { };
    return ConnectionBackend;
}());
var Connection = (function () {
    function Connection() {
    }
    return Connection;
}());
var XSRFStrategy = (function () {
    function XSRFStrategy() {
    }
    XSRFStrategy.prototype.configureRequest = function (req) { };
    return XSRFStrategy;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function normalizeMethodName(method) {
    if (typeof method !== 'string')
        return method;
    switch (method.toUpperCase()) {
        case 'GET':
            return RequestMethod.Get;
        case 'POST':
            return RequestMethod.Post;
        case 'PUT':
            return RequestMethod.Put;
        case 'DELETE':
            return RequestMethod.Delete;
        case 'OPTIONS':
            return RequestMethod.Options;
        case 'HEAD':
            return RequestMethod.Head;
        case 'PATCH':
            return RequestMethod.Patch;
    }
    throw new Error("Invalid request method. The method \"" + method + "\" is not supported.");
}
var isSuccess = function (status) { return (status >= 200 && status < 300); };
function getResponseURL(xhr) {
    if ('responseURL' in xhr) {
        return xhr.responseURL;
    }
    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
        return xhr.getResponseHeader('X-Request-URL');
    }
    return;
}
function stringToArrayBuffer(input) {
    var /** @type {?} */ view = new Uint16Array(input.length);
    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {
        view[i] = input.charCodeAt(i);
    }
    return view.buffer;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @param {?=} rawParams
 * @return {?}
 */
function paramParser(rawParams) {
    if (rawParams === void 0) { rawParams = ''; }
    var /** @type {?} */ map = new Map();
    if (rawParams.length > 0) {
        var /** @type {?} */ params = rawParams.split('&');
        params.forEach(function (param) {
            var /** @type {?} */ eqIdx = param.indexOf('=');
            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];
            var /** @type {?} */ list = map.get(key) || [];
            list.push(val);
            map.set(key, list);
        });
    }
    return map;
}
var QueryEncoder = (function () {
    function QueryEncoder() {
    }
    QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };
    QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };
    return QueryEncoder;
}());
function standardEncoding(v) {
    return encodeURIComponent(v)
        .replace(/%40/gi, '@')
        .replace(/%3A/gi, ':')
        .replace(/%24/gi, '$')
        .replace(/%2C/gi, ',')
        .replace(/%3B/gi, ';')
        .replace(/%2B/gi, '+')
        .replace(/%3D/gi, '=')
        .replace(/%3F/gi, '?')
        .replace(/%2F/gi, '/');
}
var URLSearchParams = (function () {
    function URLSearchParams(rawParams, queryEncoder) {
        if (rawParams === void 0) { rawParams = ''; }
        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }
        this.rawParams = rawParams;
        this.queryEncoder = queryEncoder;
        this.paramsMap = paramParser(rawParams);
    }
    URLSearchParams.prototype.clone = function () {
        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);
        clone.appendAll(this);
        return clone;
    };
    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };
    URLSearchParams.prototype.get = function (param) {
        var /** @type {?} */ storedParam = this.paramsMap.get(param);
        return Array.isArray(storedParam) ? storedParam[0] : null;
    };
    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };
    URLSearchParams.prototype.set = function (param, val) {
        if (val === void 0 || val === null) {
            this.delete(param);
            return;
        }
        var /** @type {?} */ list = this.paramsMap.get(param) || [];
        list.length = 0;
        list.push(val);
        this.paramsMap.set(param, list);
    };
    URLSearchParams.prototype.setAll = function (searchParams) {
        var _this = this;
        searchParams.paramsMap.forEach(function (value, param) {
            var /** @type {?} */ list = _this.paramsMap.get(param) || [];
            list.length = 0;
            list.push(value[0]);
            _this.paramsMap.set(param, list);
        });
    };
    URLSearchParams.prototype.append = function (param, val) {
        if (val === void 0 || val === null)
            return;
        var /** @type {?} */ list = this.paramsMap.get(param) || [];
        list.push(val);
        this.paramsMap.set(param, list);
    };
    URLSearchParams.prototype.appendAll = function (searchParams) {
        var _this = this;
        searchParams.paramsMap.forEach(function (value, param) {
            var /** @type {?} */ list = _this.paramsMap.get(param) || [];
            for (var /** @type {?} */ i = 0; i < value.length; ++i) {
                list.push(value[i]);
            }
            _this.paramsMap.set(param, list);
        });
    };
    URLSearchParams.prototype.replaceAll = function (searchParams) {
        var _this = this;
        searchParams.paramsMap.forEach(function (value, param) {
            var /** @type {?} */ list = _this.paramsMap.get(param) || [];
            list.length = 0;
            for (var /** @type {?} */ i = 0; i < value.length; ++i) {
                list.push(value[i]);
            }
            _this.paramsMap.set(param, list);
        });
    };
    URLSearchParams.prototype.toString = function () {
        var _this = this;
        var /** @type {?} */ paramsList = [];
        this.paramsMap.forEach(function (values, k) {
            values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });
        });
        return paramsList.join('&');
    };
    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };
    return URLSearchParams;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var Body = (function () {
    function Body() {
    }
    Body.prototype.json = function () {
        if (typeof this._body === 'string') {
            return JSON.parse(/** @type {?} */ (this._body));
        }
        if (this._body instanceof ArrayBuffer) {
            return JSON.parse(this.text());
        }
        return this._body;
    };
    Body.prototype.text = function () {
        if (this._body instanceof URLSearchParams) {
            return this._body.toString();
        }
        if (this._body instanceof ArrayBuffer) {
            return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));
        }
        if (this._body == null) {
            return '';
        }
        if (typeof this._body === 'object') {
            return JSON.stringify(this._body, null, 2);
        }
        return this._body.toString();
    };
    Body.prototype.arrayBuffer = function () {
        if (this._body instanceof ArrayBuffer) {
            return (this._body);
        }
        return stringToArrayBuffer(this.text());
    };
    Body.prototype.blob = function () {
        if (this._body instanceof Blob) {
            return (this._body);
        }
        if (this._body instanceof ArrayBuffer) {
            return new Blob([this._body]);
        }
        throw new Error('The request body isn\'t either a blob or an array buffer');
    };
    return Body;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$41 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Response$1 = (function (_super) {
    __extends$41(Response$$1, _super);
    function Response$$1(responseOptions) {
        _super.call(this);
        this._body = responseOptions.body;
        this.status = responseOptions.status;
        this.ok = (this.status >= 200 && this.status <= 299);
        this.statusText = responseOptions.statusText;
        this.headers = responseOptions.headers;
        this.type = responseOptions.type;
        this.url = responseOptions.url;
    }
    Response$$1.prototype.toString = function () {
        return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
    };
    return Response$$1;
}(Body));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _nextRequestId = 0;
var JSONP_HOME = '__ng_jsonp__';
var _jsonpConnections = null;
function _getJsonpConnections() {
    var /** @type {?} */ w = typeof window == 'object' ? window : {};
    if (_jsonpConnections === null) {
        _jsonpConnections = w[JSONP_HOME] = {};
    }
    return _jsonpConnections;
}
var BrowserJsonp = (function () {
    function BrowserJsonp() {
    }
    BrowserJsonp.prototype.build = function (url) {
        var /** @type {?} */ node = document.createElement('script');
        node.src = url;
        return node;
    };
    BrowserJsonp.prototype.nextRequestID = function () { return "__req" + _nextRequestId++; };
    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + "." + id + ".finished"; };
    BrowserJsonp.prototype.exposeConnection = function (id, connection) {
        var /** @type {?} */ connections = _getJsonpConnections();
        connections[id] = connection;
    };
    BrowserJsonp.prototype.removeConnection = function (id) {
        var /** @type {?} */ connections = _getJsonpConnections();
        connections[id] = null;
    };
    BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };
    BrowserJsonp.prototype.cleanup = function (node) {
        if (node.parentNode) {
            node.parentNode.removeChild(/** @type {?} */ ((node)));
        }
    };
    BrowserJsonp.decorators = [
        { type: core.Injectable },
    ];
    BrowserJsonp.ctorParameters = function () { return []; };
    return BrowserJsonp;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$39 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
var JSONPConnection = (function () {
    function JSONPConnection() {
    }
    JSONPConnection.prototype.finished = function (data) { };
    return JSONPConnection;
}());
var JSONPConnection_ = (function (_super) {
    __extends$39(JSONPConnection_, _super);
    function JSONPConnection_(req, _dom, baseResponseOptions) {
        var _this = this;
        _super.call(this);
        this._dom = _dom;
        this.baseResponseOptions = baseResponseOptions;
        this._finished = false;
        if (req.method !== RequestMethod.Get) {
            throw new TypeError(JSONP_ERR_WRONG_METHOD);
        }
        this.request = req;
        this.response = new Observable_2(function (responseObserver) {
            _this.readyState = ReadyState.Loading;
            var id = _this._id = _dom.nextRequestID();
            _dom.exposeConnection(id, _this);
            var callback = _dom.requestCallback(_this._id);
            var url = req.url;
            if (url.indexOf('=JSONP_CALLBACK&') > -1) {
                url = url.replace('=JSONP_CALLBACK&', "=" + callback + "&");
            }
            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
            }
            var script = _this._script = _dom.build(url);
            var onLoad = function (event) {
                if (_this.readyState === ReadyState.Cancelled)
                    return;
                _this.readyState = ReadyState.Done;
                _dom.cleanup(script);
                if (!_this._finished) {
                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });
                    if (baseResponseOptions) {
                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
                    }
                    responseObserver.error(new Response$1(responseOptions_1));
                    return;
                }
                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });
                if (_this.baseResponseOptions) {
                    responseOptions = _this.baseResponseOptions.merge(responseOptions);
                }
                responseObserver.next(new Response$1(responseOptions));
                responseObserver.complete();
            };
            var onError = function (error) {
                if (_this.readyState === ReadyState.Cancelled)
                    return;
                _this.readyState = ReadyState.Done;
                _dom.cleanup(script);
                var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });
                if (baseResponseOptions) {
                    responseOptions = baseResponseOptions.merge(responseOptions);
                }
                responseObserver.error(new Response$1(responseOptions));
            };
            script.addEventListener('load', onLoad);
            script.addEventListener('error', onError);
            _dom.send(script);
            return function () {
                _this.readyState = ReadyState.Cancelled;
                script.removeEventListener('load', onLoad);
                script.removeEventListener('error', onError);
                _this._dom.cleanup(script);
            };
        });
    }
    JSONPConnection_.prototype.finished = function (data) {
        this._finished = true;
        this._dom.removeConnection(this._id);
        if (this.readyState === ReadyState.Cancelled)
            return;
        this._responseData = data;
    };
    return JSONPConnection_;
}(JSONPConnection));
var JSONPBackend = (function (_super) {
    __extends$39(JSONPBackend, _super);
    function JSONPBackend() {
        _super.apply(this, arguments);
    }
    return JSONPBackend;
}(ConnectionBackend));
var JSONPBackend_ = (function (_super) {
    __extends$39(JSONPBackend_, _super);
    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
        _super.call(this);
        this._browserJSONP = _browserJSONP;
        this._baseResponseOptions = _baseResponseOptions;
    }
    JSONPBackend_.prototype.createConnection = function (request) {
        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
    };
    JSONPBackend_.decorators = [
        { type: core.Injectable },
    ];
    JSONPBackend_.ctorParameters = function () { return [
        { type: BrowserJsonp, },
        { type: ResponseOptions, },
    ]; };
    return JSONPBackend_;
}(JSONPBackend));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var XSSI_PREFIX = /^\)\]\}',?\n/;
var XHRConnection = (function () {
    function XHRConnection(req, browserXHR, baseResponseOptions) {
        var _this = this;
        this.request = req;
        this.response = new Observable_2(function (responseObserver) {
            var _xhr = browserXHR.build();
            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);
            if (req.withCredentials != null) {
                _xhr.withCredentials = req.withCredentials;
            }
            var onLoad = function () {
                var status = _xhr.status === 1223 ? 204 : _xhr.status;
                var body = null;
                if (status !== 204) {
                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;
                    if (typeof body === 'string') {
                        body = body.replace(XSSI_PREFIX, '');
                    }
                }
                if (status === 0) {
                    status = body ? 200 : 0;
                }
                var headers = Headers$1.fromResponseHeaderString(_xhr.getAllResponseHeaders());
                var url = getResponseURL(_xhr) || req.url;
                var statusText = _xhr.statusText || 'OK';
                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });
                if (baseResponseOptions != null) {
                    responseOptions = baseResponseOptions.merge(responseOptions);
                }
                var response = new Response$1(responseOptions);
                response.ok = isSuccess(status);
                if (response.ok) {
                    responseObserver.next(response);
                    responseObserver.complete();
                    return;
                }
                responseObserver.error(response);
            };
            var onError = function (err) {
                var responseOptions = new ResponseOptions({
                    body: err,
                    type: ResponseType.Error,
                    status: _xhr.status,
                    statusText: _xhr.statusText,
                });
                if (baseResponseOptions != null) {
                    responseOptions = baseResponseOptions.merge(responseOptions);
                }
                responseObserver.error(new Response$1(responseOptions));
            };
            _this.setDetectedContentType(req, _xhr);
            if (req.headers == null) {
                req.headers = new Headers$1();
            }
            if (!req.headers.has('Accept')) {
                req.headers.append('Accept', 'application/json, text/plain, */*');
            }
            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });
            if (req.responseType != null && _xhr.responseType != null) {
                switch (req.responseType) {
                    case ResponseContentType.ArrayBuffer:
                        _xhr.responseType = 'arraybuffer';
                        break;
                    case ResponseContentType.Json:
                        _xhr.responseType = 'json';
                        break;
                    case ResponseContentType.Text:
                        _xhr.responseType = 'text';
                        break;
                    case ResponseContentType.Blob:
                        _xhr.responseType = 'blob';
                        break;
                    default:
                        throw new Error('The selected responseType is not supported');
                }
            }
            _xhr.addEventListener('load', onLoad);
            _xhr.addEventListener('error', onError);
            _xhr.send(_this.request.getBody());
            return function () {
                _xhr.removeEventListener('load', onLoad);
                _xhr.removeEventListener('error', onError);
                _xhr.abort();
            };
        });
    }
    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {
        if (req.headers != null && req.headers.get('Content-Type') != null) {
            return;
        }
        switch (req.contentType) {
            case ContentType.NONE:
                break;
            case ContentType.JSON:
                _xhr.setRequestHeader('content-type', 'application/json');
                break;
            case ContentType.FORM:
                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                break;
            case ContentType.TEXT:
                _xhr.setRequestHeader('content-type', 'text/plain');
                break;
            case ContentType.BLOB:
                var /** @type {?} */ blob = req.blob();
                if (blob.type) {
                    _xhr.setRequestHeader('content-type', blob.type);
                }
                break;
        }
    };
    return XHRConnection;
}());
var CookieXSRFStrategy = (function () {
    function CookieXSRFStrategy(_cookieName, _headerName) {
        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }
        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }
        this._cookieName = _cookieName;
        this._headerName = _headerName;
    }
    CookieXSRFStrategy.prototype.configureRequest = function (req) {
        var /** @type {?} */ xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName);
        if (xsrfToken) {
            req.headers.set(this._headerName, xsrfToken);
        }
    };
    return CookieXSRFStrategy;
}());
var XHRBackend = (function () {
    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
        this._browserXHR = _browserXHR;
        this._baseResponseOptions = _baseResponseOptions;
        this._xsrfStrategy = _xsrfStrategy;
    }
    XHRBackend.prototype.createConnection = function (request) {
        this._xsrfStrategy.configureRequest(request);
        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
    };
    XHRBackend.decorators = [
        { type: core.Injectable },
    ];
    XHRBackend.ctorParameters = function () { return [
        { type: BrowserXhr, },
        { type: ResponseOptions, },
        { type: XSRFStrategy, },
    ]; };
    return XHRBackend;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$42 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var RequestOptions$1 = (function () {
    function RequestOptions$$1(_a) {
        var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, withCredentials = _b.withCredentials, responseType = _b.responseType;
        this.method = method != null ? normalizeMethodName(method) : null;
        this.headers = headers != null ? headers : null;
        this.body = body != null ? body : null;
        this.url = url != null ? url : null;
        this.search =
            search != null ? (typeof search === 'string' ? new URLSearchParams(search) : search) : null;
        this.withCredentials = withCredentials != null ? withCredentials : null;
        this.responseType = responseType != null ? responseType : null;
    }
    RequestOptions$$1.prototype.merge = function (options) {
        return new RequestOptions$$1({
            method: options && options.method != null ? options.method : this.method,
            headers: options && options.headers != null ? options.headers : new Headers$1(this.headers),
            body: options && options.body != null ? options.body : this.body,
            url: options && options.url != null ? options.url : this.url,
            search: options && options.search != null ?
                (typeof options.search === 'string' ? new URLSearchParams(options.search) :
                    options.search.clone()) :
                this.search,
            withCredentials: options && options.withCredentials != null ? options.withCredentials :
                this.withCredentials,
            responseType: options && options.responseType != null ? options.responseType :
                this.responseType
        });
    };
    return RequestOptions$$1;
}());
var BaseRequestOptions = (function (_super) {
    __extends$42(BaseRequestOptions, _super);
    function BaseRequestOptions() {
        _super.call(this, { method: RequestMethod.Get, headers: new Headers$1() });
    }
    BaseRequestOptions.decorators = [
        { type: core.Injectable },
    ];
    BaseRequestOptions.ctorParameters = function () { return []; };
    return BaseRequestOptions;
}(RequestOptions$1));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$44 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Request = (function (_super) {
    __extends$44(Request, _super);
    function Request(requestOptions) {
        _super.call(this);
        var url = requestOptions.url;
        this.url = requestOptions.url;
        if (requestOptions.search) {
            var search = requestOptions.search.toString();
            if (search.length > 0) {
                var prefix = '?';
                if (this.url.indexOf('?') != -1) {
                    prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';
                }
                this.url = url + prefix + search;
            }
        }
        this._body = requestOptions.body;
        this.method = normalizeMethodName(requestOptions.method);
        this.headers = new Headers$1(requestOptions.headers);
        this.contentType = this.detectContentType();
        this.withCredentials = requestOptions.withCredentials;
        this.responseType = requestOptions.responseType;
    }
    Request.prototype.detectContentType = function () {
        switch (this.headers.get('content-type')) {
            case 'application/json':
                return ContentType.JSON;
            case 'application/x-www-form-urlencoded':
                return ContentType.FORM;
            case 'multipart/form-data':
                return ContentType.FORM_DATA;
            case 'text/plain':
            case 'text/html':
                return ContentType.TEXT;
            case 'application/octet-stream':
                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;
            default:
                return this.detectContentTypeFromBody();
        }
    };
    Request.prototype.detectContentTypeFromBody = function () {
        if (this._body == null) {
            return ContentType.NONE;
        }
        else if (this._body instanceof URLSearchParams) {
            return ContentType.FORM;
        }
        else if (this._body instanceof FormData) {
            return ContentType.FORM_DATA;
        }
        else if (this._body instanceof Blob$1) {
            return ContentType.BLOB;
        }
        else if (this._body instanceof ArrayBuffer$1) {
            return ContentType.ARRAY_BUFFER;
        }
        else if (this._body && typeof this._body === 'object') {
            return ContentType.JSON;
        }
        else {
            return ContentType.TEXT;
        }
    };
    Request.prototype.getBody = function () {
        switch (this.contentType) {
            case ContentType.JSON:
                return this.text();
            case ContentType.FORM:
                return this.text();
            case ContentType.FORM_DATA:
                return this._body;
            case ContentType.TEXT:
                return this.text();
            case ContentType.BLOB:
                return this.blob();
            case ContentType.ARRAY_BUFFER:
                return this.arrayBuffer();
            default:
                return null;
        }
    };
    return Request;
}(Body));
var noop$1 = function () { };
var w = typeof window == 'object' ? window : noop$1;
var FormData = ((w) /** TODO #9100 */)['FormData'] || noop$1;
var Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop$1;
var ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop$1;

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$43 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function httpRequest(backend, request) {
    return backend.createConnection(request).response;
}
function mergeOptions(defaultOpts, providedOpts, method, url) {
    var /** @type {?} */ newOptions = defaultOpts;
    if (providedOpts) {
        return newOptions.merge(new RequestOptions$1({
            method: providedOpts.method || method,
            url: providedOpts.url || url,
            search: providedOpts.search,
            headers: providedOpts.headers,
            body: providedOpts.body,
            withCredentials: providedOpts.withCredentials,
            responseType: providedOpts.responseType
        }));
    }
    return newOptions.merge(new RequestOptions$1({ method: method, url: url }));
}
var Http = (function () {
    function Http(_backend, _defaultOptions) {
        this._backend = _backend;
        this._defaultOptions = _defaultOptions;
    }
    Http.prototype.request = function (url, options) {
        var /** @type {?} */ responseObservable;
        if (typeof url === 'string') {
            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));
        }
        else if (url instanceof Request) {
            responseObservable = httpRequest(this._backend, url);
        }
        else {
            throw new Error('First argument must be a url string or Request instance.');
        }
        return responseObservable;
    };
    Http.prototype.get = function (url, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));
    };
    Http.prototype.post = function (url, body, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions$1({ body: body })), options, RequestMethod.Post, url)));
    };
    Http.prototype.put = function (url, body, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions$1({ body: body })), options, RequestMethod.Put, url)));
    };
    Http.prototype.delete = function (url, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));
    };
    Http.prototype.patch = function (url, body, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions$1({ body: body })), options, RequestMethod.Patch, url)));
    };
    Http.prototype.head = function (url, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));
    };
    Http.prototype.options = function (url, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));
    };
    Http.decorators = [
        { type: core.Injectable },
    ];
    Http.ctorParameters = function () { return [
        { type: ConnectionBackend, },
        { type: RequestOptions$1, },
    ]; };
    return Http;
}());
var Jsonp = (function (_super) {
    __extends$43(Jsonp, _super);
    function Jsonp(backend, defaultOptions) {
        _super.call(this, backend, defaultOptions);
    }
    Jsonp.prototype.request = function (url, options) {
        var /** @type {?} */ responseObservable;
        if (typeof url === 'string') {
            url =
                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));
        }
        if (url instanceof Request) {
            if (url.method !== RequestMethod.Get) {
                throw new Error('JSONP requests must use GET request method.');
            }
            responseObservable = httpRequest(this._backend, url);
        }
        else {
            throw new Error('First argument must be a url string or Request instance.');
        }
        return responseObservable;
    };
    Jsonp.decorators = [
        { type: core.Injectable },
    ];
    Jsonp.ctorParameters = function () { return [
        { type: ConnectionBackend, },
        { type: RequestOptions$1, },
    ]; };
    return Jsonp;
}(Http));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function _createDefaultCookieXSRFStrategy() {
    return new CookieXSRFStrategy();
}
function httpFactory(xhrBackend, requestOptions) {
    return new Http(xhrBackend, requestOptions);
}
function jsonpFactory(jsonpBackend, requestOptions) {
    return new Jsonp(jsonpBackend, requestOptions);
}
var HttpModule$1 = (function () {
    function HttpModule$$1() {
    }
    HttpModule$$1.decorators = [
        { type: core.NgModule, args: [{
                    providers: [
                        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions$1] },
                        BrowserXhr,
                        { provide: RequestOptions$1, useClass: BaseRequestOptions },
                        { provide: ResponseOptions, useClass: BaseResponseOptions },
                        XHRBackend,
                        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },
                    ],
                },] },
    ];
    HttpModule$$1.ctorParameters = function () { return []; };
    return HttpModule$$1;
}());
var JsonpModule = (function () {
    function JsonpModule() {
    }
    JsonpModule.decorators = [
        { type: core.NgModule, args: [{
                    providers: [
                        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions$1] },
                        BrowserJsonp,
                        { provide: RequestOptions$1, useClass: BaseRequestOptions },
                        { provide: ResponseOptions, useClass: BaseResponseOptions },
                        { provide: JSONPBackend, useClass: JSONPBackend_ },
                    ],
                },] },
    ];
    JsonpModule.ctorParameters = function () { return []; };
    return JsonpModule;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var VERSION$1 = new core.Version('2.4.9');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */



var index$5 = Object.freeze({
	BrowserXhr: BrowserXhr,
	JSONPBackend: JSONPBackend,
	JSONPConnection: JSONPConnection,
	CookieXSRFStrategy: CookieXSRFStrategy,
	XHRBackend: XHRBackend,
	XHRConnection: XHRConnection,
	BaseRequestOptions: BaseRequestOptions,
	RequestOptions: RequestOptions$1,
	BaseResponseOptions: BaseResponseOptions,
	ResponseOptions: ResponseOptions,
	ReadyState: ReadyState,
	RequestMethod: RequestMethod,
	ResponseContentType: ResponseContentType,
	ResponseType: ResponseType,
	Headers: Headers$1,
	Http: Http,
	Jsonp: Jsonp,
	HttpModule: HttpModule$1,
	JsonpModule: JsonpModule,
	Connection: Connection,
	ConnectionBackend: ConnectionBackend,
	XSRFStrategy: XSRFStrategy,
	Request: Request,
	Response: Response$1,
	QueryEncoder: QueryEncoder,
	URLSearchParams: URLSearchParams,
	VERSION: VERSION$1
});

var http_1 = ( index$5 && undefined ) || index$5;

var Ng2AutoComplete$1 = (function () {
    function Ng2AutoComplete(http) {
        this.http = http;
    }
    Ng2AutoComplete.prototype.filter = function (list, keyword) {
        return list.filter(function (el) {
            var objStr = JSON.stringify(el).toLowerCase();
            keyword = keyword.toLowerCase();
            return objStr.indexOf(keyword) !== -1;
        });
    };
    Ng2AutoComplete.prototype.getRemoteData = function (keyword) {
        var _this = this;
        if (typeof this.source !== 'string') {
            throw "Invalid type of source, must be a string. e.g. http://www.google.com?q=:my_keyword";
        }
        else if (!this.http) {
            throw "Http is required.";
        }
        var matches = this.source.match(/:[a-zA-Z_]+/);
        if (matches === null) {
            throw "Replacement word is missing.";
        }
        var replacementWord = matches[0];
        var url = this.source.replace(replacementWord, keyword);
        return this.http.get(url)
            .map(function (resp) { return resp.json(); })
            .map(function (resp) {
            var list = resp.data || resp;
            if (_this.pathToData) {
                var paths = _this.pathToData.split(".");
                paths.forEach(function (prop) { return list = list[prop]; });
            }
            return list;
        });
    };
    
    Ng2AutoComplete.decorators = [
        { type: core_1.Injectable },
    ];
    Ng2AutoComplete.ctorParameters = function () { return [
        { type: http_1.Http, decorators: [{ type: core_1.Optional },] },
    ]; };
    return Ng2AutoComplete;
}());
var Ng2AutoComplete_1 = Ng2AutoComplete$1;
var ng2AutoComplete = {
	Ng2AutoComplete: Ng2AutoComplete_1
};

var Ng2AutoCompleteComponent$1 = (function () {
    function Ng2AutoCompleteComponent(elementRef, autoComplete) {
        var _this = this;
        this.autoComplete = autoComplete;
        this.minChars = 0;
        this.loadingText = "Loading";
        this.showInputTag = true;
        this.showDropdownOnInit = false;
        this.valueSelected = new core_1.EventEmitter();
        this.inputChanged = new core_1.EventEmitter();
        this.dropdownVisible = false;
        this.isLoading = false;
        this.filteredList = [];
        this.minCharsEntered = false;
        this.itemIndex = 0;
        this.reloadListInDelay = function (evt) {
            var delayMs = _this.isSrcArr() ? 10 : 500;
            var keyword = evt.target.value;
            _this.delay(function () { return _this.reloadList(keyword); }, delayMs);
            _this.inputChanged.emit(keyword);
        };
        this.inputElKeyHandler = function (evt) {
            var totalNumItem = _this.filteredList.length;
            switch (evt.keyCode) {
                case 27:
                    break;
                case 38:
                    _this.itemIndex = (totalNumItem + _this.itemIndex - 1) % totalNumItem;
                    break;
                case 40:
                    _this.dropdownVisible = true;
                    _this.itemIndex = (totalNumItem + _this.itemIndex + 1) % totalNumItem;
                    break;
                case 13:
                    if (_this.filteredList.length > 0) {
                        _this.selectOne(_this.filteredList[_this.itemIndex]);
                    }
                    evt.preventDefault();
                    break;
            }
        };
        this.delay = (function () {
            var timer = 0;
            return function (callback, ms) {
                clearTimeout(timer);
                timer = setTimeout(callback, ms);
            };
        })();
        this.el = elementRef.nativeElement;
    }
    Ng2AutoCompleteComponent.prototype.isSrcArr = function () {
        return (this.source.constructor.name === "Array");
    };
    Ng2AutoCompleteComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.autoComplete.source = this.source;
        this.autoComplete.pathToData = this.pathToData;
        setTimeout(function () {
            if (_this.autoCompleteInput) {
                _this.autoCompleteInput.nativeElement.focus();
            }
            if (_this.showDropdownOnInit) {
                _this.showDropdownList({ target: { value: '' } });
            }
        });
    };
    Ng2AutoCompleteComponent.prototype.showDropdownList = function (event) {
        this.dropdownVisible = true;
        this.reloadList(event.target.value);
    };
    Ng2AutoCompleteComponent.prototype.hideDropdownList = function () {
        this.dropdownVisible = false;
    };
    Ng2AutoCompleteComponent.prototype.reloadList = function (keyword) {
        var _this = this;
        this.filteredList = [];
        if (keyword.length < (this.minChars || 0)) {
            this.minCharsEntered = false;
            return;
        }
        else {
            this.minCharsEntered = true;
        }
        if (this.isSrcArr()) {
            this.isLoading = false;
            this.filteredList = this.autoComplete.filter(this.source, keyword);
            if (this.maxNumList) {
                this.filteredList = this.filteredList.slice(0, this.maxNumList);
            }
        }
        else {
            this.isLoading = true;
            if (typeof this.source === "function") {
                this.source(keyword).subscribe(function (resp) {
                    if (_this.pathToData) {
                        var paths = _this.pathToData.split(".");
                        paths.forEach(function (prop) { return resp = resp[prop]; });
                    }
                    _this.filteredList = resp;
                    if (_this.maxNumList) {
                        _this.filteredList = _this.filteredList.slice(0, _this.maxNumList);
                    }
                }, function (error) { return null; }, function () { return _this.isLoading = false; }
                );
            }
            else {
                this.autoComplete.getRemoteData(keyword).subscribe(function (resp) {
                    _this.filteredList = resp;
                    if (_this.maxNumList) {
                        _this.filteredList = _this.filteredList.slice(0, _this.maxNumList);
                    }
                }, function (error) { return null; }, function () { return _this.isLoading = false; }
                );
            }
        }
    };
    Ng2AutoCompleteComponent.prototype.selectOne = function (data) {
        this.valueSelected.emit(data);
    };
    
    Ng2AutoCompleteComponent.prototype.getFormattedList = function (data) {
        var formatted;
        var formatter = this.listFormatter || '(id) value';
        if (typeof formatter === 'function') {
            formatted = formatter.apply(this, [data]);
        }
        else if (typeof data !== 'object') {
            formatted = data;
        }
        else if (typeof formatter === 'string') {
            formatted = formatter;
            var matches = formatter.match(/[a-zA-Z0-9_\$]+/g);
            if (matches && typeof data !== 'string') {
                matches.forEach(function (key) {
                    formatted = formatted.replace(key, data[key]);
                });
            }
        }
        return formatted;
    };
    Object.defineProperty(Ng2AutoCompleteComponent.prototype, "emptyList", {
        get: function () {
            return !(this.isLoading ||
                (this.minCharsEntered && !this.isLoading && !this.filteredList.length) ||
                (this.filteredList.length));
        },
        enumerable: true,
        configurable: true
    });
    Ng2AutoCompleteComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: "ng2-auto-complete",
                    template: "\n  <div class=\"ng2-auto-complete\">\n\n    <!-- keyword input -->\n    <input *ngIf=\"showInputTag\"\n           #autoCompleteInput class=\"keyword\"\n           placeholder=\"{{placeholder}}\"\n           (focus)=\"showDropdownList($event)\"\n           (blur)=\"hideDropdownList()\"\n           (keydown)=\"inputElKeyHandler($event)\"\n           (input)=\"reloadListInDelay($event)\"\n           [(ngModel)]=\"keyword\" />\n\n    <!-- dropdown that user can select -->\n    <ul *ngIf=\"dropdownVisible\" [class.empty]=\"emptyList\">\n      <li *ngIf=\"isLoading\" class=\"loading\">{{loadingText}}</li>\n      <li *ngIf=\"minCharsEntered && !isLoading && !filteredList.length\"\n           (mousedown)=\"selectOne('')\"\n           class=\"blank-item\">{{noMatchFoundText || 'No Result Found'}}</li>\n      <li *ngIf=\"blankOptionText && filteredList.length\"\n          (mousedown)=\"selectOne('')\"\n          class=\"blank-item\">{{blankOptionText}}</li>\n      <li class=\"item\"\n          *ngFor=\"let item of filteredList; let i=index\"\n          (mousedown)=\"selectOne(item)\"\n          [ngClass]=\"{selected: i === itemIndex}\"\n          [innerHtml]=\"getFormattedList(item)\">\n      </li>\n    </ul>\n\n  </div>",
                    providers: [ng2AutoComplete.Ng2AutoComplete],
                    styles: ["\n  @keyframes slideDown {\n    0% {\n      transform:  translateY(-10px);\n    }\n    100% {\n      transform: translateY(0px);\n    }\n  }\n  .ng2-auto-complete {\n    background-color: transparent;\n  }\n  .ng2-auto-complete > input {\n    outline: none;\n    border: 0;\n    padding: 2px; \n    box-sizing: border-box;\n    background-clip: content-box;\n  }\n\n  .ng2-auto-complete > ul {\n    background-color: #fff;\n    margin: 0;\n    width : 100%;\n    overflow-y: auto;\n    list-style-type: none;\n    padding: 0;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n    animation: slideDown 0.1s;\n  }\n  .ng2-auto-complete > ul.empty {\n    display: none;\n  }\n\n  .ng2-auto-complete > ul li {\n    padding: 2px 5px;\n    border-bottom: 1px solid #eee;\n  }\n\n  .ng2-auto-complete > ul li.selected {\n    background-color: #ccc;\n  }\n\n  .ng2-auto-complete > ul li:last-child {\n    border-bottom: none;\n  }\n\n  .ng2-auto-complete > ul li:hover {\n    background-color: #ccc;\n  }"
                    ],
                    encapsulation: core_1.ViewEncapsulation.None
                },] },
    ];
    Ng2AutoCompleteComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: ng2AutoComplete.Ng2AutoComplete, },
    ]; };
    Ng2AutoCompleteComponent.propDecorators = {
        'listFormatter': [{ type: core_1.Input, args: ["list-formatter",] },],
        'source': [{ type: core_1.Input, args: ["source",] },],
        'pathToData': [{ type: core_1.Input, args: ["path-to-data",] },],
        'minChars': [{ type: core_1.Input, args: ["min-chars",] },],
        'placeholder': [{ type: core_1.Input, args: ["placeholder",] },],
        'blankOptionText': [{ type: core_1.Input, args: ["blank-option-text",] },],
        'noMatchFoundText': [{ type: core_1.Input, args: ["no-match-found-text",] },],
        'acceptUserInput': [{ type: core_1.Input, args: ["accept-user-input",] },],
        'loadingText': [{ type: core_1.Input, args: ["loading-text",] },],
        'maxNumList': [{ type: core_1.Input, args: ["max-num-list",] },],
        'showInputTag': [{ type: core_1.Input, args: ["show-input-tag",] },],
        'showDropdownOnInit': [{ type: core_1.Input, args: ["show-dropdown-on-init",] },],
        'valueSelected': [{ type: core_1.Output },],
        'inputChanged': [{ type: core_1.Output },],
        'autoCompleteInput': [{ type: core_1.ViewChild, args: ['autoCompleteInput',] },],
    };
    return Ng2AutoCompleteComponent;
}());
var Ng2AutoCompleteComponent_1 = Ng2AutoCompleteComponent$1;
var ng2AutoComplete_component = {
	Ng2AutoCompleteComponent: Ng2AutoCompleteComponent_1
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var AbstractControlDirective = (function () {
    function AbstractControlDirective() {
    }
    Object.defineProperty(AbstractControlDirective.prototype, "control", {
        get: function () { throw new Error('unimplemented'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "value", {
        get: function () { return this.control ? this.control.value : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valid", {
        get: function () { return this.control ? this.control.valid : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
        get: function () { return this.control ? this.control.invalid : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pending", {
        get: function () { return this.control ? this.control.pending : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "errors", {
        get: function () { return this.control ? this.control.errors : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
        get: function () { return this.control ? this.control.pristine : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
        get: function () { return this.control ? this.control.dirty : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "touched", {
        get: function () { return this.control ? this.control.touched : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
        get: function () { return this.control ? this.control.untouched : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
        get: function () { return this.control ? this.control.disabled : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
        get: function () { return this.control ? this.control.enabled : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
        get: function () { return this.control ? this.control.statusChanges : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
        get: function () { return this.control ? this.control.valueChanges : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "path", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    AbstractControlDirective.prototype.reset = function (value) {
        if (value === void 0) { value = undefined; }
        if (this.control)
            this.control.reset(value);
    };
    AbstractControlDirective.prototype.hasError = function (errorCode, path) {
        if (path === void 0) { path = null; }
        return this.control ? this.control.hasError(errorCode, path) : false;
    };
    AbstractControlDirective.prototype.getError = function (errorCode, path) {
        if (path === void 0) { path = null; }
        return this.control ? this.control.getError(errorCode, path) : null;
    };
    return AbstractControlDirective;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$46 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ControlContainer = (function (_super) {
    __extends$46(ControlContainer, _super);
    function ControlContainer() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(ControlContainer.prototype, "formDirective", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlContainer.prototype, "path", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    return ControlContainer;
}(AbstractControlDirective));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var globalScope$1;
if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
        globalScope$1 = (self);
    }
    else {
        globalScope$1 = (global);
    }
}
else {
    globalScope$1 = (window);
}

var _global$1 = globalScope$1;

_global$1.assert = function assert(condition) {
};
function isPresent$1(obj) {
    return obj != null;
}
function isBlank$1(obj) {
    return obj == null;
}



function looseIdentical$1(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
}
function isJsObject$1(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
}




function isPrimitive$1(obj) {
    return !isJsObject$1(obj);
}

function toPromise(PromiseCtor) {
    var _this = this;
    if (!PromiseCtor) {
        if (root.root.Rx && root.root.Rx.config && root.root.Rx.config.Promise) {
            PromiseCtor = root.root.Rx.config.Promise;
        }
        else if (root.root.Promise) {
            PromiseCtor = root.root.Promise;
        }
    }
    if (!PromiseCtor) {
        throw new Error('no Promise impl found');
    }
    return new PromiseCtor(function (resolve, reject) {
        var value;
        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
    });
}
var toPromise_2 = toPromise;

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var StringMapWrapper$1 = (function () {
    function StringMapWrapper() {
    }
    StringMapWrapper.merge = function (m1, m2) {
        var /** @type {?} */ m = {};
        for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
        }
        for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
        }
        return m;
    };
    StringMapWrapper.equals = function (m1, m2) {
        var /** @type {?} */ k1 = Object.keys(m1);
        var /** @type {?} */ k2 = Object.keys(m2);
        if (k1.length != k2.length) {
            return false;
        }
        for (var /** @type {?} */ i = 0; i < k1.length; i++) {
            var /** @type {?} */ key = k1[i];
            if (m1[key] !== m2[key]) {
                return false;
            }
        }
        return true;
    };
    return StringMapWrapper;
}());
var ListWrapper$1 = (function () {
    function ListWrapper() {
    }
    ListWrapper.findLast = function (arr, condition) {
        for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
            if (condition(arr[i])) {
                return arr[i];
            }
        }
        return null;
    };
    ListWrapper.removeAll = function (list, items) {
        for (var /** @type {?} */ i = 0; i < items.length; ++i) {
            var /** @type {?} */ index = list.indexOf(items[i]);
            if (index > -1) {
                list.splice(index, 1);
            }
        }
    };
    ListWrapper.remove = function (list, el) {
        var /** @type {?} */ index = list.indexOf(el);
        if (index > -1) {
            list.splice(index, 1);
            return true;
        }
        return false;
    };
    ListWrapper.equals = function (a, b) {
        if (a.length != b.length)
            return false;
        for (var /** @type {?} */ i = 0; i < a.length; ++i) {
            if (a[i] !== b[i])
                return false;
        }
        return true;
    };
    ListWrapper.flatten = function (list) {
        return list.reduce(function (flat, item) {
            var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
            return ((flat)).concat(flatItem);
        }, []);
    };
    return ListWrapper;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var isPromise$2 = core.__core_private__.isPromise;
var isObservable$1 = core.__core_private__.isObservable;

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function isEmptyInputValue(value) {
    return value == null || value.length === 0;
}
var NG_VALIDATORS = new core.OpaqueToken('NgValidators');
var NG_ASYNC_VALIDATORS = new core.OpaqueToken('NgAsyncValidators');
var Validators = (function () {
    function Validators() {
    }
    Validators.required = function (control) {
        return isEmptyInputValue(control.value) ? { 'required': true } : null;
    };
    Validators.requiredTrue = function (control) {
        return control.value === true ? null : { 'required': true };
    };
    Validators.minLength = function (minLength) {
        return function (control) {
            if (isEmptyInputValue(control.value)) {
                return null;
            }
            var /** @type {?} */ length = control.value ? control.value.length : 0;
            return length < minLength ?
                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :
                null;
        };
    };
    Validators.maxLength = function (maxLength) {
        return function (control) {
            var /** @type {?} */ length = control.value ? control.value.length : 0;
            return length > maxLength ?
                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :
                null;
        };
    };
    Validators.pattern = function (pattern) {
        if (!pattern)
            return Validators.nullValidator;
        var /** @type {?} */ regex;
        var /** @type {?} */ regexStr;
        if (typeof pattern === 'string') {
            regexStr = "^" + pattern + "$";
            regex = new RegExp(regexStr);
        }
        else {
            regexStr = pattern.toString();
            regex = pattern;
        }
        return function (control) {
            if (isEmptyInputValue(control.value)) {
                return null;
            }
            var /** @type {?} */ value = control.value;
            return regex.test(value) ? null :
                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };
        };
    };
    Validators.nullValidator = function (c) { return null; };
    Validators.compose = function (validators) {
        if (!validators)
            return null;
        var /** @type {?} */ presentValidators = validators.filter(isPresent$1);
        if (presentValidators.length == 0)
            return null;
        return function (control) {
            return _mergeErrors(_executeValidators(control, presentValidators));
        };
    };
    Validators.composeAsync = function (validators) {
        if (!validators)
            return null;
        var /** @type {?} */ presentValidators = validators.filter(isPresent$1);
        if (presentValidators.length == 0)
            return null;
        return function (control) {
            var /** @type {?} */ promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
            return Promise.all(promises).then(_mergeErrors);
        };
    };
    return Validators;
}());
function _convertToPromise(obj) {
    return isPromise$2(obj) ? obj : toPromise_2.call(obj);
}
function _executeValidators(control, validators) {
    return validators.map(function (v) { return v(control); });
}
function _executeAsyncValidators(control, validators) {
    return validators.map(function (v) { return v(control); });
}
function _mergeErrors(arrayOfErrors) {
    var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {
        return isPresent$1(errors) ? StringMapWrapper$1.merge(res, errors) : res;
    }, {});
    return Object.keys(res).length === 0 ? null : res;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NG_VALUE_ACCESSOR = new core.OpaqueToken('NgValueAccessor');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var CHECKBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return CheckboxControlValueAccessor; }),
    multi: true,
};
var CheckboxControlValueAccessor = (function () {
    function CheckboxControlValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    CheckboxControlValueAccessor.prototype.writeValue = function (value) {
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);
    };
    CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    CheckboxControlValueAccessor.decorators = [
        { type: core.Directive, args: [{
                    selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
                    host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
                    providers: [CHECKBOX_VALUE_ACCESSOR]
                },] },
    ];
    CheckboxControlValueAccessor.ctorParameters = function () { return [
        { type: core.Renderer, },
        { type: core.ElementRef, },
    ]; };
    return CheckboxControlValueAccessor;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DEFAULT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return DefaultValueAccessor; }),
    multi: true
};
var DefaultValueAccessor = (function () {
    function DefaultValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    DefaultValueAccessor.prototype.writeValue = function (value) {
        var /** @type {?} */ normalizedValue = value == null ? '' : value;
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
    };
    DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    DefaultValueAccessor.decorators = [
        { type: core.Directive, args: [{
                    selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
                    host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
                    providers: [DEFAULT_VALUE_ACCESSOR]
                },] },
    ];
    DefaultValueAccessor.ctorParameters = function () { return [
        { type: core.Renderer, },
        { type: core.ElementRef, },
    ]; };
    return DefaultValueAccessor;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function normalizeValidator(validator) {
    if (((validator)).validate) {
        return function (c) { return ((validator)).validate(c); };
    }
    else {
        return (validator);
    }
}
function normalizeAsyncValidator(validator) {
    if (((validator)).validate) {
        return function (c) { return ((validator)).validate(c); };
    }
    else {
        return (validator);
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NUMBER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return NumberValueAccessor; }),
    multi: true
};
var NumberValueAccessor = (function () {
    function NumberValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    NumberValueAccessor.prototype.writeValue = function (value) {
        var /** @type {?} */ normalizedValue = value == null ? '' : value;
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
    };
    NumberValueAccessor.prototype.registerOnChange = function (fn) {
        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
    };
    NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    NumberValueAccessor.decorators = [
        { type: core.Directive, args: [{
                    selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
                    host: {
                        '(change)': 'onChange($event.target.value)',
                        '(input)': 'onChange($event.target.value)',
                        '(blur)': 'onTouched()'
                    },
                    providers: [NUMBER_VALUE_ACCESSOR]
                },] },
    ];
    NumberValueAccessor.ctorParameters = function () { return [
        { type: core.Renderer, },
        { type: core.ElementRef, },
    ]; };
    return NumberValueAccessor;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$47 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function unimplemented$1() {
    throw new Error('unimplemented');
}
var NgControl = (function (_super) {
    __extends$47(NgControl, _super);
    function NgControl() {
        _super.apply(this, arguments);
        this._parent = null;
        this.name = null;
        this.valueAccessor = null;
        this._rawValidators = [];
        this._rawAsyncValidators = [];
    }
    Object.defineProperty(NgControl.prototype, "validator", {
        get: function () { return (unimplemented$1()); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgControl.prototype, "asyncValidator", {
        get: function () { return (unimplemented$1()); },
        enumerable: true,
        configurable: true
    });
    NgControl.prototype.viewToModelUpdate = function (newValue) { };
    return NgControl;
}(AbstractControlDirective));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var RADIO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return RadioControlValueAccessor; }),
    multi: true
};
var RadioControlRegistry = (function () {
    function RadioControlRegistry() {
        this._accessors = [];
    }
    RadioControlRegistry.prototype.add = function (control, accessor) {
        this._accessors.push([control, accessor]);
    };
    RadioControlRegistry.prototype.remove = function (accessor) {
        for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {
            if (this._accessors[i][1] === accessor) {
                this._accessors.splice(i, 1);
                return;
            }
        }
    };
    RadioControlRegistry.prototype.select = function (accessor) {
        var _this = this;
        this._accessors.forEach(function (c) {
            if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
                c[1].fireUncheck(accessor.value);
            }
        });
    };
    RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {
        if (!controlPair[0].control)
            return false;
        return controlPair[0]._parent === accessor._control._parent &&
            controlPair[1].name === accessor.name;
    };
    RadioControlRegistry.decorators = [
        { type: core.Injectable },
    ];
    RadioControlRegistry.ctorParameters = function () { return []; };
    return RadioControlRegistry;
}());
var RadioControlValueAccessor = (function () {
    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._registry = _registry;
        this._injector = _injector;
        this.onChange = function () { };
        this.onTouched = function () { };
    }
    RadioControlValueAccessor.prototype.ngOnInit = function () {
        this._control = this._injector.get(NgControl);
        this._checkName();
        this._registry.add(this._control, this);
    };
    RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };
    RadioControlValueAccessor.prototype.writeValue = function (value) {
        this._state = value === this.value;
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);
    };
    RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
        var _this = this;
        this._fn = fn;
        this.onChange = function () {
            fn(_this.value);
            _this._registry.select(_this);
        };
    };
    RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };
    RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    RadioControlValueAccessor.prototype._checkName = function () {
        if (this.name && this.formControlName && this.name !== this.formControlName) {
            this._throwNameError();
        }
        if (!this.name && this.formControlName)
            this.name = this.formControlName;
    };
    RadioControlValueAccessor.prototype._throwNameError = function () {
        throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
    };
    RadioControlValueAccessor.decorators = [
        { type: core.Directive, args: [{
                    selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
                    host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },
                    providers: [RADIO_VALUE_ACCESSOR]
                },] },
    ];
    RadioControlValueAccessor.ctorParameters = function () { return [
        { type: core.Renderer, },
        { type: core.ElementRef, },
        { type: RadioControlRegistry, },
        { type: core.Injector, },
    ]; };
    RadioControlValueAccessor.propDecorators = {
        'name': [{ type: core.Input },],
        'formControlName': [{ type: core.Input },],
        'value': [{ type: core.Input },],
    };
    return RadioControlValueAccessor;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var RANGE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return RangeValueAccessor; }),
    multi: true
};
var RangeValueAccessor = (function () {
    function RangeValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    RangeValueAccessor.prototype.writeValue = function (value) {
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));
    };
    RangeValueAccessor.prototype.registerOnChange = function (fn) {
        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
    };
    RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    RangeValueAccessor.decorators = [
        { type: core.Directive, args: [{
                    selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
                    host: {
                        '(change)': 'onChange($event.target.value)',
                        '(input)': 'onChange($event.target.value)',
                        '(blur)': 'onTouched()'
                    },
                    providers: [RANGE_VALUE_ACCESSOR]
                },] },
    ];
    RangeValueAccessor.ctorParameters = function () { return [
        { type: core.Renderer, },
        { type: core.ElementRef, },
    ]; };
    return RangeValueAccessor;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SELECT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return SelectControlValueAccessor; }),
    multi: true
};
function _buildValueString(id, value) {
    if (id == null)
        return "" + value;
    if (!isPrimitive$1(value))
        value = 'Object';
    return (id + ": " + value).slice(0, 50);
}
function _extractId(valueString) {
    return valueString.split(':')[0];
}
var SelectControlValueAccessor = (function () {
    function SelectControlValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._optionMap = new Map();
        this._idCounter = 0;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    SelectControlValueAccessor.prototype.writeValue = function (value) {
        this.value = value;
        var /** @type {?} */ id = this._getOptionId(value);
        if (id == null) {
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'selectedIndex', -1);
        }
        var /** @type {?} */ valueString = _buildValueString(id, value);
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);
    };
    SelectControlValueAccessor.prototype.registerOnChange = function (fn) {
        var _this = this;
        this.onChange = function (valueString) {
            _this.value = valueString;
            fn(_this._getOptionValue(valueString));
        };
    };
    SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };
    SelectControlValueAccessor.prototype._getOptionId = function (value) {
        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
            var id = _a[_i];
            if (looseIdentical$1(this._optionMap.get(id), value))
                return id;
        }
        return null;
    };
    SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {
        var /** @type {?} */ id = _extractId(valueString);
        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
    };
    SelectControlValueAccessor.decorators = [
        { type: core.Directive, args: [{
                    selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
                    host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
                    providers: [SELECT_VALUE_ACCESSOR]
                },] },
    ];
    SelectControlValueAccessor.ctorParameters = function () { return [
        { type: core.Renderer, },
        { type: core.ElementRef, },
    ]; };
    return SelectControlValueAccessor;
}());
var NgSelectOption = (function () {
    function NgSelectOption(_element, _renderer, _select) {
        this._element = _element;
        this._renderer = _renderer;
        this._select = _select;
        if (this._select)
            this.id = this._select._registerOption();
    }
    Object.defineProperty(NgSelectOption.prototype, "ngValue", {
        set: function (value) {
            if (this._select == null)
                return;
            this._select._optionMap.set(this.id, value);
            this._setElementValue(_buildValueString(this.id, value));
            this._select.writeValue(this._select.value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgSelectOption.prototype, "value", {
        set: function (value) {
            this._setElementValue(value);
            if (this._select)
                this._select.writeValue(this._select.value);
        },
        enumerable: true,
        configurable: true
    });
    NgSelectOption.prototype._setElementValue = function (value) {
        this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
    };
    NgSelectOption.prototype.ngOnDestroy = function () {
        if (this._select) {
            this._select._optionMap.delete(this.id);
            this._select.writeValue(this._select.value);
        }
    };
    NgSelectOption.decorators = [
        { type: core.Directive, args: [{ selector: 'option' },] },
    ];
    NgSelectOption.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer, },
        { type: SelectControlValueAccessor, decorators: [{ type: core.Optional }, { type: core.Host },] },
    ]; };
    NgSelectOption.propDecorators = {
        'ngValue': [{ type: core.Input, args: ['ngValue',] },],
        'value': [{ type: core.Input, args: ['value',] },],
    };
    return NgSelectOption;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SELECT_MULTIPLE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),
    multi: true
};
function _buildValueString$1(id, value) {
    if (id == null)
        return "" + value;
    if (typeof value === 'string')
        value = "'" + value + "'";
    if (!isPrimitive$1(value))
        value = 'Object';
    return (id + ": " + value).slice(0, 50);
}
function _extractId$1(valueString) {
    return valueString.split(':')[0];
}
var SelectMultipleControlValueAccessor = (function () {
    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._optionMap = new Map();
        this._idCounter = 0;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {
        var _this = this;
        this.value = value;
        var /** @type {?} */ optionSelectedStateSetter;
        if (Array.isArray(value)) {
            var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });
            optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };
        }
        else {
            optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };
        }
        this._optionMap.forEach(optionSelectedStateSetter);
    };
    SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {
        var _this = this;
        this.onChange = function (_) {
            var /** @type {?} */ selected = [];
            if (_.hasOwnProperty('selectedOptions')) {
                var /** @type {?} */ options = _.selectedOptions;
                for (var /** @type {?} */ i = 0; i < options.length; i++) {
                    var /** @type {?} */ opt = options.item(i);
                    var /** @type {?} */ val = _this._getOptionValue(opt.value);
                    selected.push(val);
                }
            }
            else {
                var /** @type {?} */ options = (_.options);
                for (var /** @type {?} */ i = 0; i < options.length; i++) {
                    var /** @type {?} */ opt = options.item(i);
                    if (opt.selected) {
                        var /** @type {?} */ val = _this._getOptionValue(opt.value);
                        selected.push(val);
                    }
                }
            }
            _this.value = selected;
            fn(selected);
        };
    };
    SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {
        var /** @type {?} */ id = (this._idCounter++).toString();
        this._optionMap.set(id, value);
        return id;
    };
    SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {
        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
            var id = _a[_i];
            if (looseIdentical$1(this._optionMap.get(id)._value, value))
                return id;
        }
        return null;
    };
    SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {
        var /** @type {?} */ id = _extractId$1(valueString);
        return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
    };
    SelectMultipleControlValueAccessor.decorators = [
        { type: core.Directive, args: [{
                    selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
                    host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },
                    providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
                },] },
    ];
    SelectMultipleControlValueAccessor.ctorParameters = function () { return [
        { type: core.Renderer, },
        { type: core.ElementRef, },
    ]; };
    return SelectMultipleControlValueAccessor;
}());
var NgSelectMultipleOption = (function () {
    function NgSelectMultipleOption(_element, _renderer, _select) {
        this._element = _element;
        this._renderer = _renderer;
        this._select = _select;
        if (this._select) {
            this.id = this._select._registerOption(this);
        }
    }
    Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
        set: function (value) {
            if (this._select == null)
                return;
            this._value = value;
            this._setElementValue(_buildValueString$1(this.id, value));
            this._select.writeValue(this._select.value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
        set: function (value) {
            if (this._select) {
                this._value = value;
                this._setElementValue(_buildValueString$1(this.id, value));
                this._select.writeValue(this._select.value);
            }
            else {
                this._setElementValue(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    NgSelectMultipleOption.prototype._setElementValue = function (value) {
        this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
    };
    NgSelectMultipleOption.prototype._setSelected = function (selected) {
        this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);
    };
    NgSelectMultipleOption.prototype.ngOnDestroy = function () {
        if (this._select) {
            this._select._optionMap.delete(this.id);
            this._select.writeValue(this._select.value);
        }
    };
    NgSelectMultipleOption.decorators = [
        { type: core.Directive, args: [{ selector: 'option' },] },
    ];
    NgSelectMultipleOption.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer, },
        { type: SelectMultipleControlValueAccessor, decorators: [{ type: core.Optional }, { type: core.Host },] },
    ]; };
    NgSelectMultipleOption.propDecorators = {
        'ngValue': [{ type: core.Input, args: ['ngValue',] },],
        'value': [{ type: core.Input, args: ['value',] },],
    };
    return NgSelectMultipleOption;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function controlPath(name, parent) {
    return parent.path.concat([name]);
}
function setUpControl(control, dir) {
    if (!control)
        _throwError$1(dir, 'Cannot find control with');
    if (!dir.valueAccessor)
        _throwError$1(dir, 'No value accessor for form control with');
    control.validator = Validators.compose([control.validator, dir.validator]);
    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
    dir.valueAccessor.writeValue(control.value);
    dir.valueAccessor.registerOnChange(function (newValue) {
        dir.viewToModelUpdate(newValue);
        control.markAsDirty();
        control.setValue(newValue, { emitModelToViewChange: false });
    });
    dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });
    control.registerOnChange(function (newValue, emitModelEvent) {
        dir.valueAccessor.writeValue(newValue);
        if (emitModelEvent)
            dir.viewToModelUpdate(newValue);
    });
    if (dir.valueAccessor.setDisabledState) {
        control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });
    }
    dir._rawValidators.forEach(function (validator) {
        if (((validator)).registerOnValidatorChange)
            ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });
    });
    dir._rawAsyncValidators.forEach(function (validator) {
        if (((validator)).registerOnValidatorChange)
            ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });
    });
}
function cleanUpControl(control, dir) {
    dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });
    dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });
    dir._rawValidators.forEach(function (validator) {
        if (validator.registerOnValidatorChange) {
            validator.registerOnValidatorChange(null);
        }
    });
    dir._rawAsyncValidators.forEach(function (validator) {
        if (validator.registerOnValidatorChange) {
            validator.registerOnValidatorChange(null);
        }
    });
    if (control)
        control._clearChangeFns();
}
function setUpFormContainer(control, dir) {
    if (isBlank$1(control))
        _throwError$1(dir, 'Cannot find control with');
    control.validator = Validators.compose([control.validator, dir.validator]);
    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
}
function _noControlError(dir) {
    return _throwError$1(dir, 'There is no FormControl instance attached to form control element with');
}
function _throwError$1(dir, message) {
    var /** @type {?} */ messageEnd;
    if (dir.path.length > 1) {
        messageEnd = "path: '" + dir.path.join(' -> ') + "'";
    }
    else if (dir.path[0]) {
        messageEnd = "name: '" + dir.path + "'";
    }
    else {
        messageEnd = 'unspecified name attribute';
    }
    throw new Error(message + " " + messageEnd);
}
function composeValidators(validators) {
    return isPresent$1(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;
}
function composeAsyncValidators(validators) {
    return isPresent$1(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :
        null;
}
function isPropertyUpdated(changes, viewModel) {
    if (!changes.hasOwnProperty('model'))
        return false;
    var /** @type {?} */ change = changes['model'];
    if (change.isFirstChange())
        return true;
    return !looseIdentical$1(viewModel, change.currentValue);
}
var BUILTIN_ACCESSORS = [
    CheckboxControlValueAccessor,
    RangeValueAccessor,
    NumberValueAccessor,
    SelectControlValueAccessor,
    SelectMultipleControlValueAccessor,
    RadioControlValueAccessor,
];
function isBuiltInAccessor(valueAccessor) {
    return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });
}
function selectValueAccessor(dir, valueAccessors) {
    if (!valueAccessors)
        return null;
    var /** @type {?} */ defaultAccessor;
    var /** @type {?} */ builtinAccessor;
    var /** @type {?} */ customAccessor;
    valueAccessors.forEach(function (v) {
        if (v.constructor === DefaultValueAccessor) {
            defaultAccessor = v;
        }
        else if (isBuiltInAccessor(v)) {
            if (builtinAccessor)
                _throwError$1(dir, 'More than one built-in value accessor matches form control with');
            builtinAccessor = v;
        }
        else {
            if (customAccessor)
                _throwError$1(dir, 'More than one custom value accessor matches form control with');
            customAccessor = v;
        }
    });
    if (customAccessor)
        return customAccessor;
    if (builtinAccessor)
        return builtinAccessor;
    if (defaultAccessor)
        return defaultAccessor;
    _throwError$1(dir, 'No valid value accessor for form control with');
    return null;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$45 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractFormGroupDirective = (function (_super) {
    __extends$45(AbstractFormGroupDirective, _super);
    function AbstractFormGroupDirective() {
        _super.apply(this, arguments);
    }
    AbstractFormGroupDirective.prototype.ngOnInit = function () {
        this._checkParentType();
        this.formDirective.addFormGroup(this);
    };
    AbstractFormGroupDirective.prototype.ngOnDestroy = function () {
        if (this.formDirective) {
            this.formDirective.removeFormGroup(this);
        }
    };
    Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
        get: function () { return this.formDirective.getFormGroup(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
        get: function () { return controlPath(this.name, this._parent); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
        get: function () { return this._parent ? this._parent.formDirective : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
        get: function () { return composeValidators(this._validators); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
        get: function () { return composeAsyncValidators(this._asyncValidators); },
        enumerable: true,
        configurable: true
    });
    AbstractFormGroupDirective.prototype._checkParentType = function () { };
    return AbstractFormGroupDirective;
}(ControlContainer));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$48 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AbstractControlStatus = (function () {
    function AbstractControlStatus(cd) {
        this._cd = cd;
    }
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
        get: function () { return this._cd.control ? this._cd.control.untouched : false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
        get: function () { return this._cd.control ? this._cd.control.touched : false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
        get: function () { return this._cd.control ? this._cd.control.pristine : false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
        get: function () { return this._cd.control ? this._cd.control.dirty : false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
        get: function () { return this._cd.control ? this._cd.control.valid : false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
        get: function () { return this._cd.control ? this._cd.control.invalid : false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
        get: function () { return this._cd.control ? this._cd.control.pending : false; },
        enumerable: true,
        configurable: true
    });
    return AbstractControlStatus;
}());
var ngControlStatusHost = {
    '[class.ng-untouched]': 'ngClassUntouched',
    '[class.ng-touched]': 'ngClassTouched',
    '[class.ng-pristine]': 'ngClassPristine',
    '[class.ng-dirty]': 'ngClassDirty',
    '[class.ng-valid]': 'ngClassValid',
    '[class.ng-invalid]': 'ngClassInvalid',
    '[class.ng-pending]': 'ngClassPending',
};
var NgControlStatus = (function (_super) {
    __extends$48(NgControlStatus, _super);
    function NgControlStatus(cd) {
        _super.call(this, cd);
    }
    NgControlStatus.decorators = [
        { type: core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },
    ];
    NgControlStatus.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: core.Self },] },
    ]; };
    return NgControlStatus;
}(AbstractControlStatus));
var NgControlStatusGroup = (function (_super) {
    __extends$48(NgControlStatusGroup, _super);
    function NgControlStatusGroup(cd) {
        _super.call(this, cd);
    }
    NgControlStatusGroup.decorators = [
        { type: core.Directive, args: [{
                    selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
                    host: ngControlStatusHost
                },] },
    ];
    NgControlStatusGroup.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: core.Self },] },
    ]; };
    return NgControlStatusGroup;
}(AbstractControlStatus));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$50 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EventEmitter$2 = (function (_super) {
    __extends$50(EventEmitter$$1, _super);
    function EventEmitter$$1(isAsync) {
        if (isAsync === void 0) { isAsync = false; }
        _super.call(this);
        this.__isAsync = isAsync;
    }
    EventEmitter$$1.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
    EventEmitter$$1.prototype.subscribe = function (generatorOrNext, error, complete) {
        var /** @type {?} */ schedulerFn;
        var /** @type {?} */ errorFn = function (err) { return null; };
        var /** @type {?} */ completeFn = function () { return null; };
        if (generatorOrNext && typeof generatorOrNext === 'object') {
            schedulerFn = this.__isAsync ? function (value) {
                setTimeout(function () { return generatorOrNext.next(value); });
            } : function (value) { generatorOrNext.next(value); };
            if (generatorOrNext.error) {
                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
                    function (err) { generatorOrNext.error(err); };
            }
            if (generatorOrNext.complete) {
                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
                    function () { generatorOrNext.complete(); };
            }
        }
        else {
            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
                function (value) { generatorOrNext(value); };
            if (error) {
                errorFn =
                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
            }
            if (complete) {
                completeFn =
                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
            }
        }
        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
    };
    return EventEmitter$$1;
}(Subject_2));

var __extends$52 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var PromiseObservable = (function (_super) {
    __extends$52(PromiseObservable, _super);
    function PromiseObservable(promise, scheduler) {
        _super.call(this);
        this.promise = promise;
        this.scheduler = scheduler;
    }
    PromiseObservable.create = function (promise, scheduler) {
        return new PromiseObservable(promise, scheduler);
    };
    PromiseObservable.prototype._subscribe = function (subscriber) {
        var _this = this;
        var promise = this.promise;
        var scheduler = this.scheduler;
        if (scheduler == null) {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    subscriber.next(this.value);
                    subscriber.complete();
                }
            }
            else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.next(value);
                        subscriber.complete();
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.error(err);
                    }
                })
                    .then(null, function (err) {
                    root.root.setTimeout(function () { throw err; });
                });
            }
        }
        else {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                }
            }
            else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                    }
                })
                    .then(null, function (err) {
                    root.root.setTimeout(function () { throw err; });
                });
            }
        }
    };
    return PromiseObservable;
}(Observable_1.Observable));
var PromiseObservable_2 = PromiseObservable;
function dispatchNext(arg) {
    var value = arg.value, subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
    }
}
function dispatchError(arg) {
    var err = arg.err, subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.error(err);
    }
}
var PromiseObservable_1 = {
	PromiseObservable: PromiseObservable_2
};

var fromPromise_1 = PromiseObservable_1.PromiseObservable.create;

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$51 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var VALID = 'VALID';
var INVALID = 'INVALID';
var PENDING = 'PENDING';
var DISABLED = 'DISABLED';
function _find(control, path, delimiter) {
    if (path == null)
        return null;
    if (!(path instanceof Array)) {
        path = ((path)).split(delimiter);
    }
    if (path instanceof Array && (path.length === 0))
        return null;
    return ((path)).reduce(function (v, name) {
        if (v instanceof FormGroup) {
            return v.controls[name] || null;
        }
        if (v instanceof FormArray) {
            return v.at(/** @type {?} */ (name)) || null;
        }
        return null;
    }, control);
}
function toObservable(r) {
    return isPromise$2(r) ? fromPromise_1(r) : r;
}
function coerceToValidator(validator) {
    return Array.isArray(validator) ? composeValidators(validator) : validator;
}
function coerceToAsyncValidator(asyncValidator) {
    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;
}
var AbstractControl = (function () {
    function AbstractControl(validator, asyncValidator) {
        this.validator = validator;
        this.asyncValidator = asyncValidator;
        this._onCollectionChange = function () { };
        this._pristine = true;
        this._touched = false;
        this._onDisabledChange = [];
    }
    Object.defineProperty(AbstractControl.prototype, "value", {
        get: function () { return this._value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "parent", {
        get: function () { return this._parent; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "status", {
        get: function () { return this._status; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valid", {
        get: function () { return this._status === VALID; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "invalid", {
        get: function () { return this._status === INVALID; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pending", {
        get: function () { return this._status == PENDING; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "disabled", {
        get: function () { return this._status === DISABLED; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "enabled", {
        get: function () { return this._status !== DISABLED; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "errors", {
        get: function () { return this._errors; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pristine", {
        get: function () { return this._pristine; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "dirty", {
        get: function () { return !this.pristine; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "touched", {
        get: function () { return this._touched; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "untouched", {
        get: function () { return !this._touched; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valueChanges", {
        get: function () { return this._valueChanges; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "statusChanges", {
        get: function () { return this._statusChanges; },
        enumerable: true,
        configurable: true
    });
    AbstractControl.prototype.setValidators = function (newValidator) {
        this.validator = coerceToValidator(newValidator);
    };
    AbstractControl.prototype.setAsyncValidators = function (newValidator) {
        this.asyncValidator = coerceToAsyncValidator(newValidator);
    };
    AbstractControl.prototype.clearValidators = function () { this.validator = null; };
    AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };
    AbstractControl.prototype.markAsTouched = function (_a) {
        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
        this._touched = true;
        if (this._parent && !onlySelf) {
            this._parent.markAsTouched({ onlySelf: onlySelf });
        }
    };
    AbstractControl.prototype.markAsUntouched = function (_a) {
        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
        this._touched = false;
        this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });
        if (this._parent && !onlySelf) {
            this._parent._updateTouched({ onlySelf: onlySelf });
        }
    };
    AbstractControl.prototype.markAsDirty = function (_a) {
        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
        this._pristine = false;
        if (this._parent && !onlySelf) {
            this._parent.markAsDirty({ onlySelf: onlySelf });
        }
    };
    AbstractControl.prototype.markAsPristine = function (_a) {
        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
        this._pristine = true;
        this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });
        if (this._parent && !onlySelf) {
            this._parent._updatePristine({ onlySelf: onlySelf });
        }
    };
    AbstractControl.prototype.markAsPending = function (_a) {
        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
        this._status = PENDING;
        if (this._parent && !onlySelf) {
            this._parent.markAsPending({ onlySelf: onlySelf });
        }
    };
    AbstractControl.prototype.disable = function (_a) {
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
        this._status = DISABLED;
        this._errors = null;
        this._forEachChild(function (control) { control.disable({ onlySelf: true }); });
        this._updateValue();
        if (emitEvent !== false) {
            this._valueChanges.emit(this._value);
            this._statusChanges.emit(this._status);
        }
        this._updateAncestors(onlySelf);
        this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });
    };
    AbstractControl.prototype.enable = function (_a) {
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
        this._status = VALID;
        this._forEachChild(function (control) { control.enable({ onlySelf: true }); });
        this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });
        this._updateAncestors(onlySelf);
        this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });
    };
    AbstractControl.prototype._updateAncestors = function (onlySelf) {
        if (this._parent && !onlySelf) {
            this._parent.updateValueAndValidity();
            this._parent._updatePristine();
            this._parent._updateTouched();
        }
    };
    AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
    AbstractControl.prototype.setValue = function (value, options) { };
    AbstractControl.prototype.patchValue = function (value, options) { };
    AbstractControl.prototype.reset = function (value, options) { };
    AbstractControl.prototype.updateValueAndValidity = function (_a) {
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
        this._setInitialStatus();
        this._updateValue();
        if (this.enabled) {
            this._errors = this._runValidator();
            this._status = this._calculateStatus();
            if (this._status === VALID || this._status === PENDING) {
                this._runAsyncValidator(emitEvent);
            }
        }
        if (emitEvent !== false) {
            this._valueChanges.emit(this._value);
            this._statusChanges.emit(this._status);
        }
        if (this._parent && !onlySelf) {
            this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
        }
    };
    AbstractControl.prototype._updateTreeValidity = function (_a) {
        var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;
        this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });
        this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });
    };
    AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };
    AbstractControl.prototype._runValidator = function () {
        return this.validator ? this.validator(this) : null;
    };
    AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
        var _this = this;
        if (this.asyncValidator) {
            this._status = PENDING;
            this._cancelExistingSubscription();
            var /** @type {?} */ obs = toObservable(this.asyncValidator(this));
            if (!(isObservable$1(obs))) {
                throw new Error("expected the following validator to return Promise or Observable: " + this.asyncValidator + ". If you are using FormBuilder; did you forget to brace your validators in an array?");
            }
            this._asyncValidationSubscription =
                obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });
        }
    };
    AbstractControl.prototype._cancelExistingSubscription = function () {
        if (this._asyncValidationSubscription) {
            this._asyncValidationSubscription.unsubscribe();
        }
    };
    AbstractControl.prototype.setErrors = function (errors, _a) {
        var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
        this._errors = errors;
        this._updateControlsErrors(emitEvent !== false);
    };
    AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };
    AbstractControl.prototype.getError = function (errorCode, path) {
        if (path === void 0) { path = null; }
        var /** @type {?} */ control = path ? this.get(path) : this;
        return control && control._errors ? control._errors[errorCode] : null;
    };
    AbstractControl.prototype.hasError = function (errorCode, path) {
        if (path === void 0) { path = null; }
        return !!this.getError(errorCode, path);
    };
    Object.defineProperty(AbstractControl.prototype, "root", {
        get: function () {
            var /** @type {?} */ x = this;
            while (x._parent) {
                x = x._parent;
            }
            return x;
        },
        enumerable: true,
        configurable: true
    });
    AbstractControl.prototype._updateControlsErrors = function (emitEvent) {
        this._status = this._calculateStatus();
        if (emitEvent) {
            this._statusChanges.emit(this._status);
        }
        if (this._parent) {
            this._parent._updateControlsErrors(emitEvent);
        }
    };
    AbstractControl.prototype._initObservables = function () {
        this._valueChanges = new EventEmitter$2();
        this._statusChanges = new EventEmitter$2();
    };
    AbstractControl.prototype._calculateStatus = function () {
        if (this._allControlsDisabled())
            return DISABLED;
        if (this._errors)
            return INVALID;
        if (this._anyControlsHaveStatus(PENDING))
            return PENDING;
        if (this._anyControlsHaveStatus(INVALID))
            return INVALID;
        return VALID;
    };
    AbstractControl.prototype._updateValue = function () { };
    AbstractControl.prototype._forEachChild = function (cb) { };
    AbstractControl.prototype._anyControls = function (condition) { };
    AbstractControl.prototype._allControlsDisabled = function () { };
    AbstractControl.prototype._anyControlsHaveStatus = function (status) {
        return this._anyControls(function (control) { return control.status === status; });
    };
    AbstractControl.prototype._anyControlsDirty = function () {
        return this._anyControls(function (control) { return control.dirty; });
    };
    AbstractControl.prototype._anyControlsTouched = function () {
        return this._anyControls(function (control) { return control.touched; });
    };
    AbstractControl.prototype._updatePristine = function (_a) {
        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
        this._pristine = !this._anyControlsDirty();
        if (this._parent && !onlySelf) {
            this._parent._updatePristine({ onlySelf: onlySelf });
        }
    };
    AbstractControl.prototype._updateTouched = function (_a) {
        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
        this._touched = this._anyControlsTouched();
        if (this._parent && !onlySelf) {
            this._parent._updateTouched({ onlySelf: onlySelf });
        }
    };
    AbstractControl.prototype._isBoxedValue = function (formState) {
        return typeof formState === 'object' && formState !== null &&
            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
    };
    AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };
    return AbstractControl;
}());
var FormControl$1 = (function (_super) {
    __extends$51(FormControl$$1, _super);
    function FormControl$$1(formState, validator, asyncValidator) {
        if (formState === void 0) { formState = null; }
        if (validator === void 0) { validator = null; }
        if (asyncValidator === void 0) { asyncValidator = null; }
        _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));
        this._onChange = [];
        this._applyFormState(formState);
        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
        this._initObservables();
    }
    FormControl$$1.prototype.setValue = function (value, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;
        this._value = value;
        if (this._onChange.length && emitModelToViewChange !== false) {
            this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });
        }
        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
    };
    FormControl$$1.prototype.patchValue = function (value, options) {
        if (options === void 0) { options = {}; }
        this.setValue(value, options);
    };
    FormControl$$1.prototype.reset = function (formState, _a) {
        if (formState === void 0) { formState = null; }
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
        this._applyFormState(formState);
        this.markAsPristine({ onlySelf: onlySelf });
        this.markAsUntouched({ onlySelf: onlySelf });
        this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });
    };
    FormControl$$1.prototype._updateValue = function () { };
    FormControl$$1.prototype._anyControls = function (condition) { return false; };
    FormControl$$1.prototype._allControlsDisabled = function () { return this.disabled; };
    FormControl$$1.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };
    FormControl$$1.prototype._clearChangeFns = function () {
        this._onChange = [];
        this._onDisabledChange = [];
        this._onCollectionChange = function () { };
    };
    FormControl$$1.prototype.registerOnDisabledChange = function (fn) {
        this._onDisabledChange.push(fn);
    };
    FormControl$$1.prototype._forEachChild = function (cb) { };
    FormControl$$1.prototype._applyFormState = function (formState) {
        if (this._isBoxedValue(formState)) {
            this._value = formState.value;
            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :
                this.enable({ onlySelf: true, emitEvent: false });
        }
        else {
            this._value = formState;
        }
    };
    return FormControl$$1;
}(AbstractControl));
var FormGroup = (function (_super) {
    __extends$51(FormGroup, _super);
    function FormGroup(controls, validator, asyncValidator) {
        if (validator === void 0) { validator = null; }
        if (asyncValidator === void 0) { asyncValidator = null; }
        _super.call(this, validator, asyncValidator);
        this.controls = controls;
        this._initObservables();
        this._setUpControls();
        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
    }
    FormGroup.prototype.registerControl = function (name, control) {
        if (this.controls[name])
            return this.controls[name];
        this.controls[name] = control;
        control.setParent(this);
        control._registerOnCollectionChange(this._onCollectionChange);
        return control;
    };
    FormGroup.prototype.addControl = function (name, control) {
        this.registerControl(name, control);
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    FormGroup.prototype.removeControl = function (name) {
        if (this.controls[name])
            this.controls[name]._registerOnCollectionChange(function () { });
        delete (this.controls[name]);
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    FormGroup.prototype.setControl = function (name, control) {
        if (this.controls[name])
            this.controls[name]._registerOnCollectionChange(function () { });
        delete (this.controls[name]);
        if (control)
            this.registerControl(name, control);
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    FormGroup.prototype.contains = function (controlName) {
        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
    };
    FormGroup.prototype.setValue = function (value, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
        this._checkAllValuesPresent(value);
        Object.keys(value).forEach(function (name) {
            _this._throwIfControlMissing(name);
            _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });
        });
        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
    };
    FormGroup.prototype.patchValue = function (value, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
        Object.keys(value).forEach(function (name) {
            if (_this.controls[name]) {
                _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });
            }
        });
        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
    };
    FormGroup.prototype.reset = function (value, _a) {
        if (value === void 0) { value = {}; }
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
        this._forEachChild(function (control, name) {
            control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });
        });
        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
        this._updatePristine({ onlySelf: onlySelf });
        this._updateTouched({ onlySelf: onlySelf });
    };
    FormGroup.prototype.getRawValue = function () {
        return this._reduceChildren({}, function (acc, control, name) {
            acc[name] = control instanceof FormControl$1 ? control.value : ((control)).getRawValue();
            return acc;
        });
    };
    FormGroup.prototype._throwIfControlMissing = function (name) {
        if (!Object.keys(this.controls).length) {
            throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
        }
        if (!this.controls[name]) {
            throw new Error("Cannot find form control with name: " + name + ".");
        }
    };
    FormGroup.prototype._forEachChild = function (cb) {
        var _this = this;
        Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });
    };
    FormGroup.prototype._setUpControls = function () {
        var _this = this;
        this._forEachChild(function (control) {
            control.setParent(_this);
            control._registerOnCollectionChange(_this._onCollectionChange);
        });
    };
    FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };
    FormGroup.prototype._anyControls = function (condition) {
        var _this = this;
        var /** @type {?} */ res = false;
        this._forEachChild(function (control, name) {
            res = res || (_this.contains(name) && condition(control));
        });
        return res;
    };
    FormGroup.prototype._reduceValue = function () {
        var _this = this;
        return this._reduceChildren({}, function (acc, control, name) {
            if (control.enabled || _this.disabled) {
                acc[name] = control.value;
            }
            return acc;
        });
    };
    FormGroup.prototype._reduceChildren = function (initValue, fn) {
        var /** @type {?} */ res = initValue;
        this._forEachChild(function (control, name) { res = fn(res, control, name); });
        return res;
    };
    FormGroup.prototype._allControlsDisabled = function () {
        for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {
            var controlName = _a[_i];
            if (this.controls[controlName].enabled) {
                return false;
            }
        }
        return Object.keys(this.controls).length > 0 || this.disabled;
    };
    FormGroup.prototype._checkAllValuesPresent = function (value) {
        this._forEachChild(function (control, name) {
            if (value[name] === undefined) {
                throw new Error("Must supply a value for form control with name: '" + name + "'.");
            }
        });
    };
    return FormGroup;
}(AbstractControl));
var FormArray = (function (_super) {
    __extends$51(FormArray, _super);
    function FormArray(controls, validator, asyncValidator) {
        if (validator === void 0) { validator = null; }
        if (asyncValidator === void 0) { asyncValidator = null; }
        _super.call(this, validator, asyncValidator);
        this.controls = controls;
        this._initObservables();
        this._setUpControls();
        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
    }
    FormArray.prototype.at = function (index) { return this.controls[index]; };
    FormArray.prototype.push = function (control) {
        this.controls.push(control);
        this._registerControl(control);
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    FormArray.prototype.insert = function (index, control) {
        this.controls.splice(index, 0, control);
        this._registerControl(control);
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    FormArray.prototype.removeAt = function (index) {
        if (this.controls[index])
            this.controls[index]._registerOnCollectionChange(function () { });
        this.controls.splice(index, 1);
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    FormArray.prototype.setControl = function (index, control) {
        if (this.controls[index])
            this.controls[index]._registerOnCollectionChange(function () { });
        this.controls.splice(index, 1);
        if (control) {
            this.controls.splice(index, 0, control);
            this._registerControl(control);
        }
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    Object.defineProperty(FormArray.prototype, "length", {
        get: function () { return this.controls.length; },
        enumerable: true,
        configurable: true
    });
    FormArray.prototype.setValue = function (value, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
        this._checkAllValuesPresent(value);
        value.forEach(function (newValue, index) {
            _this._throwIfControlMissing(index);
            _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });
        });
        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
    };
    FormArray.prototype.patchValue = function (value, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
        value.forEach(function (newValue, index) {
            if (_this.at(index)) {
                _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });
            }
        });
        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
    };
    FormArray.prototype.reset = function (value, _a) {
        if (value === void 0) { value = []; }
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
        this._forEachChild(function (control, index) {
            control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });
        });
        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
        this._updatePristine({ onlySelf: onlySelf });
        this._updateTouched({ onlySelf: onlySelf });
    };
    FormArray.prototype.getRawValue = function () {
        return this.controls.map(function (control) {
            return control instanceof FormControl$1 ? control.value : ((control)).getRawValue();
        });
    };
    FormArray.prototype._throwIfControlMissing = function (index) {
        if (!this.controls.length) {
            throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
        }
        if (!this.at(index)) {
            throw new Error("Cannot find form control at index " + index);
        }
    };
    FormArray.prototype._forEachChild = function (cb) {
        this.controls.forEach(function (control, index) { cb(control, index); });
    };
    FormArray.prototype._updateValue = function () {
        var _this = this;
        this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })
            .map(function (control) { return control.value; });
    };
    FormArray.prototype._anyControls = function (condition) {
        return this.controls.some(function (control) { return control.enabled && condition(control); });
    };
    FormArray.prototype._setUpControls = function () {
        var _this = this;
        this._forEachChild(function (control) { return _this._registerControl(control); });
    };
    FormArray.prototype._checkAllValuesPresent = function (value) {
        this._forEachChild(function (control, i) {
            if (value[i] === undefined) {
                throw new Error("Must supply a value for form control at index: " + i + ".");
            }
        });
    };
    FormArray.prototype._allControlsDisabled = function () {
        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {
            var control = _a[_i];
            if (control.enabled)
                return false;
        }
        return this.controls.length > 0 || this.disabled;
    };
    FormArray.prototype._registerControl = function (control) {
        control.setParent(this);
        control._registerOnCollectionChange(this._onCollectionChange);
    };
    return FormArray;
}(AbstractControl));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$49 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var formDirectiveProvider = {
    provide: ControlContainer,
    useExisting: core.forwardRef(function () { return NgForm; })
};
var resolvedPromise = Promise.resolve(null);
var NgForm = (function (_super) {
    __extends$49(NgForm, _super);
    function NgForm(validators, asyncValidators) {
        _super.call(this);
        this._submitted = false;
        this.ngSubmit = new EventEmitter$2();
        this.form =
            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
    }
    Object.defineProperty(NgForm.prototype, "submitted", {
        get: function () { return this._submitted; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForm.prototype, "formDirective", {
        get: function () { return this; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForm.prototype, "control", {
        get: function () { return this.form; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForm.prototype, "path", {
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForm.prototype, "controls", {
        get: function () { return this.form.controls; },
        enumerable: true,
        configurable: true
    });
    NgForm.prototype.addControl = function (dir) {
        var _this = this;
        resolvedPromise.then(function () {
            var /** @type {?} */ container = _this._findContainer(dir.path);
            dir._control = (container.registerControl(dir.name, dir.control));
            setUpControl(dir.control, dir);
            dir.control.updateValueAndValidity({ emitEvent: false });
        });
    };
    NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };
    NgForm.prototype.removeControl = function (dir) {
        var _this = this;
        resolvedPromise.then(function () {
            var /** @type {?} */ container = _this._findContainer(dir.path);
            if (container) {
                container.removeControl(dir.name);
            }
        });
    };
    NgForm.prototype.addFormGroup = function (dir) {
        var _this = this;
        resolvedPromise.then(function () {
            var /** @type {?} */ container = _this._findContainer(dir.path);
            var /** @type {?} */ group = new FormGroup({});
            setUpFormContainer(group, dir);
            container.registerControl(dir.name, group);
            group.updateValueAndValidity({ emitEvent: false });
        });
    };
    NgForm.prototype.removeFormGroup = function (dir) {
        var _this = this;
        resolvedPromise.then(function () {
            var /** @type {?} */ container = _this._findContainer(dir.path);
            if (container) {
                container.removeControl(dir.name);
            }
        });
    };
    NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };
    NgForm.prototype.updateModel = function (dir, value) {
        var _this = this;
        resolvedPromise.then(function () {
            var /** @type {?} */ ctrl = (_this.form.get(dir.path));
            ctrl.setValue(value);
        });
    };
    NgForm.prototype.setValue = function (value) { this.control.setValue(value); };
    NgForm.prototype.onSubmit = function ($event) {
        this._submitted = true;
        this.ngSubmit.emit($event);
        return false;
    };
    NgForm.prototype.onReset = function () { this.resetForm(); };
    NgForm.prototype.resetForm = function (value) {
        if (value === void 0) { value = undefined; }
        this.form.reset(value);
        this._submitted = false;
    };
    NgForm.prototype._findContainer = function (path) {
        path.pop();
        return path.length ? (this.form.get(path)) : this.form;
    };
    NgForm.decorators = [
        { type: core.Directive, args: [{
                    selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
                    providers: [formDirectiveProvider],
                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
                    outputs: ['ngSubmit'],
                    exportAs: 'ngForm'
                },] },
    ];
    NgForm.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
    ]; };
    return NgForm;
}(ControlContainer));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var FormErrorExamples = {
    formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
    formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
    formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; let i=index\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
    ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
    ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var TemplateDrivenErrors = (function () {
    function TemplateDrivenErrors() {
    }
    TemplateDrivenErrors.modelParentException = function () {
        throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + FormErrorExamples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + FormErrorExamples.ngModelWithFormGroup);
    };
    TemplateDrivenErrors.formGroupNameException = function () {
        throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
    };
    TemplateDrivenErrors.missingNameException = function () {
        throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
    };
    TemplateDrivenErrors.modelGroupParentException = function () {
        throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
    };
    return TemplateDrivenErrors;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$54 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var modelGroupProvider = {
    provide: ControlContainer,
    useExisting: core.forwardRef(function () { return NgModelGroup; })
};
var NgModelGroup = (function (_super) {
    __extends$54(NgModelGroup, _super);
    function NgModelGroup(parent, validators, asyncValidators) {
        _super.call(this);
        this._parent = parent;
        this._validators = validators;
        this._asyncValidators = asyncValidators;
    }
    NgModelGroup.prototype._checkParentType = function () {
        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
            TemplateDrivenErrors.modelGroupParentException();
        }
    };
    NgModelGroup.decorators = [
        { type: core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },
    ];
    NgModelGroup.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: core.Host }, { type: core.SkipSelf },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
    ]; };
    NgModelGroup.propDecorators = {
        'name': [{ type: core.Input, args: ['ngModelGroup',] },],
    };
    return NgModelGroup;
}(AbstractFormGroupDirective));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$53 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var formControlBinding = {
    provide: NgControl,
    useExisting: core.forwardRef(function () { return NgModel; })
};
var resolvedPromise$1 = Promise.resolve(null);
var NgModel = (function (_super) {
    __extends$53(NgModel, _super);
    function NgModel(parent, validators, asyncValidators, valueAccessors) {
        _super.call(this);
        this._control = new FormControl$1();
        this._registered = false;
        this.update = new EventEmitter$2();
        this._parent = parent;
        this._rawValidators = validators || [];
        this._rawAsyncValidators = asyncValidators || [];
        this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    NgModel.prototype.ngOnChanges = function (changes) {
        this._checkForErrors();
        if (!this._registered)
            this._setUpControl();
        if ('isDisabled' in changes) {
            this._updateDisabled(changes);
        }
        if (isPropertyUpdated(changes, this.viewModel)) {
            this._updateValue(this.model);
            this.viewModel = this.model;
        }
    };
    NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };
    Object.defineProperty(NgModel.prototype, "control", {
        get: function () { return this._control; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModel.prototype, "path", {
        get: function () {
            return this._parent ? controlPath(this.name, this._parent) : [this.name];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModel.prototype, "formDirective", {
        get: function () { return this._parent ? this._parent.formDirective : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModel.prototype, "validator", {
        get: function () { return composeValidators(this._rawValidators); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModel.prototype, "asyncValidator", {
        get: function () {
            return composeAsyncValidators(this._rawAsyncValidators);
        },
        enumerable: true,
        configurable: true
    });
    NgModel.prototype.viewToModelUpdate = function (newValue) {
        this.viewModel = newValue;
        this.update.emit(newValue);
    };
    NgModel.prototype._setUpControl = function () {
        this._isStandalone() ? this._setUpStandalone() :
            this.formDirective.addControl(this);
        this._registered = true;
    };
    NgModel.prototype._isStandalone = function () {
        return !this._parent || (this.options && this.options.standalone);
    };
    NgModel.prototype._setUpStandalone = function () {
        setUpControl(this._control, this);
        this._control.updateValueAndValidity({ emitEvent: false });
    };
    NgModel.prototype._checkForErrors = function () {
        if (!this._isStandalone()) {
            this._checkParentType();
        }
        this._checkName();
    };
    NgModel.prototype._checkParentType = function () {
        if (!(this._parent instanceof NgModelGroup) &&
            this._parent instanceof AbstractFormGroupDirective) {
            TemplateDrivenErrors.formGroupNameException();
        }
        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
            TemplateDrivenErrors.modelParentException();
        }
    };
    NgModel.prototype._checkName = function () {
        if (this.options && this.options.name)
            this.name = this.options.name;
        if (!this._isStandalone() && !this.name) {
            TemplateDrivenErrors.missingNameException();
        }
    };
    NgModel.prototype._updateValue = function (value) {
        var _this = this;
        resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });
    };
    NgModel.prototype._updateDisabled = function (changes) {
        var _this = this;
        var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;
        var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');
        resolvedPromise$1.then(function () {
            if (isDisabled && !_this.control.disabled) {
                _this.control.disable();
            }
            else if (!isDisabled && _this.control.disabled) {
                _this.control.enable();
            }
        });
    };
    NgModel.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ngModel]:not([formControlName]):not([formControl])',
                    providers: [formControlBinding],
                    exportAs: 'ngModel'
                },] },
    ];
    NgModel.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: core.Optional }, { type: core.Host },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_VALUE_ACCESSOR,] },] },
    ]; };
    NgModel.propDecorators = {
        'name': [{ type: core.Input },],
        'isDisabled': [{ type: core.Input, args: ['disabled',] },],
        'model': [{ type: core.Input, args: ['ngModel',] },],
        'options': [{ type: core.Input, args: ['ngModelOptions',] },],
        'update': [{ type: core.Output, args: ['ngModelChange',] },],
    };
    return NgModel;
}(NgControl));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ReactiveErrors = (function () {
    function ReactiveErrors() {
    }
    ReactiveErrors.controlParentException = function () {
        throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formControlName);
    };
    ReactiveErrors.ngModelGroupException = function () {
        throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + FormErrorExamples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + FormErrorExamples.ngModelGroup);
    };
    ReactiveErrors.missingFormException = function () {
        throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + FormErrorExamples.formControlName);
    };
    ReactiveErrors.groupParentException = function () {
        throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formGroupName);
    };
    ReactiveErrors.arrayParentException = function () {
        throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + FormErrorExamples.formArrayName);
    };
    ReactiveErrors.disabledAttrWarning = function () {
        console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
    };
    return ReactiveErrors;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$55 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var formControlBinding$1 = {
    provide: NgControl,
    useExisting: core.forwardRef(function () { return FormControlDirective; })
};
var FormControlDirective = (function (_super) {
    __extends$55(FormControlDirective, _super);
    function FormControlDirective(validators, asyncValidators, valueAccessors) {
        _super.call(this);
        this.update = new EventEmitter$2();
        this._rawValidators = validators || [];
        this._rawAsyncValidators = asyncValidators || [];
        this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
        set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
        enumerable: true,
        configurable: true
    });
    FormControlDirective.prototype.ngOnChanges = function (changes) {
        if (this._isControlChanged(changes)) {
            setUpControl(this.form, this);
            if (this.control.disabled && this.valueAccessor.setDisabledState) {
                this.valueAccessor.setDisabledState(true);
            }
            this.form.updateValueAndValidity({ emitEvent: false });
        }
        if (isPropertyUpdated(changes, this.viewModel)) {
            this.form.setValue(this.model);
            this.viewModel = this.model;
        }
    };
    Object.defineProperty(FormControlDirective.prototype, "path", {
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "validator", {
        get: function () { return composeValidators(this._rawValidators); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
        get: function () {
            return composeAsyncValidators(this._rawAsyncValidators);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "control", {
        get: function () { return this.form; },
        enumerable: true,
        configurable: true
    });
    FormControlDirective.prototype.viewToModelUpdate = function (newValue) {
        this.viewModel = newValue;
        this.update.emit(newValue);
    };
    FormControlDirective.prototype._isControlChanged = function (changes) {
        return changes.hasOwnProperty('form');
    };
    FormControlDirective.decorators = [
        { type: core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },
    ];
    FormControlDirective.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_VALUE_ACCESSOR,] },] },
    ]; };
    FormControlDirective.propDecorators = {
        'form': [{ type: core.Input, args: ['formControl',] },],
        'model': [{ type: core.Input, args: ['ngModel',] },],
        'update': [{ type: core.Output, args: ['ngModelChange',] },],
        'isDisabled': [{ type: core.Input, args: ['disabled',] },],
    };
    return FormControlDirective;
}(NgControl));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$57 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var formDirectiveProvider$1 = {
    provide: ControlContainer,
    useExisting: core.forwardRef(function () { return FormGroupDirective; })
};
var FormGroupDirective = (function (_super) {
    __extends$57(FormGroupDirective, _super);
    function FormGroupDirective(_validators, _asyncValidators) {
        _super.call(this);
        this._validators = _validators;
        this._asyncValidators = _asyncValidators;
        this._submitted = false;
        this.directives = [];
        this.form = null;
        this.ngSubmit = new EventEmitter$2();
    }
    FormGroupDirective.prototype.ngOnChanges = function (changes) {
        this._checkFormPresent();
        if (changes.hasOwnProperty('form')) {
            this._updateValidators();
            this._updateDomValue();
            this._updateRegistrations();
        }
    };
    Object.defineProperty(FormGroupDirective.prototype, "submitted", {
        get: function () { return this._submitted; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
        get: function () { return this; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "control", {
        get: function () { return this.form; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "path", {
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    FormGroupDirective.prototype.addControl = function (dir) {
        var /** @type {?} */ ctrl = this.form.get(dir.path);
        setUpControl(ctrl, dir);
        ctrl.updateValueAndValidity({ emitEvent: false });
        this.directives.push(dir);
        return ctrl;
    };
    FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };
    FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper$1.remove(this.directives, dir); };
    FormGroupDirective.prototype.addFormGroup = function (dir) {
        var /** @type {?} */ ctrl = this.form.get(dir.path);
        setUpFormContainer(ctrl, dir);
        ctrl.updateValueAndValidity({ emitEvent: false });
    };
    FormGroupDirective.prototype.removeFormGroup = function (dir) { };
    FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };
    FormGroupDirective.prototype.addFormArray = function (dir) {
        var /** @type {?} */ ctrl = this.form.get(dir.path);
        setUpFormContainer(ctrl, dir);
        ctrl.updateValueAndValidity({ emitEvent: false });
    };
    FormGroupDirective.prototype.removeFormArray = function (dir) { };
    FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };
    FormGroupDirective.prototype.updateModel = function (dir, value) {
        var /** @type {?} */ ctrl = (this.form.get(dir.path));
        ctrl.setValue(value);
    };
    FormGroupDirective.prototype.onSubmit = function ($event) {
        this._submitted = true;
        this.ngSubmit.emit($event);
        return false;
    };
    FormGroupDirective.prototype.onReset = function () { this.resetForm(); };
    FormGroupDirective.prototype.resetForm = function (value) {
        if (value === void 0) { value = undefined; }
        this.form.reset(value);
        this._submitted = false;
    };
    FormGroupDirective.prototype._updateDomValue = function () {
        var _this = this;
        this.directives.forEach(function (dir) {
            var /** @type {?} */ newCtrl = _this.form.get(dir.path);
            if (dir._control !== newCtrl) {
                cleanUpControl(dir._control, dir);
                if (newCtrl)
                    setUpControl(newCtrl, dir);
                dir._control = newCtrl;
            }
        });
        this.form._updateTreeValidity({ emitEvent: false });
    };
    FormGroupDirective.prototype._updateRegistrations = function () {
        var _this = this;
        this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });
        if (this._oldForm)
            this._oldForm._registerOnCollectionChange(function () { });
        this._oldForm = this.form;
    };
    FormGroupDirective.prototype._updateValidators = function () {
        var /** @type {?} */ sync = composeValidators(this._validators);
        this.form.validator = Validators.compose([this.form.validator, sync]);
        var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);
        this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);
    };
    FormGroupDirective.prototype._checkFormPresent = function () {
        if (!this.form) {
            ReactiveErrors.missingFormException();
        }
    };
    FormGroupDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[formGroup]',
                    providers: [formDirectiveProvider$1],
                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
                    exportAs: 'ngForm'
                },] },
    ];
    FormGroupDirective.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
    ]; };
    FormGroupDirective.propDecorators = {
        'form': [{ type: core.Input, args: ['formGroup',] },],
        'ngSubmit': [{ type: core.Output },],
    };
    return FormGroupDirective;
}(ControlContainer));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$58 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var formGroupNameProvider = {
    provide: ControlContainer,
    useExisting: core.forwardRef(function () { return FormGroupName; })
};
var FormGroupName = (function (_super) {
    __extends$58(FormGroupName, _super);
    function FormGroupName(parent, validators, asyncValidators) {
        _super.call(this);
        this._parent = parent;
        this._validators = validators;
        this._asyncValidators = asyncValidators;
    }
    FormGroupName.prototype._checkParentType = function () {
        if (_hasInvalidParent(this._parent)) {
            ReactiveErrors.groupParentException();
        }
    };
    FormGroupName.decorators = [
        { type: core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },
    ];
    FormGroupName.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: core.Optional }, { type: core.Host }, { type: core.SkipSelf },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
    ]; };
    FormGroupName.propDecorators = {
        'name': [{ type: core.Input, args: ['formGroupName',] },],
    };
    return FormGroupName;
}(AbstractFormGroupDirective));
var formArrayNameProvider = {
    provide: ControlContainer,
    useExisting: core.forwardRef(function () { return FormArrayName; })
};
var FormArrayName = (function (_super) {
    __extends$58(FormArrayName, _super);
    function FormArrayName(parent, validators, asyncValidators) {
        _super.call(this);
        this._parent = parent;
        this._validators = validators;
        this._asyncValidators = asyncValidators;
    }
    FormArrayName.prototype.ngOnInit = function () {
        this._checkParentType();
        this.formDirective.addFormArray(this);
    };
    FormArrayName.prototype.ngOnDestroy = function () {
        if (this.formDirective) {
            this.formDirective.removeFormArray(this);
        }
    };
    Object.defineProperty(FormArrayName.prototype, "control", {
        get: function () { return this.formDirective.getFormArray(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "formDirective", {
        get: function () {
            return this._parent ? (this._parent.formDirective) : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "path", {
        get: function () { return controlPath(this.name, this._parent); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "validator", {
        get: function () { return composeValidators(this._validators); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
        get: function () { return composeAsyncValidators(this._asyncValidators); },
        enumerable: true,
        configurable: true
    });
    FormArrayName.prototype._checkParentType = function () {
        if (_hasInvalidParent(this._parent)) {
            ReactiveErrors.arrayParentException();
        }
    };
    FormArrayName.decorators = [
        { type: core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },
    ];
    FormArrayName.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: core.Optional }, { type: core.Host }, { type: core.SkipSelf },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
    ]; };
    FormArrayName.propDecorators = {
        'name': [{ type: core.Input, args: ['formArrayName',] },],
    };
    return FormArrayName;
}(ControlContainer));
function _hasInvalidParent(parent) {
    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&
        !(parent instanceof FormArrayName);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$56 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var controlNameBinding = {
    provide: NgControl,
    useExisting: core.forwardRef(function () { return FormControlName; })
};
var FormControlName = (function (_super) {
    __extends$56(FormControlName, _super);
    function FormControlName(parent, validators, asyncValidators, valueAccessors) {
        _super.call(this);
        this._added = false;
        this.update = new EventEmitter$2();
        this._parent = parent;
        this._rawValidators = validators || [];
        this._rawAsyncValidators = asyncValidators || [];
        this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    Object.defineProperty(FormControlName.prototype, "isDisabled", {
        set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
        enumerable: true,
        configurable: true
    });
    FormControlName.prototype.ngOnChanges = function (changes) {
        if (!this._added)
            this._setUpControl();
        if (isPropertyUpdated(changes, this.viewModel)) {
            this.viewModel = this.model;
            this.formDirective.updateModel(this, this.model);
        }
    };
    FormControlName.prototype.ngOnDestroy = function () {
        if (this.formDirective) {
            this.formDirective.removeControl(this);
        }
    };
    FormControlName.prototype.viewToModelUpdate = function (newValue) {
        this.viewModel = newValue;
        this.update.emit(newValue);
    };
    Object.defineProperty(FormControlName.prototype, "path", {
        get: function () { return controlPath(this.name, this._parent); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "formDirective", {
        get: function () { return this._parent ? this._parent.formDirective : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "validator", {
        get: function () { return composeValidators(this._rawValidators); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "asyncValidator", {
        get: function () {
            return composeAsyncValidators(this._rawAsyncValidators);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "control", {
        get: function () { return this._control; },
        enumerable: true,
        configurable: true
    });
    FormControlName.prototype._checkParentType = function () {
        if (!(this._parent instanceof FormGroupName) &&
            this._parent instanceof AbstractFormGroupDirective) {
            ReactiveErrors.ngModelGroupException();
        }
        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&
            !(this._parent instanceof FormArrayName)) {
            ReactiveErrors.controlParentException();
        }
    };
    FormControlName.prototype._setUpControl = function () {
        this._checkParentType();
        this._control = this.formDirective.addControl(this);
        if (this.control.disabled && this.valueAccessor.setDisabledState) {
            this.valueAccessor.setDisabledState(true);
        }
        this._added = true;
    };
    FormControlName.decorators = [
        { type: core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },
    ];
    FormControlName.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: core.Optional }, { type: core.Host }, { type: core.SkipSelf },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
        { type: Array, decorators: [{ type: core.Optional }, { type: core.Self }, { type: core.Inject, args: [NG_VALUE_ACCESSOR,] },] },
    ]; };
    FormControlName.propDecorators = {
        'name': [{ type: core.Input, args: ['formControlName',] },],
        'model': [{ type: core.Input, args: ['ngModel',] },],
        'update': [{ type: core.Output, args: ['ngModelChange',] },],
        'isDisabled': [{ type: core.Input, args: ['disabled',] },],
    };
    return FormControlName;
}(NgControl));

var __extends$59 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var REQUIRED_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: core.forwardRef(function () { return RequiredValidator; }),
    multi: true
};
var CHECKBOX_REQUIRED_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: core.forwardRef(function () { return CheckboxRequiredValidator; }),
    multi: true
};
var RequiredValidator = (function () {
    function RequiredValidator() {
    }
    Object.defineProperty(RequiredValidator.prototype, "required", {
        get: function () { return this._required; },
        set: function (value) {
            this._required = value != null && value !== false && "" + value !== 'false';
            if (this._onChange)
                this._onChange();
        },
        enumerable: true,
        configurable: true
    });
    RequiredValidator.prototype.validate = function (c) {
        return this.required ? Validators.required(c) : null;
    };
    RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
    RequiredValidator.decorators = [
        { type: core.Directive, args: [{
                    selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
                    providers: [REQUIRED_VALIDATOR],
                    host: { '[attr.required]': 'required ? "" : null' }
                },] },
    ];
    RequiredValidator.ctorParameters = function () { return []; };
    RequiredValidator.propDecorators = {
        'required': [{ type: core.Input },],
    };
    return RequiredValidator;
}());
var CheckboxRequiredValidator = (function (_super) {
    __extends$59(CheckboxRequiredValidator, _super);
    function CheckboxRequiredValidator() {
        _super.apply(this, arguments);
    }
    CheckboxRequiredValidator.prototype.validate = function (c) {
        return this.required ? Validators.requiredTrue(c) : null;
    };
    CheckboxRequiredValidator.decorators = [
        { type: core.Directive, args: [{
                    selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
                    providers: [CHECKBOX_REQUIRED_VALIDATOR],
                    host: { '[attr.required]': 'required ? "" : null' }
                },] },
    ];
    CheckboxRequiredValidator.ctorParameters = function () { return []; };
    return CheckboxRequiredValidator;
}(RequiredValidator));
var MIN_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: core.forwardRef(function () { return MinLengthValidator; }),
    multi: true
};
var MinLengthValidator = (function () {
    function MinLengthValidator() {
    }
    MinLengthValidator.prototype.ngOnChanges = function (changes) {
        if ('minlength' in changes) {
            this._createValidator();
            if (this._onChange)
                this._onChange();
        }
    };
    MinLengthValidator.prototype.validate = function (c) {
        return this.minlength == null ? null : this._validator(c);
    };
    MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
    MinLengthValidator.prototype._createValidator = function () {
        this._validator = Validators.minLength(parseInt(this.minlength, 10));
    };
    MinLengthValidator.decorators = [
        { type: core.Directive, args: [{
                    selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
                    providers: [MIN_LENGTH_VALIDATOR],
                    host: { '[attr.minlength]': 'minlength ? minlength : null' }
                },] },
    ];
    MinLengthValidator.ctorParameters = function () { return []; };
    MinLengthValidator.propDecorators = {
        'minlength': [{ type: core.Input },],
    };
    return MinLengthValidator;
}());
var MAX_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: core.forwardRef(function () { return MaxLengthValidator; }),
    multi: true
};
var MaxLengthValidator = (function () {
    function MaxLengthValidator() {
    }
    MaxLengthValidator.prototype.ngOnChanges = function (changes) {
        if ('maxlength' in changes) {
            this._createValidator();
            if (this._onChange)
                this._onChange();
        }
    };
    MaxLengthValidator.prototype.validate = function (c) {
        return this.maxlength != null ? this._validator(c) : null;
    };
    MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
    MaxLengthValidator.prototype._createValidator = function () {
        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
    };
    MaxLengthValidator.decorators = [
        { type: core.Directive, args: [{
                    selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
                    providers: [MAX_LENGTH_VALIDATOR],
                    host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }
                },] },
    ];
    MaxLengthValidator.ctorParameters = function () { return []; };
    MaxLengthValidator.propDecorators = {
        'maxlength': [{ type: core.Input },],
    };
    return MaxLengthValidator;
}());
var PATTERN_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: core.forwardRef(function () { return PatternValidator; }),
    multi: true
};
var PatternValidator = (function () {
    function PatternValidator() {
    }
    PatternValidator.prototype.ngOnChanges = function (changes) {
        if ('pattern' in changes) {
            this._createValidator();
            if (this._onChange)
                this._onChange();
        }
    };
    PatternValidator.prototype.validate = function (c) { return this._validator(c); };
    PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
    PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };
    PatternValidator.decorators = [
        { type: core.Directive, args: [{
                    selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
                    providers: [PATTERN_VALIDATOR],
                    host: { '[attr.pattern]': 'pattern ? pattern : null' }
                },] },
    ];
    PatternValidator.ctorParameters = function () { return []; };
    PatternValidator.propDecorators = {
        'pattern': [{ type: core.Input },],
    };
    return PatternValidator;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var FormBuilder = (function () {
    function FormBuilder() {
    }
    FormBuilder.prototype.group = function (controlsConfig, extra) {
        if (extra === void 0) { extra = null; }
        var /** @type {?} */ controls = this._reduceControls(controlsConfig);
        var /** @type {?} */ validator = isPresent$1(extra) ? extra['validator'] : null;
        var /** @type {?} */ asyncValidator = isPresent$1(extra) ? extra['asyncValidator'] : null;
        return new FormGroup(controls, validator, asyncValidator);
    };
    FormBuilder.prototype.control = function (formState, validator, asyncValidator) {
        if (validator === void 0) { validator = null; }
        if (asyncValidator === void 0) { asyncValidator = null; }
        return new FormControl$1(formState, validator, asyncValidator);
    };
    FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
        var _this = this;
        if (validator === void 0) { validator = null; }
        if (asyncValidator === void 0) { asyncValidator = null; }
        var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });
        return new FormArray(controls, validator, asyncValidator);
    };
    FormBuilder.prototype._reduceControls = function (controlsConfig) {
        var _this = this;
        var /** @type {?} */ controls = {};
        Object.keys(controlsConfig).forEach(function (controlName) {
            controls[controlName] = _this._createControl(controlsConfig[controlName]);
        });
        return controls;
    };
    FormBuilder.prototype._createControl = function (controlConfig) {
        if (controlConfig instanceof FormControl$1 || controlConfig instanceof FormGroup ||
            controlConfig instanceof FormArray) {
            return controlConfig;
        }
        else if (Array.isArray(controlConfig)) {
            var /** @type {?} */ value = controlConfig[0];
            var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;
            var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
            return this.control(value, validator, asyncValidator);
        }
        else {
            return this.control(controlConfig);
        }
    };
    FormBuilder.decorators = [
        { type: core.Injectable },
    ];
    FormBuilder.ctorParameters = function () { return []; };
    return FormBuilder;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var VERSION$2 = new core.Version('2.4.9');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SHARED_FORM_DIRECTIVES = [
    NgSelectOption,
    NgSelectMultipleOption,
    DefaultValueAccessor,
    NumberValueAccessor,
    RangeValueAccessor,
    CheckboxControlValueAccessor,
    SelectControlValueAccessor,
    SelectMultipleControlValueAccessor,
    RadioControlValueAccessor,
    NgControlStatus,
    NgControlStatusGroup,
    RequiredValidator,
    MinLengthValidator,
    MaxLengthValidator,
    PatternValidator,
    CheckboxRequiredValidator,
];
var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
var InternalFormsSharedModule = (function () {
    function InternalFormsSharedModule() {
    }
    InternalFormsSharedModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: SHARED_FORM_DIRECTIVES,
                    exports: SHARED_FORM_DIRECTIVES,
                },] },
    ];
    InternalFormsSharedModule.ctorParameters = function () { return []; };
    return InternalFormsSharedModule;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var FormsModule$1 = (function () {
    function FormsModule$$1() {
    }
    FormsModule$$1.decorators = [
        { type: core.NgModule, args: [{
                    declarations: TEMPLATE_DRIVEN_DIRECTIVES,
                    providers: [RadioControlRegistry],
                    exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
                },] },
    ];
    FormsModule$$1.ctorParameters = function () { return []; };
    return FormsModule$$1;
}());
var ReactiveFormsModule$1 = (function () {
    function ReactiveFormsModule$$1() {
    }
    ReactiveFormsModule$$1.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [REACTIVE_DRIVEN_DIRECTIVES],
                    providers: [FormBuilder, RadioControlRegistry],
                    exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
                },] },
    ];
    ReactiveFormsModule$$1.ctorParameters = function () { return []; };
    return ReactiveFormsModule$$1;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */



var index$6 = Object.freeze({
	AbstractControlDirective: AbstractControlDirective,
	AbstractFormGroupDirective: AbstractFormGroupDirective,
	CheckboxControlValueAccessor: CheckboxControlValueAccessor,
	ControlContainer: ControlContainer,
	NG_VALUE_ACCESSOR: NG_VALUE_ACCESSOR,
	DefaultValueAccessor: DefaultValueAccessor,
	NgControl: NgControl,
	NgControlStatus: NgControlStatus,
	NgControlStatusGroup: NgControlStatusGroup,
	NgForm: NgForm,
	NgModel: NgModel,
	NgModelGroup: NgModelGroup,
	RadioControlValueAccessor: RadioControlValueAccessor,
	FormControlDirective: FormControlDirective,
	FormControlName: FormControlName,
	FormGroupDirective: FormGroupDirective,
	FormArrayName: FormArrayName,
	FormGroupName: FormGroupName,
	NgSelectOption: NgSelectOption,
	SelectControlValueAccessor: SelectControlValueAccessor,
	SelectMultipleControlValueAccessor: SelectMultipleControlValueAccessor,
	CheckboxRequiredValidator: CheckboxRequiredValidator,
	MaxLengthValidator: MaxLengthValidator,
	MinLengthValidator: MinLengthValidator,
	PatternValidator: PatternValidator,
	RequiredValidator: RequiredValidator,
	FormBuilder: FormBuilder,
	AbstractControl: AbstractControl,
	FormArray: FormArray,
	FormControl: FormControl$1,
	FormGroup: FormGroup,
	NG_ASYNC_VALIDATORS: NG_ASYNC_VALIDATORS,
	NG_VALIDATORS: NG_VALIDATORS,
	Validators: Validators,
	VERSION: VERSION$2,
	FormsModule: FormsModule$1,
	ReactiveFormsModule: ReactiveFormsModule$1
});

var forms_1 = ( index$6 && undefined ) || index$6;

var Ng2AutoCompleteDirective$1 = (function () {
    function Ng2AutoCompleteDirective(resolver, renderer, viewContainerRef, parentForm) {
        var _this = this;
        this.resolver = resolver;
        this.renderer = renderer;
        this.viewContainerRef = viewContainerRef;
        this.parentForm = parentForm;
        this.loadingText = "Loading";
        this.ngModelChange = new core_1.EventEmitter();
        this.valueChanged = new core_1.EventEmitter();
        this.showAutoCompleteDropdown = function (event) {
            var factory = _this.resolver.resolveComponentFactory(ng2AutoComplete_component.Ng2AutoCompleteComponent);
            _this.componentRef = _this.viewContainerRef.createComponent(factory);
            var component = _this.componentRef.instance;
            component.showInputTag = false;
            component.pathToData = _this.pathToData;
            component.minChars = _this.minChars;
            component.source = _this.source;
            component.placeholder = _this.autoCompletePlaceholder;
            component.acceptUserInput = _this.acceptUserInput;
            component.maxNumList = parseInt(_this.maxNumList, 10);
            component.loadingText = _this.loadingText;
            component.listFormatter = _this.listFormatter;
            component.blankOptionText = _this.blankOptionText;
            component.noMatchFoundText = _this.noMatchFoundText;
            component.valueSelected.subscribe(_this.selectNewValue);
            component.inputChanged.subscribe(_this.componentInputChanged);
            _this.acDropdownEl = _this.componentRef.location.nativeElement;
            _this.acDropdownEl.style.display = "none";
            if (_this.el.tagName !== "INPUT" && _this.acDropdownEl) {
                _this.inputEl.parentElement.insertBefore(_this.acDropdownEl, _this.inputEl.nextSibling);
            }
            setTimeout(function () {
                component.reloadList(_this.inputEl.value);
                _this.styleAutoCompleteDropdown();
                component.dropdownVisible = true;
            });
        };
        this.hideAutoCompleteDropdown = function (event) {
            if (_this.componentRef) {
                _this.componentRef.destroy();
                _this.componentRef = undefined;
            }
        };
        this.styleAutoCompleteDropdown = function () {
            if (_this.componentRef) {
                var component = _this.componentRef.instance;
                var thisElBCR = _this.el.getBoundingClientRect();
                var thisInputElBCR = _this.inputEl.getBoundingClientRect();
                var closeToBottom = thisInputElBCR.bottom + 100 > window.innerHeight;
                _this.acDropdownEl.style.width = thisInputElBCR.width + "px";
                _this.acDropdownEl.style.position = "absolute";
                _this.acDropdownEl.style.zIndex = "1";
                _this.acDropdownEl.style.left = "0";
                _this.acDropdownEl.style.display = "inline-block";
                if (closeToBottom) {
                    _this.acDropdownEl.style.bottom = thisInputElBCR.height + "px";
                }
                else {
                    _this.acDropdownEl.style.top = thisInputElBCR.height + "px";
                }
            }
        };
        this.componentInputChanged = function (val) {
            if (_this.acceptUserInput !== false) {
                _this.inputEl.value = val;
                if ((_this.parentForm && _this.formControlName) || _this.extFormControl) {
                    _this.formControl.patchValue(val);
                }
                (val !== _this.ngModel) && _this.ngModelChange.emit(val);
                _this.valueChanged.emit(val);
            }
        };
        this.selectNewValue = function (item) {
            if (item && typeof item === "object") {
                item = _this.addToStringFunction(item);
            }
            _this.inputEl && (_this.inputEl.value = '' + item);
            var val = item;
            if (_this.selectValueOf && item[_this.selectValueOf]) {
                val = item[_this.selectValueOf];
            }
            if ((_this.parentForm && _this.formControlName) || _this.extFormControl) {
                if (!!val) {
                    _this.formControl.patchValue(val);
                }
            }
            (val !== _this.ngModel) && _this.ngModelChange.emit(val);
            _this.valueChanged.emit(val);
            _this.hideAutoCompleteDropdown();
        };
        this.keydownEventHandler = function (evt) {
            if (_this.componentRef) {
                var component = _this.componentRef.instance;
                component.inputElKeyHandler(evt);
            }
        };
        this.inputEventHandler = function (evt) {
            if (_this.componentRef) {
                var component = _this.componentRef.instance;
                component.dropdownVisible = true;
                component.reloadListInDelay(evt);
            }
            else {
                _this.showAutoCompleteDropdown();
            }
        };
        this.el = this.viewContainerRef.element.nativeElement;
    }
    Ng2AutoCompleteDirective.prototype.ngOnInit = function () {
        this.wrapperEl = document.createElement("div");
        this.wrapperEl.className = "ng2-auto-complete-wrapper";
        this.wrapperEl.style.position = "relative";
        this.el.parentElement.insertBefore(this.wrapperEl, this.el.nextSibling);
        this.wrapperEl.appendChild(this.el);
        if (this.parentForm && this.formControlName) {
            if (this.parentForm['form']) {
                this.formControl = this.parentForm['form'].get(this.formControlName);
            }
            else if (this.parentForm instanceof forms_1.FormGroupName) {
                this.formControl = this.parentForm.control.controls[this.formControlName];
            }
        }
        else if (this.extFormControl) {
            this.formControl = this.extFormControl;
        }
        if (!!this.ngModel) {
            this.selectNewValue(this.ngModel);
        }
        else if (!!this.formControl && this.formControl.value) {
            this.selectNewValue(this.formControl.value[this.displayPropertyName]);
        }
    };
    Ng2AutoCompleteDirective.prototype.ngAfterViewInit = function () {
        this.inputEl = this.el.tagName === "INPUT" ?
            this.el : this.el.querySelector("input");
        this.inputEl.addEventListener('focus', this.showAutoCompleteDropdown);
        this.inputEl.addEventListener('blur', this.hideAutoCompleteDropdown);
        this.inputEl.addEventListener('keydown', this.keydownEventHandler);
        this.inputEl.addEventListener('input', this.inputEventHandler);
    };
    Ng2AutoCompleteDirective.prototype.ngOnDestroy = function () {
        if (this.componentRef) {
            this.componentRef.instance.valueSelected.unsubscribe();
            this.componentRef.instance.inputChanged.unsubscribe();
        }
    };
    Ng2AutoCompleteDirective.prototype.ngOnChanges = function (changes) {
        if (changes['ngModel']) {
            this.ngModel = this.addToStringFunction(changes['ngModel'].currentValue);
        }
    };
    Ng2AutoCompleteDirective.prototype.addToStringFunction = function (val) {
        if (val && typeof val === "object") {
            var displayVal_1;
            if (this.displayPropertyName) {
                displayVal_1 = val[this.displayPropertyName];
            }
            else if (this.listFormatter) {
                displayVal_1 = val[this.listFormatter];
            }
            else {
                console.log(3, val.value);
                displayVal_1 = val.value;
            }
            val.toString = function () {
                return displayVal_1;
            };
        }
        return val;
    };
    Ng2AutoCompleteDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: "[auto-complete], [ng2-auto-complete]"
                },] },
    ];
    Ng2AutoCompleteDirective.ctorParameters = function () { return [
        { type: core_1.ComponentFactoryResolver, },
        { type: core_1.Renderer, },
        { type: core_1.ViewContainerRef, },
        { type: forms_1.ControlContainer, decorators: [{ type: core_1.Optional }, { type: core_1.Host }, { type: core_1.SkipSelf },] },
    ]; };
    Ng2AutoCompleteDirective.propDecorators = {
        'autoCompletePlaceholder': [{ type: core_1.Input, args: ["auto-complete-placeholder",] },],
        'source': [{ type: core_1.Input, args: ["source",] },],
        'pathToData': [{ type: core_1.Input, args: ["path-to-data",] },],
        'minChars': [{ type: core_1.Input, args: ["min-chars",] },],
        'displayPropertyName': [{ type: core_1.Input, args: ["display-property-name",] },],
        'acceptUserInput': [{ type: core_1.Input, args: ["accept-user-input",] },],
        'maxNumList': [{ type: core_1.Input, args: ["max-num-list",] },],
        'selectValueOf': [{ type: core_1.Input, args: ["select-value-of",] },],
        'listFormatter': [{ type: core_1.Input, args: ["list-formatter",] },],
        'loadingText': [{ type: core_1.Input, args: ["loading-text",] },],
        'blankOptionText': [{ type: core_1.Input, args: ["blank-option-text",] },],
        'noMatchFoundText': [{ type: core_1.Input, args: ["no-match-found-text",] },],
        'ngModel': [{ type: core_1.Input },],
        'formControlName': [{ type: core_1.Input, args: ['formControlName',] },],
        'extFormControl': [{ type: core_1.Input, args: ['formControl',] },],
        'ngModelChange': [{ type: core_1.Output },],
        'valueChanged': [{ type: core_1.Output },],
    };
    return Ng2AutoCompleteDirective;
}());
var Ng2AutoCompleteDirective_1 = Ng2AutoCompleteDirective$1;
var ng2AutoComplete_directive = {
	Ng2AutoCompleteDirective: Ng2AutoCompleteDirective_1
};

var PlatformLocation$1 = (function () {
    function PlatformLocation$$1() {
    }
    PlatformLocation$$1.prototype.getBaseHrefFromDOM = function () { };
    PlatformLocation$$1.prototype.onPopState = function (fn) { };
    PlatformLocation$$1.prototype.onHashChange = function (fn) { };
    Object.defineProperty(PlatformLocation$$1.prototype, "pathname", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlatformLocation$$1.prototype, "search", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlatformLocation$$1.prototype, "hash", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    PlatformLocation$$1.prototype.replaceState = function (state, title, url) { };
    PlatformLocation$$1.prototype.pushState = function (state, title, url) { };
    PlatformLocation$$1.prototype.forward = function () { };
    PlatformLocation$$1.prototype.back = function () { };
    return PlatformLocation$$1;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var LocationStrategy = (function () {
    function LocationStrategy() {
    }
    LocationStrategy.prototype.path = function (includeHash) { };
    LocationStrategy.prototype.prepareExternalUrl = function (internal) { };
    LocationStrategy.prototype.pushState = function (state, title, url, queryParams) { };
    LocationStrategy.prototype.replaceState = function (state, title, url, queryParams) { };
    LocationStrategy.prototype.forward = function () { };
    LocationStrategy.prototype.back = function () { };
    LocationStrategy.prototype.onPopState = function (fn) { };
    LocationStrategy.prototype.getBaseHref = function () { };
    return LocationStrategy;
}());
var APP_BASE_HREF = new core.OpaqueToken('appBaseHref');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var globalScope$2;
if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
        globalScope$2 = (self);
    }
    else {
        globalScope$2 = (global);
    }
}
else {
    globalScope$2 = (window);
}

var _global$2 = globalScope$2;
function getTypeNameForDebugging$2(type) {
    return type['name'] || typeof type;
}
_global$2.assert = function assert(condition) {
};
function isPresent$2(obj) {
    return obj != null;
}
function isBlank$2(obj) {
    return obj == null;
}

function stringify$2(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return "" + token.overriddenName;
    }
    if (token.name) {
        return "" + token.name;
    }
    var /** @type {?} */ res = token.toString();
    var /** @type {?} */ newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
var NumberWrapper$2 = (function () {
    function NumberWrapper() {
    }
    NumberWrapper.parseIntAutoRadix = function (text) {
        var /** @type {?} */ result = parseInt(text);
        if (isNaN(result)) {
            throw new Error('Invalid integer literal when parsing ' + text);
        }
        return result;
    };
    NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
    return NumberWrapper;
}());

function isJsObject$2(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
}



var _symbolIterator$2 = null;
function getSymbolIterator$2() {
    if (!_symbolIterator$2) {
        if (((globalScope$2)).Symbol && Symbol.iterator) {
            _symbolIterator$2 = Symbol.iterator;
        }
        else {
            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
                var /** @type {?} */ key = keys[i];
                if (key !== 'entries' && key !== 'size' &&
                    ((Map)).prototype[key] === Map.prototype['entries']) {
                    _symbolIterator$2 = key;
                }
            }
        }
    }
    return _symbolIterator$2;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var Location = (function () {
    function Location(platformStrategy) {
        var _this = this;
        this._subject = new core.EventEmitter();
        this._platformStrategy = platformStrategy;
        var browserBaseHref = this._platformStrategy.getBaseHref();
        this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
        this._platformStrategy.onPopState(function (ev) {
            _this._subject.emit({
                'url': _this.path(true),
                'pop': true,
                'type': ev.type,
            });
        });
    }
    Location.prototype.path = function (includeHash) {
        if (includeHash === void 0) { includeHash = false; }
        return this.normalize(this._platformStrategy.path(includeHash));
    };
    Location.prototype.isCurrentPathEqualTo = function (path, query) {
        if (query === void 0) { query = ''; }
        return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
    };
    Location.prototype.normalize = function (url) {
        return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
    };
    Location.prototype.prepareExternalUrl = function (url) {
        if (url && url[0] !== '/') {
            url = '/' + url;
        }
        return this._platformStrategy.prepareExternalUrl(url);
    };
    Location.prototype.go = function (path, query) {
        if (query === void 0) { query = ''; }
        this._platformStrategy.pushState(null, '', path, query);
    };
    Location.prototype.replaceState = function (path, query) {
        if (query === void 0) { query = ''; }
        this._platformStrategy.replaceState(null, '', path, query);
    };
    Location.prototype.forward = function () { this._platformStrategy.forward(); };
    Location.prototype.back = function () { this._platformStrategy.back(); };
    Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
        if (onThrow === void 0) { onThrow = null; }
        if (onReturn === void 0) { onReturn = null; }
        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
    };
    Location.normalizeQueryParams = function (params) {
        return params && params[0] !== '?' ? '?' + params : params;
    };
    Location.joinWithSlash = function (start, end) {
        if (start.length == 0) {
            return end;
        }
        if (end.length == 0) {
            return start;
        }
        var /** @type {?} */ slashes = 0;
        if (start.endsWith('/')) {
            slashes++;
        }
        if (end.startsWith('/')) {
            slashes++;
        }
        if (slashes == 2) {
            return start + end.substring(1);
        }
        if (slashes == 1) {
            return start + end;
        }
        return start + '/' + end;
    };
    Location.stripTrailingSlash = function (url) { return url.replace(/\/$/, ''); };
    Location.decorators = [
        { type: core.Injectable },
    ];
    Location.ctorParameters = function () { return [
        { type: LocationStrategy, },
    ]; };
    return Location;
}());
function _stripBaseHref(baseHref, url) {
    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
}
function _stripIndexHtml(url) {
    return url.replace(/\/index.html$/, '');
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$60 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var HashLocationStrategy = (function (_super) {
    __extends$60(HashLocationStrategy, _super);
    function HashLocationStrategy(_platformLocation, _baseHref) {
        _super.call(this);
        this._platformLocation = _platformLocation;
        this._baseHref = '';
        if (isPresent$2(_baseHref)) {
            this._baseHref = _baseHref;
        }
    }
    HashLocationStrategy.prototype.onPopState = function (fn) {
        this._platformLocation.onPopState(fn);
        this._platformLocation.onHashChange(fn);
    };
    HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
    HashLocationStrategy.prototype.path = function (includeHash) {
        if (includeHash === void 0) { includeHash = false; }
        var /** @type {?} */ path = this._platformLocation.hash;
        if (!isPresent$2(path))
            path = '#';
        return path.length > 0 ? path.substring(1) : path;
    };
    HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
        var /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);
        return url.length > 0 ? ('#' + url) : url;
    };
    HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
        if (url.length == 0) {
            url = this._platformLocation.pathname;
        }
        this._platformLocation.pushState(state, title, url);
    };
    HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
        if (url.length == 0) {
            url = this._platformLocation.pathname;
        }
        this._platformLocation.replaceState(state, title, url);
    };
    HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
    HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
    HashLocationStrategy.decorators = [
        { type: core.Injectable },
    ];
    HashLocationStrategy.ctorParameters = function () { return [
        { type: PlatformLocation$1, },
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [APP_BASE_HREF,] },] },
    ]; };
    return HashLocationStrategy;
}(LocationStrategy));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$61 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var PathLocationStrategy = (function (_super) {
    __extends$61(PathLocationStrategy, _super);
    function PathLocationStrategy(_platformLocation, href) {
        _super.call(this);
        this._platformLocation = _platformLocation;
        if (isBlank$2(href)) {
            href = this._platformLocation.getBaseHrefFromDOM();
        }
        if (isBlank$2(href)) {
            throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
        }
        this._baseHref = href;
    }
    PathLocationStrategy.prototype.onPopState = function (fn) {
        this._platformLocation.onPopState(fn);
        this._platformLocation.onHashChange(fn);
    };
    PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
    PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
        return Location.joinWithSlash(this._baseHref, internal);
    };
    PathLocationStrategy.prototype.path = function (includeHash) {
        if (includeHash === void 0) { includeHash = false; }
        var /** @type {?} */ pathname = this._platformLocation.pathname +
            Location.normalizeQueryParams(this._platformLocation.search);
        var /** @type {?} */ hash = this._platformLocation.hash;
        return hash && includeHash ? "" + pathname + hash : pathname;
    };
    PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
        this._platformLocation.pushState(state, title, externalUrl);
    };
    PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
        this._platformLocation.replaceState(state, title, externalUrl);
    };
    PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
    PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
    PathLocationStrategy.decorators = [
        { type: core.Injectable },
    ];
    PathLocationStrategy.ctorParameters = function () { return [
        { type: PlatformLocation$1, },
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [APP_BASE_HREF,] },] },
    ]; };
    return PathLocationStrategy;
}(LocationStrategy));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$62 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var NgLocalization = (function () {
    function NgLocalization() {
    }
    NgLocalization.prototype.getPluralCategory = function (value) { };
    return NgLocalization;
}());
function getPluralCategory(value, cases, ngLocalization) {
    var /** @type {?} */ key = "=" + value;
    if (cases.indexOf(key) > -1) {
        return key;
    }
    key = ngLocalization.getPluralCategory(value);
    if (cases.indexOf(key) > -1) {
        return key;
    }
    if (cases.indexOf('other') > -1) {
        return 'other';
    }
    throw new Error("No plural message found for value \"" + value + "\"");
}
var NgLocaleLocalization = (function (_super) {
    __extends$62(NgLocaleLocalization, _super);
    function NgLocaleLocalization(_locale) {
        _super.call(this);
        this._locale = _locale;
    }
    NgLocaleLocalization.prototype.getPluralCategory = function (value) {
        var /** @type {?} */ plural = getPluralCase(this._locale, value);
        switch (plural) {
            case Plural.Zero:
                return 'zero';
            case Plural.One:
                return 'one';
            case Plural.Two:
                return 'two';
            case Plural.Few:
                return 'few';
            case Plural.Many:
                return 'many';
            default:
                return 'other';
        }
    };
    NgLocaleLocalization.decorators = [
        { type: core.Injectable },
    ];
    NgLocaleLocalization.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
    ]; };
    return NgLocaleLocalization;
}(NgLocalization));
var Plural = {};
Plural.Zero = 0;
Plural.One = 1;
Plural.Two = 2;
Plural.Few = 3;
Plural.Many = 4;
Plural.Other = 5;
Plural[Plural.Zero] = "Zero";
Plural[Plural.One] = "One";
Plural[Plural.Two] = "Two";
Plural[Plural.Few] = "Few";
Plural[Plural.Many] = "Many";
Plural[Plural.Other] = "Other";
function getPluralCase(locale, nLike) {
    if (typeof nLike === 'string') {
        nLike = parseInt(/** @type {?} */ (nLike), 10);
    }
    var /** @type {?} */ n = (nLike);
    var /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\.?/, '');
    var /** @type {?} */ i = Math.floor(Math.abs(n));
    var /** @type {?} */ v = nDecimal.length;
    var /** @type {?} */ f = parseInt(nDecimal, 10);
    var /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
    var /** @type {?} */ lang = locale.split('-')[0].toLowerCase();
    switch (lang) {
        case 'af':
        case 'asa':
        case 'az':
        case 'bem':
        case 'bez':
        case 'bg':
        case 'brx':
        case 'ce':
        case 'cgg':
        case 'chr':
        case 'ckb':
        case 'ee':
        case 'el':
        case 'eo':
        case 'es':
        case 'eu':
        case 'fo':
        case 'fur':
        case 'gsw':
        case 'ha':
        case 'haw':
        case 'hu':
        case 'jgo':
        case 'jmc':
        case 'ka':
        case 'kk':
        case 'kkj':
        case 'kl':
        case 'ks':
        case 'ksb':
        case 'ky':
        case 'lb':
        case 'lg':
        case 'mas':
        case 'mgo':
        case 'ml':
        case 'mn':
        case 'nb':
        case 'nd':
        case 'ne':
        case 'nn':
        case 'nnh':
        case 'nyn':
        case 'om':
        case 'or':
        case 'os':
        case 'ps':
        case 'rm':
        case 'rof':
        case 'rwk':
        case 'saq':
        case 'seh':
        case 'sn':
        case 'so':
        case 'sq':
        case 'ta':
        case 'te':
        case 'teo':
        case 'tk':
        case 'tr':
        case 'ug':
        case 'uz':
        case 'vo':
        case 'vun':
        case 'wae':
        case 'xog':
            if (n === 1)
                return Plural.One;
            return Plural.Other;
        case 'agq':
        case 'bas':
        case 'cu':
        case 'dav':
        case 'dje':
        case 'dua':
        case 'dyo':
        case 'ebu':
        case 'ewo':
        case 'guz':
        case 'kam':
        case 'khq':
        case 'ki':
        case 'kln':
        case 'kok':
        case 'ksf':
        case 'lrc':
        case 'lu':
        case 'luo':
        case 'luy':
        case 'mer':
        case 'mfe':
        case 'mgh':
        case 'mua':
        case 'mzn':
        case 'nmg':
        case 'nus':
        case 'qu':
        case 'rn':
        case 'rw':
        case 'sbp':
        case 'twq':
        case 'vai':
        case 'yav':
        case 'yue':
        case 'zgh':
        case 'ak':
        case 'ln':
        case 'mg':
        case 'pa':
        case 'ti':
            if (n === Math.floor(n) && n >= 0 && n <= 1)
                return Plural.One;
            return Plural.Other;
        case 'am':
        case 'as':
        case 'bn':
        case 'fa':
        case 'gu':
        case 'hi':
        case 'kn':
        case 'mr':
        case 'zu':
            if (i === 0 || n === 1)
                return Plural.One;
            return Plural.Other;
        case 'ar':
            if (n === 0)
                return Plural.Zero;
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
                return Plural.Few;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
                return Plural.Many;
            return Plural.Other;
        case 'ast':
        case 'ca':
        case 'de':
        case 'en':
        case 'et':
        case 'fi':
        case 'fy':
        case 'gl':
        case 'it':
        case 'nl':
        case 'sv':
        case 'sw':
        case 'ur':
        case 'yi':
            if (i === 1 && v === 0)
                return Plural.One;
            return Plural.Other;
        case 'be':
            if (n % 10 === 1 && !(n % 100 === 11))
                return Plural.One;
            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
                !(n % 100 >= 12 && n % 100 <= 14))
                return Plural.Few;
            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
                return Plural.Many;
            return Plural.Other;
        case 'br':
            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
                return Plural.One;
            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
                return Plural.Two;
            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
                    n % 100 >= 90 && n % 100 <= 99))
                return Plural.Few;
            if (!(n === 0) && n % 1e6 === 0)
                return Plural.Many;
            return Plural.Other;
        case 'bs':
        case 'hr':
        case 'sr':
            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
                return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                !(i % 100 >= 12 && i % 100 <= 14) ||
                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
                    !(f % 100 >= 12 && f % 100 <= 14))
                return Plural.Few;
            return Plural.Other;
        case 'cs':
        case 'sk':
            if (i === 1 && v === 0)
                return Plural.One;
            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
                return Plural.Few;
            if (!(v === 0))
                return Plural.Many;
            return Plural.Other;
        case 'cy':
            if (n === 0)
                return Plural.Zero;
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            if (n === 3)
                return Plural.Few;
            if (n === 6)
                return Plural.Many;
            return Plural.Other;
        case 'da':
            if (n === 1 || !(t === 0) && (i === 0 || i === 1))
                return Plural.One;
            return Plural.Other;
        case 'dsb':
        case 'hsb':
            if (v === 0 && i % 100 === 1 || f % 100 === 1)
                return Plural.One;
            if (v === 0 && i % 100 === 2 || f % 100 === 2)
                return Plural.Two;
            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
                return Plural.Few;
            return Plural.Other;
        case 'ff':
        case 'fr':
        case 'hy':
        case 'kab':
            if (i === 0 || i === 1)
                return Plural.One;
            return Plural.Other;
        case 'fil':
            if (v === 0 && (i === 1 || i === 2 || i === 3) ||
                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
                return Plural.One;
            return Plural.Other;
        case 'ga':
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            if (n === Math.floor(n) && n >= 3 && n <= 6)
                return Plural.Few;
            if (n === Math.floor(n) && n >= 7 && n <= 10)
                return Plural.Many;
            return Plural.Other;
        case 'gd':
            if (n === 1 || n === 11)
                return Plural.One;
            if (n === 2 || n === 12)
                return Plural.Two;
            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
                return Plural.Few;
            return Plural.Other;
        case 'gv':
            if (v === 0 && i % 10 === 1)
                return Plural.One;
            if (v === 0 && i % 10 === 2)
                return Plural.Two;
            if (v === 0 &&
                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
                return Plural.Few;
            if (!(v === 0))
                return Plural.Many;
            return Plural.Other;
        case 'he':
            if (i === 1 && v === 0)
                return Plural.One;
            if (i === 2 && v === 0)
                return Plural.Two;
            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
                return Plural.Many;
            return Plural.Other;
        case 'is':
            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
                return Plural.One;
            return Plural.Other;
        case 'ksh':
            if (n === 0)
                return Plural.Zero;
            if (n === 1)
                return Plural.One;
            return Plural.Other;
        case 'kw':
        case 'naq':
        case 'se':
        case 'smn':
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            return Plural.Other;
        case 'lag':
            if (n === 0)
                return Plural.Zero;
            if ((i === 0 || i === 1) && !(n === 0))
                return Plural.One;
            return Plural.Other;
        case 'lt':
            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
                return Plural.One;
            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
                !(n % 100 >= 11 && n % 100 <= 19))
                return Plural.Few;
            if (!(f === 0))
                return Plural.Many;
            return Plural.Other;
        case 'lv':
        case 'prg':
            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
                return Plural.Zero;
            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
                !(v === 2) && f % 10 === 1)
                return Plural.One;
            return Plural.Other;
        case 'mk':
            if (v === 0 && i % 10 === 1 || f % 10 === 1)
                return Plural.One;
            return Plural.Other;
        case 'mt':
            if (n === 1)
                return Plural.One;
            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
                return Plural.Few;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
                return Plural.Many;
            return Plural.Other;
        case 'pl':
            if (i === 1 && v === 0)
                return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                !(i % 100 >= 12 && i % 100 <= 14))
                return Plural.Few;
            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
                return Plural.Many;
            return Plural.Other;
        case 'pt':
            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
                return Plural.One;
            return Plural.Other;
        case 'ro':
            if (i === 1 && v === 0)
                return Plural.One;
            if (!(v === 0) || n === 0 ||
                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
                return Plural.Few;
            return Plural.Other;
        case 'ru':
        case 'uk':
            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
                return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                !(i % 100 >= 12 && i % 100 <= 14))
                return Plural.Few;
            if (v === 0 && i % 10 === 0 ||
                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
                return Plural.Many;
            return Plural.Other;
        case 'shi':
            if (i === 0 || n === 1)
                return Plural.One;
            if (n === Math.floor(n) && n >= 2 && n <= 10)
                return Plural.Few;
            return Plural.Other;
        case 'si':
            if (n === 0 || n === 1 || i === 0 && f === 1)
                return Plural.One;
            return Plural.Other;
        case 'sl':
            if (v === 0 && i % 100 === 1)
                return Plural.One;
            if (v === 0 && i % 100 === 2)
                return Plural.Two;
            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
                return Plural.Few;
            return Plural.Other;
        case 'tzm':
            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
                return Plural.One;
            return Plural.Other;
        default:
            return Plural.Other;
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


function isListLikeIterable$2(obj) {
    if (!isJsObject$2(obj))
        return false;
    return Array.isArray(obj) ||
        (!(obj instanceof Map) &&
            getSymbolIterator$2() in obj);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NgClass = (function () {
    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
        this._iterableDiffers = _iterableDiffers;
        this._keyValueDiffers = _keyValueDiffers;
        this._ngEl = _ngEl;
        this._renderer = _renderer;
        this._initialClasses = [];
    }
    Object.defineProperty(NgClass.prototype, "klass", {
        set: function (v) {
            this._applyInitialClasses(true);
            this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
            this._applyInitialClasses(false);
            this._applyClasses(this._rawClass, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgClass.prototype, "ngClass", {
        set: function (v) {
            this._cleanupClasses(this._rawClass);
            this._iterableDiffer = null;
            this._keyValueDiffer = null;
            this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
            if (this._rawClass) {
                if (isListLikeIterable$2(this._rawClass)) {
                    this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create(null);
                }
                else {
                    this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create(null);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    NgClass.prototype.ngDoCheck = function () {
        if (this._iterableDiffer) {
            var /** @type {?} */ changes = this._iterableDiffer.diff(this._rawClass);
            if (changes) {
                this._applyIterableChanges(changes);
            }
        }
        else if (this._keyValueDiffer) {
            var /** @type {?} */ changes = this._keyValueDiffer.diff(this._rawClass);
            if (changes) {
                this._applyKeyValueChanges(changes);
            }
        }
    };
    NgClass.prototype._cleanupClasses = function (rawClassVal) {
        this._applyClasses(rawClassVal, true);
        this._applyInitialClasses(false);
    };
    NgClass.prototype._applyKeyValueChanges = function (changes) {
        var _this = this;
        changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
        changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
        changes.forEachRemovedItem(function (record) {
            if (record.previousValue) {
                _this._toggleClass(record.key, false);
            }
        });
    };
    NgClass.prototype._applyIterableChanges = function (changes) {
        var _this = this;
        changes.forEachAddedItem(function (record) {
            if (typeof record.item === 'string') {
                _this._toggleClass(record.item, true);
            }
            else {
                throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify$2(record.item));
            }
        });
        changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
    };
    NgClass.prototype._applyInitialClasses = function (isCleanup) {
        var _this = this;
        this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
    };
    NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
        var _this = this;
        if (rawClassVal) {
            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                ((rawClassVal)).forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
            }
            else {
                Object.keys(rawClassVal).forEach(function (klass) {
                    if (rawClassVal[klass] != null)
                        _this._toggleClass(klass, !isCleanup);
                });
            }
        }
    };
    NgClass.prototype._toggleClass = function (klass, enabled) {
        var _this = this;
        klass = klass.trim();
        if (klass) {
            klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, enabled); });
        }
    };
    NgClass.decorators = [
        { type: core.Directive, args: [{ selector: '[ngClass]' },] },
    ];
    NgClass.ctorParameters = function () { return [
        { type: core.IterableDiffers, },
        { type: core.KeyValueDiffers, },
        { type: core.ElementRef, },
        { type: core.Renderer, },
    ]; };
    NgClass.propDecorators = {
        'klass': [{ type: core.Input, args: ['class',] },],
        'ngClass': [{ type: core.Input },],
    };
    return NgClass;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NgForRow = (function () {
    function NgForRow($implicit, index, count) {
        this.$implicit = $implicit;
        this.index = index;
        this.count = count;
    }
    Object.defineProperty(NgForRow.prototype, "first", {
        get: function () { return this.index === 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "last", {
        get: function () { return this.index === this.count - 1; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "even", {
        get: function () { return this.index % 2 === 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "odd", {
        get: function () { return !this.even; },
        enumerable: true,
        configurable: true
    });
    return NgForRow;
}());
var NgFor = (function () {
    function NgFor(_viewContainer, _template, _differs, _cdr) {
        this._viewContainer = _viewContainer;
        this._template = _template;
        this._differs = _differs;
        this._cdr = _cdr;
        this._differ = null;
    }
    Object.defineProperty(NgFor.prototype, "ngForTrackBy", {
        get: function () { return this._trackByFn; },
        set: function (fn) {
            if (core.isDevMode() && fn != null && typeof fn !== 'function') {
                if ((console) && (console.warn)) {
                    console.warn(("trackBy must be a function, but received " + JSON.stringify(fn) + ". ") +
                        "See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.");
                }
            }
            this._trackByFn = fn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgFor.prototype, "ngForTemplate", {
        set: function (value) {
            if (value) {
                this._template = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    NgFor.prototype.ngOnChanges = function (changes) {
        if ('ngForOf' in changes) {
            var /** @type {?} */ value = changes['ngForOf'].currentValue;
            if (!this._differ && value) {
                try {
                    this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy);
                }
                catch (e) {
                    throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging$2(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
                }
            }
        }
    };
    NgFor.prototype.ngDoCheck = function () {
        if (this._differ) {
            var /** @type {?} */ changes = this._differ.diff(this.ngForOf);
            if (changes)
                this._applyChanges(changes);
        }
    };
    NgFor.prototype._applyChanges = function (changes) {
        var _this = this;
        var /** @type {?} */ insertTuples = [];
        changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
            if (item.previousIndex == null) {
                var /** @type {?} */ view = _this._viewContainer.createEmbeddedView(_this._template, new NgForRow(null, null, null), currentIndex);
                var /** @type {?} */ tuple = new RecordViewTuple(item, view);
                insertTuples.push(tuple);
            }
            else if (currentIndex == null) {
                _this._viewContainer.remove(adjustedPreviousIndex);
            }
            else {
                var /** @type {?} */ view = _this._viewContainer.get(adjustedPreviousIndex);
                _this._viewContainer.move(view, currentIndex);
                var /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */ (view));
                insertTuples.push(tuple);
            }
        });
        for (var /** @type {?} */ i = 0; i < insertTuples.length; i++) {
            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
        }
        for (var /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {
            var /** @type {?} */ viewRef = (this._viewContainer.get(i));
            viewRef.context.index = i;
            viewRef.context.count = ilen;
        }
        changes.forEachIdentityChange(function (record) {
            var /** @type {?} */ viewRef = (_this._viewContainer.get(record.currentIndex));
            viewRef.context.$implicit = record.item;
        });
    };
    NgFor.prototype._perViewChange = function (view, record) {
        view.context.$implicit = record.item;
    };
    NgFor.decorators = [
        { type: core.Directive, args: [{ selector: '[ngFor][ngForOf]' },] },
    ];
    NgFor.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
        { type: core.TemplateRef, },
        { type: core.IterableDiffers, },
        { type: core.ChangeDetectorRef, },
    ]; };
    NgFor.propDecorators = {
        'ngForOf': [{ type: core.Input },],
        'ngForTrackBy': [{ type: core.Input },],
        'ngForTemplate': [{ type: core.Input },],
    };
    return NgFor;
}());
var RecordViewTuple = (function () {
    function RecordViewTuple(record, view) {
        this.record = record;
        this.view = view;
    }
    return RecordViewTuple;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NgIf = (function () {
    function NgIf(_viewContainer, _template) {
        this._viewContainer = _viewContainer;
        this._template = _template;
        this._hasView = false;
    }
    Object.defineProperty(NgIf.prototype, "ngIf", {
        set: function (condition) {
            if (condition && !this._hasView) {
                this._hasView = true;
                this._viewContainer.createEmbeddedView(this._template);
            }
            else if (!condition && this._hasView) {
                this._hasView = false;
                this._viewContainer.clear();
            }
        },
        enumerable: true,
        configurable: true
    });
    NgIf.decorators = [
        { type: core.Directive, args: [{ selector: '[ngIf]' },] },
    ];
    NgIf.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
        { type: core.TemplateRef, },
    ]; };
    NgIf.propDecorators = {
        'ngIf': [{ type: core.Input },],
    };
    return NgIf;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SwitchView = (function () {
    function SwitchView(_viewContainerRef, _templateRef) {
        this._viewContainerRef = _viewContainerRef;
        this._templateRef = _templateRef;
        this._created = false;
    }
    SwitchView.prototype.create = function () {
        this._created = true;
        this._viewContainerRef.createEmbeddedView(this._templateRef);
    };
    SwitchView.prototype.destroy = function () {
        this._created = false;
        this._viewContainerRef.clear();
    };
    SwitchView.prototype.enforceState = function (created) {
        if (created && !this._created) {
            this.create();
        }
        else if (!created && this._created) {
            this.destroy();
        }
    };
    return SwitchView;
}());
var NgSwitch = (function () {
    function NgSwitch() {
        this._defaultUsed = false;
        this._caseCount = 0;
        this._lastCaseCheckIndex = 0;
        this._lastCasesMatched = false;
    }
    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
        set: function (newValue) {
            this._ngSwitch = newValue;
            if (this._caseCount === 0) {
                this._updateDefaultCases(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    NgSwitch.prototype._addCase = function () { return this._caseCount++; };
    NgSwitch.prototype._addDefault = function (view) {
        if (!this._defaultViews) {
            this._defaultViews = [];
        }
        this._defaultViews.push(view);
    };
    NgSwitch.prototype._matchCase = function (value) {
        var /** @type {?} */ matched = value == this._ngSwitch;
        this._lastCasesMatched = this._lastCasesMatched || matched;
        this._lastCaseCheckIndex++;
        if (this._lastCaseCheckIndex === this._caseCount) {
            this._updateDefaultCases(!this._lastCasesMatched);
            this._lastCaseCheckIndex = 0;
            this._lastCasesMatched = false;
        }
        return matched;
    };
    NgSwitch.prototype._updateDefaultCases = function (useDefault) {
        if (this._defaultViews && useDefault !== this._defaultUsed) {
            this._defaultUsed = useDefault;
            for (var /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {
                var /** @type {?} */ defaultView = this._defaultViews[i];
                defaultView.enforceState(useDefault);
            }
        }
    };
    NgSwitch.decorators = [
        { type: core.Directive, args: [{ selector: '[ngSwitch]' },] },
    ];
    NgSwitch.ctorParameters = function () { return []; };
    NgSwitch.propDecorators = {
        'ngSwitch': [{ type: core.Input },],
    };
    return NgSwitch;
}());
var NgSwitchCase = (function () {
    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
        this.ngSwitch = ngSwitch;
        ngSwitch._addCase();
        this._view = new SwitchView(viewContainer, templateRef);
    }
    NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };
    NgSwitchCase.decorators = [
        { type: core.Directive, args: [{ selector: '[ngSwitchCase]' },] },
    ];
    NgSwitchCase.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
        { type: core.TemplateRef, },
        { type: NgSwitch, decorators: [{ type: core.Host },] },
    ]; };
    NgSwitchCase.propDecorators = {
        'ngSwitchCase': [{ type: core.Input },],
    };
    return NgSwitchCase;
}());
var NgSwitchDefault = (function () {
    function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
    }
    NgSwitchDefault.decorators = [
        { type: core.Directive, args: [{ selector: '[ngSwitchDefault]' },] },
    ];
    NgSwitchDefault.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
        { type: core.TemplateRef, },
        { type: NgSwitch, decorators: [{ type: core.Host },] },
    ]; };
    return NgSwitchDefault;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NgPlural = (function () {
    function NgPlural(_localization) {
        this._localization = _localization;
        this._caseViews = {};
    }
    Object.defineProperty(NgPlural.prototype, "ngPlural", {
        set: function (value) {
            this._switchValue = value;
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };
    NgPlural.prototype._updateView = function () {
        this._clearViews();
        var /** @type {?} */ cases = Object.keys(this._caseViews);
        var /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);
        this._activateView(this._caseViews[key]);
    };
    NgPlural.prototype._clearViews = function () {
        if (this._activeView)
            this._activeView.destroy();
    };
    NgPlural.prototype._activateView = function (view) {
        if (view) {
            this._activeView = view;
            this._activeView.create();
        }
    };
    NgPlural.decorators = [
        { type: core.Directive, args: [{ selector: '[ngPlural]' },] },
    ];
    NgPlural.ctorParameters = function () { return [
        { type: NgLocalization, },
    ]; };
    NgPlural.propDecorators = {
        'ngPlural': [{ type: core.Input },],
    };
    return NgPlural;
}());
var NgPluralCase = (function () {
    function NgPluralCase(value, template, viewContainer, ngPlural) {
        this.value = value;
        var isANumber = !isNaN(Number(value));
        ngPlural.addCase(isANumber ? "=" + value : value, new SwitchView(viewContainer, template));
    }
    NgPluralCase.decorators = [
        { type: core.Directive, args: [{ selector: '[ngPluralCase]' },] },
    ];
    NgPluralCase.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Attribute, args: ['ngPluralCase',] },] },
        { type: core.TemplateRef, },
        { type: core.ViewContainerRef, },
        { type: NgPlural, decorators: [{ type: core.Host },] },
    ]; };
    return NgPluralCase;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NgStyle = (function () {
    function NgStyle(_differs, _ngEl, _renderer) {
        this._differs = _differs;
        this._ngEl = _ngEl;
        this._renderer = _renderer;
    }
    Object.defineProperty(NgStyle.prototype, "ngStyle", {
        set: function (v) {
            this._ngStyle = v;
            if (!this._differ && v) {
                this._differ = this._differs.find(v).create(null);
            }
        },
        enumerable: true,
        configurable: true
    });
    NgStyle.prototype.ngDoCheck = function () {
        if (this._differ) {
            var /** @type {?} */ changes = this._differ.diff(this._ngStyle);
            if (changes) {
                this._applyChanges(changes);
            }
        }
    };
    NgStyle.prototype._applyChanges = function (changes) {
        var _this = this;
        changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
        changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
        changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
    };
    NgStyle.prototype._setStyle = function (nameAndUnit, value) {
        var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
        value = value && unit ? "" + value + unit : value;
        this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
    };
    NgStyle.decorators = [
        { type: core.Directive, args: [{ selector: '[ngStyle]' },] },
    ];
    NgStyle.ctorParameters = function () { return [
        { type: core.KeyValueDiffers, },
        { type: core.ElementRef, },
        { type: core.Renderer, },
    ]; };
    NgStyle.propDecorators = {
        'ngStyle': [{ type: core.Input },],
    };
    return NgStyle;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NgTemplateOutlet = (function () {
    function NgTemplateOutlet(_viewContainerRef) {
        this._viewContainerRef = _viewContainerRef;
    }
    Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
        set: function (context) { this._context = context; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
        set: function (templateRef) { this._templateRef = templateRef; },
        enumerable: true,
        configurable: true
    });
    NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
        if (this._viewRef) {
            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
        }
        if (this._templateRef) {
            this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
        }
    };
    NgTemplateOutlet.decorators = [
        { type: core.Directive, args: [{ selector: '[ngTemplateOutlet]' },] },
    ];
    NgTemplateOutlet.ctorParameters = function () { return [
        { type: core.ViewContainerRef, },
    ]; };
    NgTemplateOutlet.propDecorators = {
        'ngOutletContext': [{ type: core.Input },],
        'ngTemplateOutlet': [{ type: core.Input },],
    };
    return NgTemplateOutlet;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var COMMON_DIRECTIVES = [
    NgClass,
    NgFor,
    NgIf,
    NgTemplateOutlet,
    NgStyle,
    NgSwitch,
    NgSwitchCase,
    NgSwitchDefault,
    NgPlural,
    NgPluralCase,
];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var isPromise$3 = core.__core_private__.isPromise;
var isObservable$2 = core.__core_private__.isObservable;

var __extends$64 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

var BaseError$1 = (function (_super) {
    __extends$64(BaseError, _super);
    function BaseError(message) {
        _super.call(this, message);
        var nativeError = new Error(message);
        this._nativeError = nativeError;
    }
    Object.defineProperty(BaseError.prototype, "message", {
        get: function () { return this._nativeError.message; },
        set: function (message) { this._nativeError.message = message; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseError.prototype, "name", {
        get: function () { return this._nativeError.name; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseError.prototype, "stack", {
        get: function () { return ((this._nativeError)).stack; },
        set: function (value) { ((this._nativeError)).stack = value; },
        enumerable: true,
        configurable: true
    });
    BaseError.prototype.toString = function () { return this._nativeError.toString(); };
    return BaseError;
}(Error));
var WrappedError$1 = (function (_super) {
    __extends$64(WrappedError, _super);
    function WrappedError(message, error) {
        _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
        this.originalError = error;
    }
    Object.defineProperty(WrappedError.prototype, "stack", {
        get: function () {
            return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))
                .stack;
        },
        enumerable: true,
        configurable: true
    });
    return WrappedError;
}(BaseError$1));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$63 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var InvalidPipeArgumentError = (function (_super) {
    __extends$63(InvalidPipeArgumentError, _super);
    function InvalidPipeArgumentError(type, value) {
        _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify$2(type) + "'");
    }
    return InvalidPipeArgumentError;
}(BaseError$1));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ObservableStrategy = (function () {
    function ObservableStrategy() {
    }
    ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
        return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
    };
    ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };
    ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };
    return ObservableStrategy;
}());
var PromiseStrategy = (function () {
    function PromiseStrategy() {
    }
    PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
        return async.then(updateLatestValue, function (e) { throw e; });
    };
    PromiseStrategy.prototype.dispose = function (subscription) { };
    PromiseStrategy.prototype.onDestroy = function (subscription) { };
    return PromiseStrategy;
}());
var _promiseStrategy = new PromiseStrategy();
var _observableStrategy = new ObservableStrategy();
var AsyncPipe = (function () {
    function AsyncPipe(_ref) {
        this._ref = _ref;
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
        this._strategy = null;
    }
    AsyncPipe.prototype.ngOnDestroy = function () {
        if (this._subscription) {
            this._dispose();
        }
    };
    AsyncPipe.prototype.transform = function (obj) {
        if (!this._obj) {
            if (obj) {
                this._subscribe(obj);
            }
            this._latestReturnedValue = this._latestValue;
            return this._latestValue;
        }
        if (obj !== this._obj) {
            this._dispose();
            return this.transform(obj);
        }
        if (this._latestValue === this._latestReturnedValue) {
            return this._latestReturnedValue;
        }
        this._latestReturnedValue = this._latestValue;
        return core.WrappedValue.wrap(this._latestValue);
    };
    AsyncPipe.prototype._subscribe = function (obj) {
        var _this = this;
        this._obj = obj;
        this._strategy = this._selectStrategy(obj);
        this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
    };
    AsyncPipe.prototype._selectStrategy = function (obj) {
        if (isPromise$3(obj)) {
            return _promiseStrategy;
        }
        if (isObservable$2(obj)) {
            return _observableStrategy;
        }
        throw new InvalidPipeArgumentError(AsyncPipe, obj);
    };
    AsyncPipe.prototype._dispose = function () {
        this._strategy.dispose(this._subscription);
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
    };
    AsyncPipe.prototype._updateLatestValue = function (async, value) {
        if (async === this._obj) {
            this._latestValue = value;
            this._ref.markForCheck();
        }
    };
    AsyncPipe.decorators = [
        { type: core.Pipe, args: [{ name: 'async', pure: false },] },
    ];
    AsyncPipe.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef, },
    ]; };
    return AsyncPipe;
}());

var NumberFormatStyle = {};
NumberFormatStyle.Decimal = 0;
NumberFormatStyle.Percent = 1;
NumberFormatStyle.Currency = 2;
NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
var NumberFormatter = (function () {
    function NumberFormatter() {
    }
    NumberFormatter.format = function (num, locale, style, _a) {
        var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;
        var /** @type {?} */ options = {
            minimumIntegerDigits: minimumIntegerDigits,
            minimumFractionDigits: minimumFractionDigits,
            maximumFractionDigits: maximumFractionDigits,
            style: NumberFormatStyle[style].toLowerCase()
        };
        if (style == NumberFormatStyle.Currency) {
            options.currency = currency;
            options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
        }
        return new Intl.NumberFormat(locale, options).format(num);
    };
    return NumberFormatter;
}());
var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
var PATTERN_ALIASES = {
    'yMMMdjms': datePartGetterFactory(combine([
        digitCondition('year', 1),
        nameCondition('month', 3),
        digitCondition('day', 1),
        digitCondition('hour', 1),
        digitCondition('minute', 1),
        digitCondition('second', 1),
    ])),
    'yMdjm': datePartGetterFactory(combine([
        digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
        digitCondition('hour', 1), digitCondition('minute', 1)
    ])),
    'yMMMMEEEEd': datePartGetterFactory(combine([
        digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
        digitCondition('day', 1)
    ])),
    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
};
var DATE_FORMATS = {
    'yyyy': datePartGetterFactory(digitCondition('year', 4)),
    'yy': datePartGetterFactory(digitCondition('year', 2)),
    'y': datePartGetterFactory(digitCondition('year', 1)),
    'MMMM': datePartGetterFactory(nameCondition('month', 4)),
    'MMM': datePartGetterFactory(nameCondition('month', 3)),
    'MM': datePartGetterFactory(digitCondition('month', 2)),
    'M': datePartGetterFactory(digitCondition('month', 1)),
    'LLLL': datePartGetterFactory(nameCondition('month', 4)),
    'L': datePartGetterFactory(nameCondition('month', 1)),
    'dd': datePartGetterFactory(digitCondition('day', 2)),
    'd': datePartGetterFactory(digitCondition('day', 1)),
    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'jj': datePartGetterFactory(digitCondition('hour', 2)),
    'j': datePartGetterFactory(digitCondition('hour', 1)),
    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
    'm': datePartGetterFactory(digitCondition('minute', 1)),
    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
    's': datePartGetterFactory(digitCondition('second', 1)),
    'sss': datePartGetterFactory(digitCondition('second', 3)),
    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
    'EE': datePartGetterFactory(nameCondition('weekday', 2)),
    'E': datePartGetterFactory(nameCondition('weekday', 1)),
    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'Z': timeZoneGetter('short'),
    'z': timeZoneGetter('long'),
    'ww': datePartGetterFactory({}),
    'w': datePartGetterFactory({}),
    'G': datePartGetterFactory(nameCondition('era', 1)),
    'GG': datePartGetterFactory(nameCondition('era', 2)),
    'GGG': datePartGetterFactory(nameCondition('era', 3)),
    'GGGG': datePartGetterFactory(nameCondition('era', 4))
};
function digitModifier(inner) {
    return function (date, locale) {
        var /** @type {?} */ result = inner(date, locale);
        return result.length == 1 ? '0' + result : result;
    };
}
function hourClockExtractor(inner) {
    return function (date, locale) { return inner(date, locale).split(' ')[1]; };
}
function hourExtractor(inner) {
    return function (date, locale) { return inner(date, locale).split(' ')[0]; };
}
function intlDateFormat(date, locale, options) {
    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
}
function timeZoneGetter(timezone) {
    var /** @type {?} */ options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
    return function (date, locale) {
        var /** @type {?} */ result = intlDateFormat(date, locale, options);
        return result ? result.substring(3) : '';
    };
}
function hour12Modify(options, value) {
    options.hour12 = value;
    return options;
}
function digitCondition(prop, len) {
    var /** @type {?} */ result = {};
    result[prop] = len === 2 ? '2-digit' : 'numeric';
    return result;
}
function nameCondition(prop, len) {
    var /** @type {?} */ result = {};
    if (len < 4) {
        result[prop] = len > 1 ? 'short' : 'narrow';
    }
    else {
        result[prop] = 'long';
    }
    return result;
}
function combine(options) {
    return (_a = ((Object))).assign.apply(_a, [{}].concat(options));
    var _a;
}
function datePartGetterFactory(ret) {
    return function (date, locale) { return intlDateFormat(date, locale, ret); };
}
var DATE_FORMATTER_CACHE = new Map();
function dateFormatter(format, date, locale) {
    var /** @type {?} */ fn = PATTERN_ALIASES[format];
    if (fn)
        return fn(date, locale);
    var /** @type {?} */ cacheKey = format;
    var /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);
    if (!parts) {
        parts = [];
        var /** @type {?} */ match = void 0;
        DATE_FORMATS_SPLIT.exec(format);
        while (format) {
            match = DATE_FORMATS_SPLIT.exec(format);
            if (match) {
                parts = parts.concat(match.slice(1));
                format = parts.pop();
            }
            else {
                parts.push(format);
                format = null;
            }
        }
        DATE_FORMATTER_CACHE.set(cacheKey, parts);
    }
    return parts.reduce(function (text, part) {
        var /** @type {?} */ fn = DATE_FORMATS[part];
        return text + (fn ? fn(date, locale) : partToTime(part));
    }, '');
}
function partToTime(part) {
    return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
}
var DateFormatter = (function () {
    function DateFormatter() {
    }
    DateFormatter.format = function (date, locale, pattern) {
        return dateFormatter(pattern, date, locale);
    };
    return DateFormatter;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
var DatePipe = (function () {
    function DatePipe(_locale) {
        this._locale = _locale;
    }
    DatePipe.prototype.transform = function (value, pattern) {
        if (pattern === void 0) { pattern = 'mediumDate'; }
        var /** @type {?} */ date;
        if (isBlank$3(value) || value !== value)
            return null;
        if (typeof value === 'string') {
            value = value.trim();
        }
        if (isDate(value)) {
            date = value;
        }
        else if (NumberWrapper$2.isNumeric(value)) {
            date = new Date(parseFloat(value));
        }
        else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
            var _a = value.split('-').map(function (val) { return parseInt(val, 10); }), y = _a[0], m = _a[1], d = _a[2];
            date = new Date(y, m - 1, d);
        }
        else {
            date = new Date(value);
        }
        if (!isDate(date)) {
            var /** @type {?} */ match = void 0;
            if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {
                date = isoStringToDate(match);
            }
            else {
                throw new InvalidPipeArgumentError(DatePipe, value);
            }
        }
        return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
    };
    DatePipe._ALIASES = {
        'medium': 'yMMMdjms',
        'short': 'yMdjm',
        'fullDate': 'yMMMMEEEEd',
        'longDate': 'yMMMMd',
        'mediumDate': 'yMMMd',
        'shortDate': 'yMd',
        'mediumTime': 'jms',
        'shortTime': 'jm'
    };
    DatePipe.decorators = [
        { type: core.Pipe, args: [{ name: 'date', pure: true },] },
    ];
    DatePipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
    ]; };
    return DatePipe;
}());
function isBlank$3(obj) {
    return obj == null || obj === '';
}
function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
}
function isoStringToDate(match) {
    var /** @type {?} */ date = new Date(0);
    var /** @type {?} */ tzHour = 0;
    var /** @type {?} */ tzMin = 0;
    var /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
    var /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;
    if (match[9]) {
        tzHour = toInt(match[9] + match[10]);
        tzMin = toInt(match[9] + match[11]);
    }
    dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
    var /** @type {?} */ h = toInt(match[4] || '0') - tzHour;
    var /** @type {?} */ m = toInt(match[5] || '0') - tzMin;
    var /** @type {?} */ s = toInt(match[6] || '0');
    var /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
    timeSetter.call(date, h, m, s, ms);
    return date;
}
function toInt(str) {
    return parseInt(str, 10);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _INTERPOLATION_REGEXP = /#/g;
var I18nPluralPipe = (function () {
    function I18nPluralPipe(_localization) {
        this._localization = _localization;
    }
    I18nPluralPipe.prototype.transform = function (value, pluralMap) {
        if (value == null)
            return '';
        if (typeof pluralMap !== 'object' || pluralMap === null) {
            throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);
        }
        var /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
    };
    I18nPluralPipe.decorators = [
        { type: core.Pipe, args: [{ name: 'i18nPlural', pure: true },] },
    ];
    I18nPluralPipe.ctorParameters = function () { return [
        { type: NgLocalization, },
    ]; };
    return I18nPluralPipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var I18nSelectPipe = (function () {
    function I18nSelectPipe() {
    }
    I18nSelectPipe.prototype.transform = function (value, mapping) {
        if (value == null)
            return '';
        if (typeof mapping !== 'object' || typeof value !== 'string') {
            throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);
        }
        if (mapping.hasOwnProperty(value)) {
            return mapping[value];
        }
        if (mapping.hasOwnProperty('other')) {
            return mapping['other'];
        }
        return '';
    };
    I18nSelectPipe.decorators = [
        { type: core.Pipe, args: [{ name: 'i18nSelect', pure: true },] },
    ];
    I18nSelectPipe.ctorParameters = function () { return []; };
    return I18nSelectPipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var JsonPipe = (function () {
    function JsonPipe() {
    }
    JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2); };
    JsonPipe.decorators = [
        { type: core.Pipe, args: [{ name: 'json', pure: false },] },
    ];
    JsonPipe.ctorParameters = function () { return []; };
    return JsonPipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var LowerCasePipe = (function () {
    function LowerCasePipe() {
    }
    LowerCasePipe.prototype.transform = function (value) {
        if (isBlank$2(value))
            return value;
        if (typeof value !== 'string') {
            throw new InvalidPipeArgumentError(LowerCasePipe, value);
        }
        return value.toLowerCase();
    };
    LowerCasePipe.decorators = [
        { type: core.Pipe, args: [{ name: 'lowercase' },] },
    ];
    LowerCasePipe.ctorParameters = function () { return []; };
    return LowerCasePipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
    if (currency === void 0) { currency = null; }
    if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
    if (value == null)
        return null;
    value = typeof value === 'string' && NumberWrapper$2.isNumeric(value) ? +value : value;
    if (typeof value !== 'number') {
        throw new InvalidPipeArgumentError(pipe, value);
    }
    var /** @type {?} */ minInt;
    var /** @type {?} */ minFraction;
    var /** @type {?} */ maxFraction;
    if (style !== NumberFormatStyle.Currency) {
        minInt = 1;
        minFraction = 0;
        maxFraction = 3;
    }
    if (digits) {
        var /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);
        if (parts === null) {
            throw new Error(digits + " is not a valid digit info for number pipes");
        }
        if (parts[1] != null) {
            minInt = NumberWrapper$2.parseIntAutoRadix(parts[1]);
        }
        if (parts[3] != null) {
            minFraction = NumberWrapper$2.parseIntAutoRadix(parts[3]);
        }
        if (parts[5] != null) {
            maxFraction = NumberWrapper$2.parseIntAutoRadix(parts[5]);
        }
    }
    return NumberFormatter.format(/** @type {?} */ (value), locale, style, {
        minimumIntegerDigits: minInt,
        minimumFractionDigits: minFraction,
        maximumFractionDigits: maxFraction,
        currency: currency,
        currencyAsSymbol: currencyAsSymbol,
    });
}
var DecimalPipe = (function () {
    function DecimalPipe(_locale) {
        this._locale = _locale;
    }
    DecimalPipe.prototype.transform = function (value, digits) {
        if (digits === void 0) { digits = null; }
        return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
    };
    DecimalPipe.decorators = [
        { type: core.Pipe, args: [{ name: 'number' },] },
    ];
    DecimalPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
    ]; };
    return DecimalPipe;
}());
var PercentPipe = (function () {
    function PercentPipe(_locale) {
        this._locale = _locale;
    }
    PercentPipe.prototype.transform = function (value, digits) {
        if (digits === void 0) { digits = null; }
        return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
    };
    PercentPipe.decorators = [
        { type: core.Pipe, args: [{ name: 'percent' },] },
    ];
    PercentPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
    ]; };
    return PercentPipe;
}());
var CurrencyPipe = (function () {
    function CurrencyPipe(_locale) {
        this._locale = _locale;
    }
    CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
        if (currencyCode === void 0) { currencyCode = 'USD'; }
        if (symbolDisplay === void 0) { symbolDisplay = false; }
        if (digits === void 0) { digits = null; }
        return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
    };
    CurrencyPipe.decorators = [
        { type: core.Pipe, args: [{ name: 'currency' },] },
    ];
    CurrencyPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
    ]; };
    return CurrencyPipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SlicePipe = (function () {
    function SlicePipe() {
    }
    SlicePipe.prototype.transform = function (value, start, end) {
        if (value == null)
            return value;
        if (!this.supports(value)) {
            throw new InvalidPipeArgumentError(SlicePipe, value);
        }
        return value.slice(start, end);
    };
    SlicePipe.prototype.supports = function (obj) { return typeof obj === 'string' || Array.isArray(obj); };
    SlicePipe.decorators = [
        { type: core.Pipe, args: [{ name: 'slice', pure: false },] },
    ];
    SlicePipe.ctorParameters = function () { return []; };
    return SlicePipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var UpperCasePipe = (function () {
    function UpperCasePipe() {
    }
    UpperCasePipe.prototype.transform = function (value) {
        if (isBlank$2(value))
            return value;
        if (typeof value !== 'string') {
            throw new InvalidPipeArgumentError(UpperCasePipe, value);
        }
        return value.toUpperCase();
    };
    UpperCasePipe.decorators = [
        { type: core.Pipe, args: [{ name: 'uppercase' },] },
    ];
    UpperCasePipe.ctorParameters = function () { return []; };
    return UpperCasePipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var COMMON_PIPES = [
    AsyncPipe,
    UpperCasePipe,
    LowerCasePipe,
    JsonPipe,
    SlicePipe,
    DecimalPipe,
    PercentPipe,
    CurrencyPipe,
    DatePipe,
    I18nPluralPipe,
    I18nSelectPipe,
];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var CommonModule$1 = (function () {
    function CommonModule$$1() {
    }
    CommonModule$$1.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
                    exports: [COMMON_DIRECTIVES, COMMON_PIPES],
                    providers: [
                        { provide: NgLocalization, useClass: NgLocaleLocalization },
                    ],
                },] },
    ];
    CommonModule$$1.ctorParameters = function () { return []; };
    return CommonModule$$1;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var VERSION$3 = new core.Version('2.4.9');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */



var index$7 = Object.freeze({
	NgLocalization: NgLocalization,
	CommonModule: CommonModule$1,
	NgClass: NgClass,
	NgFor: NgFor,
	NgIf: NgIf,
	NgPlural: NgPlural,
	NgPluralCase: NgPluralCase,
	NgStyle: NgStyle,
	NgSwitch: NgSwitch,
	NgSwitchCase: NgSwitchCase,
	NgSwitchDefault: NgSwitchDefault,
	NgTemplateOutlet: NgTemplateOutlet,
	AsyncPipe: AsyncPipe,
	DatePipe: DatePipe,
	I18nPluralPipe: I18nPluralPipe,
	I18nSelectPipe: I18nSelectPipe,
	JsonPipe: JsonPipe,
	LowerCasePipe: LowerCasePipe,
	CurrencyPipe: CurrencyPipe,
	DecimalPipe: DecimalPipe,
	PercentPipe: PercentPipe,
	SlicePipe: SlicePipe,
	UpperCasePipe: UpperCasePipe,
	VERSION: VERSION$3,
	Version: core.Version,
	PlatformLocation: PlatformLocation$1,
	LocationStrategy: LocationStrategy,
	APP_BASE_HREF: APP_BASE_HREF,
	HashLocationStrategy: HashLocationStrategy,
	PathLocationStrategy: PathLocationStrategy,
	Location: Location
});

var common_1 = ( index$7 && undefined ) || index$7;

var Ng2AutoCompleteModule$1 = (function () {
    function Ng2AutoCompleteModule() {
    }
    Ng2AutoCompleteModule.forRoot = function () {
        return {
            ngModule: Ng2AutoCompleteModule,
            providers: [ng2AutoComplete.Ng2AutoComplete]
        };
    };
    Ng2AutoCompleteModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, forms_1.FormsModule],
                    declarations: [ng2AutoComplete_component.Ng2AutoCompleteComponent, ng2AutoComplete_directive.Ng2AutoCompleteDirective],
                    exports: [ng2AutoComplete_component.Ng2AutoCompleteComponent, ng2AutoComplete_directive.Ng2AutoCompleteDirective],
                    entryComponents: [ng2AutoComplete_component.Ng2AutoCompleteComponent]
                },] },
    ];
    Ng2AutoCompleteModule.ctorParameters = function () { return []; };
    return Ng2AutoCompleteModule;
}());
var Ng2AutoCompleteModule_1 = Ng2AutoCompleteModule$1;
var ng2AutoComplete_module = {
	Ng2AutoCompleteModule: Ng2AutoCompleteModule_1
};

var Ng2AutoComplete = ng2AutoComplete.Ng2AutoComplete;
var Ng2AutoCompleteModule = ng2AutoComplete_module.Ng2AutoCompleteModule;
var Ng2AutoCompleteComponent = ng2AutoComplete_component.Ng2AutoCompleteComponent;
var Ng2AutoCompleteDirective = ng2AutoComplete_directive.Ng2AutoCompleteDirective;
var index$2 = {
	Ng2AutoComplete: Ng2AutoComplete,
	Ng2AutoCompleteModule: Ng2AutoCompleteModule,
	Ng2AutoCompleteComponent: Ng2AutoCompleteComponent,
	Ng2AutoCompleteDirective: Ng2AutoCompleteDirective
};

var Ng2Datetime$1 = (function () {
    function Ng2Datetime() {
    }
    Ng2Datetime.formatDate = function (d, format, dateOnly) {
        var ret;
        if (d && !format) {
            var pad0 = function (number) { return ("0" + number).slice(-2); };
            ret = d.getFullYear() + '-' + pad0(d.getMonth() + 1) + '-' + pad0(d.getDate());
            ret += dateOnly ? '' : ' ' + pad0(d.getHours()) + ':' + pad0(d.getMinutes());
            return ret;
        }
        else if (d && moment) {
            return moment(d).format(format);
        }
        else {
            return '';
        }
    };
    Ng2Datetime.parseDate = function (dateStr, parseFormat, dateFormat) {
        if (typeof moment === 'undefined') {
            dateStr = Ng2Datetime.removeTimezone(dateStr);
            dateStr = dateStr + Ng2Datetime.addDSTOffset(dateStr);
            return Ng2Datetime.parseFromDefaultFormat(dateStr);
        }
        else if (dateFormat || parseFormat) {
            var formats = [];
            if (parseFormat) {
                formats.push(parseFormat);
            }
            if (dateFormat) {
                formats.push(dateFormat);
            }
            var m = moment(dateStr, formats);
            var date = m.toDate();
            if (!m.isValid()) {
                date = moment(dateStr, moment.ISO_8601).toDate();
            }
            return date;
        }
        else {
            var date = moment(dateStr, 'YYYY-MM-DD HH:mm').toDate();
            return date;
        }
    };
    Ng2Datetime.removeTimezone = function (dateStr) {
        var matches = dateStr.match(/[0-9]{2}:/);
        dateStr += matches ? '' : ' 00:00:00';
        return dateStr.replace(/([0-9]{2}-[0-9]{2})-([0-9]{4})/, '$2-$1')
            .replace(/([\/-][0-9]{2,4})\ ([0-9]{2}\:[0-9]{2}\:)/, '$1T$2')
            .replace(/EDT|EST|CDT|CST|MDT|PDT|PST|UT|GMT/g, '')
            .replace(/\s*\(\)\s*/, '')
            .replace(/[\-\+][0-9]{2}:?[0-9]{2}$/, '')
            .replace(/000Z$/, '00');
    };
    Ng2Datetime.addDSTOffset = function (dateStr) {
        var date = Ng2Datetime.parseFromDefaultFormat(dateStr);
        var jan = new Date(date.getFullYear(), 0, 1);
        var jul = new Date(date.getFullYear(), 6, 1);
        var stdTimezoneOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
        var isDST = date.getTimezoneOffset() < stdTimezoneOffset;
        var offset = isDST ? stdTimezoneOffset - 60 : stdTimezoneOffset;
        var diff = offset >= 0 ? '-' : '+';
        offset = Math.abs(offset);
        return diff +
            ('0' + (offset / 60)).slice(-2) + ':' +
            ('0' + (offset % 60)).slice(-2);
    };
    
    Ng2Datetime.parseFromDefaultFormat = function (dateStr) {
        var tmp = dateStr.split(/[\+\-:\ T]/);
        return new Date(parseInt(tmp[0], 10), parseInt(tmp[1], 10) - 1, parseInt(tmp[2], 10), parseInt(tmp[3] || '0', 10), parseInt(tmp[4] || '0', 10), parseInt(tmp[5] || '0', 10));
    };
    Ng2Datetime.prototype.getMonthData = function (year, month) {
        year = month > 11 ? year + 1 :
            month < 0 ? year - 1 : year;
        month = (month + 12) % 12;
        var firstDayOfMonth = new Date(year, month, 1);
        var lastDayOfMonth = new Date(year, month + 1, 0);
        var lastDayOfPreviousMonth = new Date(year, month, 0);
        var daysInMonth = lastDayOfMonth.getDate();
        var daysInLastMonth = lastDayOfPreviousMonth.getDate();
        var dayOfWeek = firstDayOfMonth.getDay();
        var leadingDays = (dayOfWeek - Ng2Datetime.firstDayOfWeek + 7) % 7 || 7;
        var trailingDays = Ng2Datetime.days.slice(0, 6 * 7 - (leadingDays + daysInMonth));
        if (trailingDays.length > 7) {
            trailingDays = trailingDays.slice(0, trailingDays.length - 7);
        }
        var localizedDaysOfWeek = Ng2Datetime.daysOfWeek
            .concat(Ng2Datetime.daysOfWeek)
            .splice(Ng2Datetime.firstDayOfWeek, 7);
        var monthData = {
            year: year,
            month: month,
            weekends: Ng2Datetime.weekends,
            firstDayOfWeek: Ng2Datetime.firstDayOfWeek,
            fullName: Ng2Datetime.months[month].fullName,
            shortName: Ng2Datetime.months[month].shortName,
            localizedDaysOfWeek: localizedDaysOfWeek,
            days: Ng2Datetime.days.slice(0, daysInMonth),
            leadingDays: Ng2Datetime.days.slice(-leadingDays - (31 - daysInLastMonth), daysInLastMonth),
            trailingDays: trailingDays
        };
        return monthData;
    };
    Ng2Datetime.days = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
    Ng2Datetime.weekends = [0, 6];
    Ng2Datetime.daysOfWeek = typeof moment === 'undefined' ? [
        { fullName: 'Sunday', shortName: 'Su' },
        { fullName: 'Monday', shortName: 'Mo' },
        { fullName: 'Tuesday', shortName: 'Tu' },
        { fullName: 'Wednesday', shortName: 'We' },
        { fullName: 'Thursday', shortName: 'Th' },
        { fullName: 'Friday', shortName: 'Fr' },
        { fullName: 'Saturday', shortName: 'Sa' }
    ] : moment.weekdays().map(function (el, index) {
        return {
            fullName: el,
            shortName: moment.weekdaysShort()[index].substr(0, 2)
        };
    });
    Ng2Datetime.firstDayOfWeek = typeof moment === 'undefined' ? 0 : moment.localeData().firstDayOfWeek();
    Ng2Datetime.months = typeof moment === 'undefined' ? [
        { fullName: 'January', shortName: 'Jan' },
        { fullName: 'February', shortName: 'Feb' },
        { fullName: 'March', shortName: 'Mar' },
        { fullName: 'April', shortName: 'Apr' },
        { fullName: 'May', shortName: 'May' },
        { fullName: 'June', shortName: 'Jun' },
        { fullName: 'July', shortName: 'Jul' },
        { fullName: 'August', shortName: 'Aug' },
        { fullName: 'September', shortName: 'Sep' },
        { fullName: 'October', shortName: 'Oct' },
        { fullName: 'November', shortName: 'Nov' },
        { fullName: 'December', shortName: 'Dec' }
    ] : moment.months().map(function (el, index) {
        return {
            fullName: el,
            shortName: moment['monthsShort']()[index]
        };
    });
    Ng2Datetime.decorators = [
        { type: core_1.Injectable },
    ];
    Ng2Datetime.ctorParameters = [];
    return Ng2Datetime;
}());
var Ng2Datetime_1 = Ng2Datetime$1;
var ng2Datetime = {
	Ng2Datetime: Ng2Datetime_1
};

var Ng2DatetimePickerComponent$1 = (function () {
    function Ng2DatetimePickerComponent(elementRef, ng2Datetime$$1, cdRef) {
        this.ng2Datetime = ng2Datetime$$1;
        this.cdRef = cdRef;
        this.minuteStep = 1;
        this.selected$ = new core_1.EventEmitter();
        this.closing$ = new core_1.EventEmitter();
        this.el = elementRef.nativeElement;
    }
    Object.defineProperty(Ng2DatetimePickerComponent.prototype, "year", {
        get: function () {
            return this.selectedDate.getFullYear();
        },
        set: function (year) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ng2DatetimePickerComponent.prototype, "month", {
        get: function () {
            return this.selectedDate.getMonth();
        },
        set: function (month) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ng2DatetimePickerComponent.prototype, "day", {
        get: function () {
            return this.selectedDate.getDate();
        },
        set: function (day) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ng2DatetimePickerComponent.prototype, "today", {
        get: function () {
            var dt = new Date();
            dt.setHours(0);
            dt.setMinutes(0);
            dt.setSeconds(0);
            dt.setMilliseconds(0);
            return dt;
        },
        set: function (today) { },
        enumerable: true,
        configurable: true
    });
    Ng2DatetimePickerComponent.prototype.isWeekend = function (dayNum, month) {
        if (typeof month === 'undefined') {
            return ng2Datetime.Ng2Datetime.weekends.indexOf(dayNum % 7) !== -1;
        }
        else {
            var weekday = this.toDate(dayNum, month).getDay();
            return ng2Datetime.Ng2Datetime.weekends.indexOf(weekday) !== -1;
        }
    };
    Ng2DatetimePickerComponent.prototype.ngOnInit = function () {
        this.selectedDate = this.defaultValue || new Date();
        if (typeof moment === 'undefined') {
            this.hour = this.selectedDate.getHours();
            this.minute = this.selectedDate.getMinutes();
        }
        else {
            var m = moment(this.selectedDate);
            this.hour = m.hours();
            this.minute = m.minute();
        }
        this.monthData = this.ng2Datetime.getMonthData(this.year, this.month);
    };
    Ng2DatetimePickerComponent.prototype.toDate = function (day, month) {
        return new Date(this.monthData.year, month || this.monthData.month, day);
    };
    Ng2DatetimePickerComponent.prototype.toDateOnly = function (date) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0);
    };
    Ng2DatetimePickerComponent.prototype.selectCurrentTime = function () {
        this.hour = (new Date()).getHours();
        this.minute = (new Date()).getMinutes();
        this.selectDateTime();
    };
    Ng2DatetimePickerComponent.prototype.selectDateTime = function (date) {
        var _this = this;
        this.selectedDate = date || this.selectedDate;
        if (this.isDateDisabled(this.selectedDate)) {
            return false;
        }
        var hour = parseInt('' + this.hour || '0', 10);
        var minute = parseInt('' + this.minute || '0', 10);
        if (typeof moment !== 'undefined') {
            var m = moment([this.selectedDate.getFullYear(), this.selectedDate.getMonth(), this.selectedDate.getDate()]);
            m.hours(hour);
            m.minutes(minute);
            this.selectedDate = m.toDate();
        }
        else {
            this.selectedDate.setHours(hour);
            this.selectedDate.setMinutes(minute);
        }
        this.selectedDate.toString = function () {
            return ng2Datetime.Ng2Datetime.formatDate(_this.selectedDate, _this.dateFormat, _this.dateOnly);
        };
        this.selected$.emit(this.selectedDate);
    };
    
    Ng2DatetimePickerComponent.prototype.updateMonthData = function (num) {
        this.monthData = this.ng2Datetime.getMonthData(this.monthData.year, this.monthData.month + num);
    };
    Ng2DatetimePickerComponent.prototype.isDateDisabled = function (date) {
        var dateInTime = date.getTime();
        this.disabledDatesInTime =
            this.disabledDatesInTime || (this.disabledDates || []).map(function (d) { return d.getTime(); });
        if (this.minDate && (dateInTime < this.minDate.getTime())) {
            return true;
        }
        else if (this.maxDate && (dateInTime > this.maxDate.getTime())) {
            return true;
        }
        else if (this.disabledDatesInTime.indexOf(dateInTime) >= 0) {
            return true;
        }
        return false;
    };
    Ng2DatetimePickerComponent.prototype.close = function () {
        this.closing$.emit(true);
    };
    Ng2DatetimePickerComponent.decorators = [
        { type: core_1.Component, args: [{
                    providers: [ng2Datetime.Ng2Datetime],
                    selector: 'ng2-datetime-picker',
                    template: "\n<div class=\"ng2-datetime-picker\">\n  <div class=\"close-button\" *ngIf=\"showCloseButton\" (click)=\"close()\"></div>\n  \n  <!-- Month - Year  -->\n  <div class=\"month\" *ngIf=\"!timeOnly\">\n    <b class=\"prev_next prev\" (click)=\"updateMonthData(-12)\">&laquo;</b>\n    <b class=\"prev_next prev\" (click)=\"updateMonthData(-1)\">&lsaquo;</b>\n     <span title=\"{{monthData?.fullName}}\">\n           {{monthData?.shortName}}\n     </span>\n    {{monthData.year}}\n    <b class=\"prev_next next\" (click)=\"updateMonthData(+12)\">&raquo;</b>\n    <b class=\"prev_next next\" (click)=\"updateMonthData(+1)\">&rsaquo;</b>\n  </div>\n\n  <!-- Date -->\n  <div class=\"days\" *ngIf=\"!timeOnly\">\n\n    <!-- Su Mo Tu We Th Fr Sa -->\n    <div class=\"day-of-week\"\n         *ngFor=\"let dayOfWeek of monthData.localizedDaysOfWeek; let ndx=index\"\n         [class.weekend]=\"isWeekend(ndx + monthData.firstDayOfWeek)\"\n         title=\"{{dayOfWeek.fullName}}\">\n      {{dayOfWeek.shortName}}\n    </div>\n\n    <!-- Fill up blank days for this month -->\n    <div *ngIf=\"monthData.leadingDays.length < 7\">\n      <div class=\"day\"\n          (click)=\"updateMonthData(-1)\"\n           *ngFor=\"let dayNum of monthData.leadingDays\">\n        {{dayNum}}\n      </div>\n    </div>\n\n    <div class=\"day\"\n         *ngFor=\"let dayNum of monthData.days\"\n         (click)=\"selectDateTime(toDate(dayNum))\"\n         title=\"{{monthData.year}}-{{monthData.month+1}}-{{dayNum}}\"\n         [ngClass]=\"{\n           selectable: !isDateDisabled(toDate(dayNum)),\n           selected: toDate(dayNum).getTime() === toDateOnly(selectedDate).getTime(),\n           today: toDate(dayNum).getTime() === today.getTime(),\n           weekend: isWeekend(dayNum, monthData.month)\n         }\">\n      {{dayNum}}\n    </div>\n\n    <!-- Fill up blank days for this month -->\n    <div *ngIf=\"monthData.trailingDays.length < 7\">\n      <div class=\"day\"\n           (click)=\"updateMonthData(+1)\"\n           *ngFor=\"let dayNum of monthData.trailingDays\">\n        {{dayNum}}\n      </div>\n    </div>\n  </div>\n\n  <!-- Time -->\n  <div class=\"time\" id=\"time\" *ngIf=\"!dateOnly\">\n    <div class=\"select-current-time\" (click)=\"selectCurrentTime()\"></div>\n    <label class=\"timeLabel\">Time:</label>\n    <span class=\"timeValue\">\n      {{(\"0\"+hour).slice(-2)}} : {{(\"0\"+minute).slice(-2)}}\n    </span><br/>\n    <label class=\"hourLabel\">Hour:</label>\n    <input #hours class=\"hourInput\"\n           tabindex=\"90000\"\n           (change)=\"selectDateTime()\"\n           type=\"range\"\n           min=\"{{minHour || 0}}\"\n           max=\"{{maxHour || 23}}\"\n           [(ngModel)]=\"hour\" />\n    <label class=\"minutesLabel\">Min:</label>\n    <input #minutes class=\"minutesInput\"\n           tabindex=\"90000\"\n           step=\"{{minuteStep}}\"\n           (change)=\"selectDateTime()\"\n           type=\"range\" min=\"0\" max=\"59\" range=\"10\" [(ngModel)]=\"minute\"/>\n  </div>\n</div>\n  ",
                    styles: [
                        "\n @keyframes slideDown {\n  0% {\n    transform:  translateY(-10px);\n  }\n  100% {\n    transform: translateY(0px);\n  }\n}\n\n.ng2-datetime-picker-wrapper {\n  position: relative;\n}\n\n.ng2-datetime-picker {\n  color: #333;\n  outline-width: 0;\n  font: normal 14px sans-serif;\n  border: 1px solid #ddd;\n  display: inline-block;\n  background: #fff;\n  animation: slideDown 0.1s ease-in-out;\n  animation-fill-mode: both;\n}\n.ng2-datetime-picker .close-button:before {\n  content: 'X';\n  position: absolute;\n  padding: 0 5px;\n  cursor: pointer;\n  color: #ff0000;\n  right: 0;\n  z-index: 1;\n}\n.ng2-datetime-picker > .month {\n  text-align: center;\n  line-height: 22px;\n  padding: 10px;\n  background: #fcfcfc;\n  text-transform: uppercase;\n  font-weight: bold;\n  border-bottom: 1px solid #ddd;\n  position: relative;\n}\n.ng2-datetime-picker > .month > .prev_next {\n  color: #555;\n  display: block;\n  font: normal 24px sans-serif;\n  outline: none;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  width: 15px;\n  text-align: center;\n}\n.ng2-datetime-picker > .month > .prev_next:hover {\n  background-color: #333;\n  color: #fff;\n}\n.ng2-datetime-picker > .month > .prev_next.prev {\n  float: left;\n}\n.ng2-datetime-picker > .month > .prev_next.next {\n  float: right;\n}\n.ng2-datetime-picker > .days {\n  width: 210px; /* 30 x 7 */\n  margin: 10px;\n  text-align: center;\n}\n.ng2-datetime-picker > .days .day-of-week,\n.ng2-datetime-picker > .days .day {\n  box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  border: 1px solid transparent;\n  width: 30px;\n  line-height: 28px;\n  float: left;\n}\n.ng2-datetime-picker > .days .day-of-week {\n  font-weight: bold;\n}\n.ng2-datetime-picker > .days .day-of-week.weekend {\n  color: #ccc;\n  background-color: inherit;\n}\n.ng2-datetime-picker > .days .day:not(.selectable) {\n  color: #ccc;\n  cursor: default;\n}\n.ng2-datetime-picker > .days .weekend {\n  color: #ccc;\n  background-color: #eee;\n}\n.ng2-datetime-picker > .days .day.selectable  {\n  cursor: pointer;\n}\n.ng2-datetime-picker > .days .day.selected {\n  background: gray;\n  color: #fff;\n}\n.ng2-datetime-picker > .days .day:not(.selected).selectable:hover {\n  background: #eee;\n}\n.ng2-datetime-picker > .days:after {\n  content: '';\n  display: block;\n  clear: left;\n  height: 0;\n}\n.ng2-datetime-picker .time {\n  position: relative;\n}\n.ng2-datetime-picker .select-current-time:before {\n  content: 'current time';\n  position: absolute;\n  top: 1em;\n  right: 5px;\n  z-index: 1;\n  cursor: pointer;\n  color: #0000ff;\n}\n.ng2-datetime-picker .hourLabel,\n.ng2-datetime-picker .minutesLabel {\n  display: inline-block;\n  width: 40px;\n  text-align: right;\n}\n.ng2-datetime-picker input[type=range] {\n  width: 200px;\n}\n  "
                    ],
                    encapsulation: core_1.ViewEncapsulation.None
                },] },
    ];
    Ng2DatetimePickerComponent.ctorParameters = [
        { type: core_1.ElementRef, },
        { type: ng2Datetime.Ng2Datetime, },
        { type: core_1.ChangeDetectorRef, },
    ];
    Ng2DatetimePickerComponent.propDecorators = {
        'dateFormat': [{ type: core_1.Input, args: ['date-format',] },],
        'dateOnly': [{ type: core_1.Input, args: ['date-only',] },],
        'timeOnly': [{ type: core_1.Input, args: ['time-only',] },],
        'selectedDate': [{ type: core_1.Input, args: ['selected-date',] },],
        'hour': [{ type: core_1.Input, args: ['hour',] },],
        'minute': [{ type: core_1.Input, args: ['minute',] },],
        'minuteStep': [{ type: core_1.Input, args: ['minuteStep',] },],
        'defaultValue': [{ type: core_1.Input, args: ['default-value',] },],
        'minDate': [{ type: core_1.Input, args: ['min-date',] },],
        'maxDate': [{ type: core_1.Input, args: ['max-date',] },],
        'minHour': [{ type: core_1.Input, args: ['min-hour',] },],
        'maxHour': [{ type: core_1.Input, args: ['max-hour',] },],
        'disabledDates': [{ type: core_1.Input, args: ['disabled-dates',] },],
        'showCloseButton': [{ type: core_1.Input, args: ['show-close-button',] },],
        'selected$': [{ type: core_1.Output, args: ['selected$',] },],
        'closing$': [{ type: core_1.Output, args: ['closing$',] },],
        'hours': [{ type: core_1.ViewChild, args: ['hours',] },],
        'minutes': [{ type: core_1.ViewChild, args: ['minutes',] },],
    };
    return Ng2DatetimePickerComponent;
}());
var Ng2DatetimePickerComponent_1 = Ng2DatetimePickerComponent$1;
var ng2DatetimePicker_component = {
	Ng2DatetimePickerComponent: Ng2DatetimePickerComponent_1
};

Number.isInteger = Number.isInteger || function (value) {
    return typeof value === "number" &&
        isFinite(value) &&
        Math.floor(value) === value;
};
Number.isNaN = Number.isNaN || function (value) {
    return value !== value;
};
var Ng2DatetimePickerDirective$1 = (function () {
    function Ng2DatetimePickerDirective(resolver, viewContainerRef, parent) {
        var _this = this;
        this.resolver = resolver;
        this.viewContainerRef = viewContainerRef;
        this.parent = parent;
        this.ngModelChange = new core_1.EventEmitter();
        this.valueChanged = new core_1.EventEmitter();
        this.inputElValueChanged = function (date) {
            _this.setInputElDateValue(date);
            _this.el.value = date.toString();
            if (_this.ctrl) {
                _this.ctrl.patchValue(_this.el.value);
            }
            _this.ngModel = _this.el['dateValue'];
            if (_this.ngModel) {
                _this.ngModel.toString = function () { return _this.el.value; };
                _this.ngModelChange.emit(_this.ngModel);
            }
        };
        this.showDatetimePicker = function (event) {
            if (_this.componentRef) {
                return;
            }
            var factory = _this.resolver.resolveComponentFactory(ng2DatetimePicker_component.Ng2DatetimePickerComponent);
            _this.componentRef = _this.viewContainerRef.createComponent(factory);
            _this.ng2DatetimePickerEl = _this.componentRef.location.nativeElement;
            _this.ng2DatetimePickerEl.addEventListener('mousedown', function (event) {
                _this.clickedDatetimePicker = true;
            });
            _this.ng2DatetimePickerEl.addEventListener('mouseup', function (event) {
                _this.clickedDatetimePicker = false;
            });
            var component = _this.componentRef.instance;
            component.defaultValue = _this.defaultValue || _this.el['dateValue'];
            component.dateFormat = _this.dateFormat;
            component.dateOnly = _this.dateOnly;
            component.timeOnly = _this.timeOnly;
            component.minuteStep = _this.minuteStep;
            component.minDate = _this.minDate;
            component.maxDate = _this.maxDate;
            component.minHour = _this.minHour;
            component.maxHour = _this.maxHour;
            component.disabledDates = _this.disabledDates;
            component.showCloseButton = _this.closeOnSelect === "false";
            _this.styleDatetimePicker();
            component.selected$.subscribe(_this.dateSelected);
            component.closing$.subscribe(function () {
                _this.hideDatetimePicker();
            });
        };
        this.dateSelected = function (date) {
            _this.el.tagName === 'INPUT' && _this.inputElValueChanged(date);
            _this.valueChanged.emit(date);
            _this.closeOnSelect !== "false" && _this.hideDatetimePicker();
        };
        this.hideDatetimePicker = function (event) {
            if (_this.clickedDatetimePicker) {
                return false;
            }
            else {
                _this.componentRef.destroy();
                _this.componentRef = undefined;
            }
            event && event.stopPropagation();
        };
        this.keyEventListener = function (e) {
        };
        this.el = this.viewContainerRef.element.nativeElement;
    }
    Ng2DatetimePickerDirective.prototype.normalizeInput = function () {
        if (this.defaultValue && typeof this.defaultValue === 'string') {
            var d = ng2Datetime.Ng2Datetime.parseDate(this.defaultValue);
            this.defaultValue = Number.isNaN(d.getTime()) ? new Date() : d;
        }
        if (this.minDate && typeof this.minDate == 'string') {
            var d = ng2Datetime.Ng2Datetime.parseDate(this.minDate);
            this.minDate = Number.isNaN(d.getTime()) ? new Date() : d;
        }
        if (this.maxDate && typeof this.maxDate == 'string') {
            var d = ng2Datetime.Ng2Datetime.parseDate(this.minDate);
            this.maxDate = Number.isNaN(d.getTime()) ? new Date() : d;
        }
        if (this.minHour) {
            if (this.minHour instanceof Date) {
                this.minHour = this.minHour.getHours();
            }
            else {
                var hour = Number(this.minHour.toString());
                if (!Number.isInteger(hour) || hour > 23 || hour < 0) {
                    this.minHour = undefined;
                }
            }
        }
        if (this.maxHour) {
            if (this.maxHour instanceof Date) {
                this.maxHour = this.maxHour.getHours();
            }
            else {
                var hour = Number(this.maxHour.toString());
                if (!Number.isInteger(hour) || hour > 23 || hour < 0) {
                    this.maxHour = undefined;
                }
            }
        }
    };
    Ng2DatetimePickerDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (this.parent && this.formControlName) {
            if (this.parent["form"]) {
                this.ctrl = this.parent["form"].get(this.formControlName);
            }
            else if (this.parent["name"]) {
                var formDir = this.parent.formDirective;
                if (formDir instanceof forms_1.FormGroupDirective && formDir.form.get(this.parent["name"])) {
                    this.ctrl = formDir.form.get(this.parent["name"]).get(this.formControlName);
                }
            }
            if (this.ctrl) {
                this.sub = this.ctrl.valueChanges.subscribe(function (date) {
                    _this.setInputElDateValue(date);
                    _this.updateDatepicker();
                });
            }
        }
        this.normalizeInput();
        var wrapper = document.createElement("div");
        wrapper.className = 'ng2-datetime-picker-wrapper';
        this.el.parentElement.insertBefore(wrapper, this.el.nextSibling);
        wrapper.appendChild(this.el);
        if (this.ngModel && this.ngModel.getTime) {
            this.ngModel.toString = function () { return ng2Datetime.Ng2Datetime.formatDate(_this.ngModel, _this.dateFormat, _this.dateOnly); };
        }
        setTimeout(function () {
            if (_this.el.tagName === 'INPUT') {
                _this.inputElValueChanged(_this.el.value);
            }
            if (_this.ctrl) {
                _this.ctrl.markAsPristine();
            }
        });
    };
    Ng2DatetimePickerDirective.prototype.ngAfterViewInit = function () {
        this.inputEl = this.el.tagName === "INPUT" ?
            this.el : this.el.querySelector("input");
        if (this.inputEl) {
            this.inputEl.addEventListener('focus', this.showDatetimePicker);
            this.inputEl.addEventListener('blur', this.hideDatetimePicker);
        }
    };
    Ng2DatetimePickerDirective.prototype.ngOnChanges = function (changes) {
        var date;
        if (changes && changes['ngModel']) {
            date = changes['ngModel'].currentValue;
        }
        this.setInputElDateValue(date);
        this.updateDatepicker();
    };
    Ng2DatetimePickerDirective.prototype.updateDatepicker = function () {
        if (this.componentRef) {
            var component = this.componentRef.instance;
            component.defaultValue = this.el['dateValue'];
        }
    };
    Ng2DatetimePickerDirective.prototype.setInputElDateValue = function (date) {
        if (typeof date === 'string' && date) {
            this.el['dateValue'] = this.getDate(date);
        }
        else if (typeof date === 'object') {
            this.el['dateValue'] = date;
        }
        else if (typeof date === 'undefined') {
            this.el['dateValue'] = null;
        }
        if (this.ctrl) {
            this.ctrl.markAsDirty();
        }
    };
    Ng2DatetimePickerDirective.prototype.ngOnDestroy = function () {
        if (this.sub) {
            this.sub.unsubscribe();
        }
    };
    Ng2DatetimePickerDirective.prototype.elementIn = function (el, containerEl) {
        while (el = el.parentNode) {
            if (el === containerEl)
                return true;
        }
        return false;
    };
    Ng2DatetimePickerDirective.prototype.styleDatetimePicker = function () {
        var _this = this;
        var thisElBCR = this.el.getBoundingClientRect();
        this.ng2DatetimePickerEl.style.width = thisElBCR.width + 'px';
        this.ng2DatetimePickerEl.style.position = 'absolute';
        this.ng2DatetimePickerEl.style.zIndex = '1000';
        this.ng2DatetimePickerEl.style.left = '0';
        this.ng2DatetimePickerEl.style.transition = 'height 0.3s ease-in';
        this.ng2DatetimePickerEl.style.visibility = 'hidden';
        setTimeout(function () {
            var thisElBcr = _this.el.getBoundingClientRect();
            var ng2DatetimePickerElBcr = _this.ng2DatetimePickerEl.getBoundingClientRect();
            if (thisElBcr.bottom + ng2DatetimePickerElBcr.height > window.innerHeight) {
                _this.ng2DatetimePickerEl.style.bottom =
                    (thisElBcr.bottom - window.innerHeight + 15) + 'px';
            }
            else {
                _this.ng2DatetimePickerEl.style.top = thisElBcr.height + 'px';
            }
            _this.ng2DatetimePickerEl.style.visibility = 'visible';
        });
    };
    
    Ng2DatetimePickerDirective.prototype.getDate = function (arg) {
        var date = arg;
        if (typeof arg === 'string') {
            date = ng2Datetime.Ng2Datetime.parseDate(arg, this.parseFormat, this.dateFormat);
        }
        return date;
    };
    Ng2DatetimePickerDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[ng2-datetime-picker]',
                    providers: [ng2Datetime.Ng2Datetime]
                },] },
    ];
    Ng2DatetimePickerDirective.ctorParameters = [
        { type: core_1.ComponentFactoryResolver, },
        { type: core_1.ViewContainerRef, },
        { type: forms_1.ControlContainer, decorators: [{ type: core_1.Optional }, { type: core_1.Host }, { type: core_1.SkipSelf },] },
    ];
    Ng2DatetimePickerDirective.propDecorators = {
        'dateFormat': [{ type: core_1.Input, args: ['date-format',] },],
        'parseFormat': [{ type: core_1.Input, args: ['parse-format',] },],
        'dateOnly': [{ type: core_1.Input, args: ['date-only',] },],
        'timeOnly': [{ type: core_1.Input, args: ['time-only',] },],
        'closeOnSelect': [{ type: core_1.Input, args: ['close-on-select',] },],
        'defaultValue': [{ type: core_1.Input, args: ['default-value',] },],
        'minuteStep': [{ type: core_1.Input, args: ['minute-step',] },],
        'minDate': [{ type: core_1.Input, args: ['min-date',] },],
        'maxDate': [{ type: core_1.Input, args: ['max-date',] },],
        'minHour': [{ type: core_1.Input, args: ['min-hour',] },],
        'maxHour': [{ type: core_1.Input, args: ['max-hour',] },],
        'disabledDates': [{ type: core_1.Input, args: ['disabled-dates',] },],
        'formControlName': [{ type: core_1.Input },],
        'ngModel': [{ type: core_1.Input, args: ['ngModel',] },],
        'ngModelChange': [{ type: core_1.Output, args: ['ngModelChange',] },],
        'valueChanged': [{ type: core_1.Output, args: ['valueChanged',] },],
    };
    return Ng2DatetimePickerDirective;
}());
var Ng2DatetimePickerDirective_1 = Ng2DatetimePickerDirective$1;
var ng2DatetimePicker_directive = {
	Ng2DatetimePickerDirective: Ng2DatetimePickerDirective_1
};

var Ng2DatetimePickerModule$1 = (function () {
    function Ng2DatetimePickerModule() {
    }
    Ng2DatetimePickerModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule, forms_1.FormsModule],
                    declarations: [ng2DatetimePicker_component.Ng2DatetimePickerComponent, ng2DatetimePicker_directive.Ng2DatetimePickerDirective],
                    exports: [ng2DatetimePicker_component.Ng2DatetimePickerComponent, ng2DatetimePicker_directive.Ng2DatetimePickerDirective],
                    entryComponents: [ng2DatetimePicker_component.Ng2DatetimePickerComponent],
                    providers: [ng2Datetime.Ng2Datetime]
                },] },
    ];
    Ng2DatetimePickerModule.ctorParameters = [];
    return Ng2DatetimePickerModule;
}());
var Ng2DatetimePickerModule_1 = Ng2DatetimePickerModule$1;
var ng2DatetimePicker_module = {
	Ng2DatetimePickerModule: Ng2DatetimePickerModule_1
};

var Ng2Datetime = ng2Datetime.Ng2Datetime;
var Ng2DatetimePickerComponent = ng2DatetimePicker_component.Ng2DatetimePickerComponent;
var Ng2DatetimePickerDirective = ng2DatetimePicker_directive.Ng2DatetimePickerDirective;
var Ng2DatetimePickerModule = ng2DatetimePicker_module.Ng2DatetimePickerModule;
var index$8 = {
	Ng2Datetime: Ng2Datetime,
	Ng2DatetimePickerComponent: Ng2DatetimePickerComponent,
	Ng2DatetimePickerDirective: Ng2DatetimePickerDirective,
	Ng2DatetimePickerModule: Ng2DatetimePickerModule
};

var BaseMapDirective = (function () {
    function BaseMapDirective(ng2MapComponent, mapObjectName, inputs, outputs) {
        var _this = this;
        this.ng2MapComponent = ng2MapComponent;
        this.mapObjectName = mapObjectName;
        this.inputs = inputs;
        this.outputs = outputs;
        this.initialized$ = new core_1.EventEmitter();
        this._subscriptions = [];
        this.ng2Map = this.ng2MapComponent['ng2Map'];
        this.optionBuilder = this.ng2MapComponent['optionBuilder'];
        this.outputs.forEach(function (output) { return _this[output] = new core_1.EventEmitter(); });
        this.mapObjectName = mapObjectName;
    }
    BaseMapDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (this.ng2MapComponent.mapIdledOnce) {
            this.initialize();
        }
        else {
            this.ng2MapComponent.mapReady$.subscribe(function (map) { return _this.initialize(); });
        }
    };
    BaseMapDirective.prototype.initialize = function () {
        this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);
        console.log(this.mapObjectName, 'initialization options', this.objectOptions);
        typeof this.objectOptions.position === 'string' && (delete this.objectOptions.position);
        typeof this.objectOptions.center === 'string' && (delete this.objectOptions.center);
        if (this.libraryName) {
            this.mapObject = new google.maps[this.libraryName][this.mapObjectName](this.objectOptions);
        }
        else {
            this.mapObject = new google.maps[this.mapObjectName](this.objectOptions);
        }
        this.mapObject.setMap(this.ng2MapComponent.map);
        this.mapObject['mapObjectName'] = this.mapObjectName;
        this.mapObject['ng2MapComponent'] = this.ng2MapComponent;
        this.ng2Map.setObjectEvents(this.outputs, this, 'mapObject');
        this.ng2MapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);
        this.initialized$.emit(this.mapObject);
    };
    BaseMapDirective.prototype.ngOnChanges = function (changes) {
        console.log(this.mapObjectName, 'objectOptions are changed', changes);
        this.ng2Map.updateGoogleObject(this.mapObject, changes);
    };
    BaseMapDirective.prototype.ngOnDestroy = function () {
        var _this = this;
        this._subscriptions.map(function (subscription) { return subscription.unsubscribe(); });
        this.ng2MapComponent.removeFromMapObjectGroup(this.mapObjectName, this.mapObject);
        if (this.mapObject) {
            this.outputs.forEach(function (output) { return google.maps.event.clearListeners(_this.mapObject, output); });
            this.mapObject['setMap'](null);
            delete this.mapObject;
        }
    };
    BaseMapDirective.propDecorators = {
        'initialized$': [{ type: core_1.Output },],
    };
    return BaseMapDirective;
}());
var BaseMapDirective_1 = BaseMapDirective;
var baseMapDirective = {
	BaseMapDirective: BaseMapDirective_1
};

var jsonize = function (str) {
    try {
        JSON.parse(str);
        return str;
    }
    catch (e) {
        return str
            .replace(/([\$\w]+)\s*:/g,
        function (_, $1) {
            return '"' + $1 + '":';
        })
            .replace(/'([^']+)'/g,
        function (_, $1) {
            return '"' + $1 + '"';
        });
    }
};
var jsonize_1 = jsonize;
var getJSON = function (input) {
    if (typeof input === 'string') {
        var re = /^[\+\-]?[0-9\.]+,[ ]*\ ?[\+\-]?[0-9\.]+$/;
        if (input.match(re)) {
            input = '[' + input + ']';
        }
        return JSON.parse(jsonize(input));
    }
    else {
        return input;
    }
};
var getJSON_1 = getJSON;
var toCamelCase = function (str) {
    return str.replace(/(?:^\w|[A-Z]|\b\w)/g, function (letter, index) {
        return index == 0 ? letter.toLowerCase() : letter.toUpperCase();
    }).replace(/\s+/g, '');
};
var toCamelCase_1 = toCamelCase;
var util = {
	jsonize: jsonize_1,
	getJSON: getJSON_1,
	toCamelCase: toCamelCase_1
};

var GeoCoder$1 = (function () {
    function GeoCoder() {
    }
    GeoCoder.prototype.geocode = function (options) {
        var geocode$ = new Subject_1.Subject();
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode(options, function (results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
                geocode$.next(results);
            }
            else {
                geocode$.error(results);
            }
        });
        return geocode$;
    };
    
    GeoCoder.decorators = [
        { type: core_1.Injectable },
    ];
    GeoCoder.ctorParameters = [];
    return GeoCoder;
}());
var GeoCoder_1 = GeoCoder$1;
var geoCoder = {
	GeoCoder: GeoCoder_1
};

var OptionBuilder$1 = (function () {
    function OptionBuilder(geoCoder$$1) {
        this.geoCoder = geoCoder$$1;
    }
    OptionBuilder.prototype.googlizeAllInputs = function (definedInputs, userInputs) {
        var _this = this;
        var options = {};
        if (userInputs.options) {
            console.log('userInputs.options .................', userInputs.options);
            options = userInputs.options;
            if (!this.onlyOptionsGiven(definedInputs, userInputs)) {
                console.error('when "options" are used, other options are ignored');
            }
        }
        else {
            definedInputs.forEach(function (input) {
                if (userInputs[input] !== undefined) {
                    options[input] = _this.googlize(userInputs[input], { key: input });
                }
            });
        }
        return options;
    };
    OptionBuilder.prototype.googlizeMultiple = function (inputs, options) {
        options = options || {};
        for (var key in inputs) {
            var val = inputs[key];
            if (typeof val !== 'string') {
                options[key] = val;
            }
            else if (!(options['doNotConverStringToNumber'] && val.match(/^[0-9]+$/))) {
                options[key] = this.googlize(val, { key: key });
            }
        }
        return options;
    };
    OptionBuilder.prototype.googlize = function (input, options) {
        options = options || {};
        var output = input;
        if (typeof input === 'string') {
            if (input === 'false') {
                output = false;
            }
            else if (input === '0') {
                output = 0;
            }
            else {
                output =
                    this.getJSONParsed(input, options)
                        || this.getAnyMapObject(input)
                        || this.getAnyMapConstant(input, options)
                        || this.getDateObject(input)
                        || input;
            }
        }
        if (output instanceof Array) {
            if (options['key'] === 'bounds') {
                output = new google.maps.LatLngBounds(output[0], output[1]);
            }
            else if (options['key'] === 'icons') {
                output = this.getMapIcons(output);
            }
            else if (options['key'] === 'position' || options['key'].match(/^geoFallback/)) {
                output = this.getLatLng(output);
            }
        }
        else if (options['key'] && output instanceof Object) {
            if (options['key'] === 'icon') {
                output = this.getMarkerIcon(output);
            }
            else if (options['key'].match(/ControlOptions$/)) {
                output = this.getMapControlOption(output);
            }
        }
        delete output['doNotConverStringToNumber'];
        delete output['key'];
        return output;
    };
    OptionBuilder.prototype.getLatLng = function (input) {
        var output;
        if (input[0].constructor === Array) {
            output = input.map(function (el) { return new google.maps.LatLng(el[0], el[1]); });
        }
        else if (!isNaN(parseFloat(input[0])) && isFinite(input[0])) {
            output = new google.maps.LatLng(input[0], input[1]);
        }
        return output;
    };
    OptionBuilder.prototype.getJSONParsed = function (input, options) {
        var output;
        try {
            output = util.getJSON(input);
            if (output instanceof Array) {
                if (output[0].constructor !== Object) {
                    output = this.getLatLng(output);
                }
            }
            else if (output === Object(output)) {
                var newOptions = options;
                newOptions['doNotConverStringToNumber'] = true;
                output = this.googlizeMultiple(output, newOptions);
            }
        }
        catch (e) {
        }
        return output;
    };
    OptionBuilder.prototype.getAnyMapObject = function (input) {
        var output;
        if (input.match(/^[A-Z][a-zA-Z0-9]+\(.*\)$/)) {
            try {
                var exp = 'new google.maps.' + input;
                output = Function("return new google.maps." + input + ";")();
            }
            catch (e) { }
        }
        return output;
    };
    OptionBuilder.prototype.getAnyMapConstant = function (input, options) {
        var output;
        if (input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/)) {
            try {
                var matches = input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/);
                output = google.maps[matches[1]][matches[2]];
            }
            catch (e) { }
        }
        else if (input.match(/^[A-Z]+$/)) {
            try {
                var capitalizedKey = options['key'].charAt(0).toUpperCase() +
                    options['key'].slice(1);
                output = google.maps[capitalizedKey][input];
            }
            catch (e) { }
        }
        return output;
    };
    OptionBuilder.prototype.getMapControlOption = function (controlOptions) {
        var newControlOptions = controlOptions;
        for (var key in newControlOptions) {
            if (newControlOptions[key]) {
                var value = newControlOptions[key];
                if (typeof value === 'string') {
                    value = value.toUpperCase();
                }
                else if (key === 'mapTypeIds') {
                    value = value.map(function (str) {
                        if (str.match(/^[A-Z]+$/)) {
                            return google.maps.MapTypeId[str.toUpperCase()];
                        }
                        else {
                            return str;
                        }
                    });
                }
                if (key === 'style') {
                    var objName = key.replace(/Options$/, '') + 'Style';
                    newControlOptions[key] = google.maps[objName][value];
                }
                else if (key === 'position') {
                    newControlOptions[key] = google.maps.ControlPosition[value];
                }
                else {
                    newControlOptions[key] = value;
                }
            }
        }
        return newControlOptions;
    };
    OptionBuilder.prototype.getDateObject = function (input) {
        var output;
        if (input.match(/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/)) {
            try {
                output = new Date(input);
            }
            catch (e) { }
        }
        return output;
    };
    OptionBuilder.prototype.getMapIcons = function (input) {
        return input.map(function (el) {
            if (el.icon.path.match(/^[A-Z_]+$/)) {
                el.icon.path = google.maps.SymbolPath[el.icon.path];
            }
            return el;
        });
    };
    OptionBuilder.prototype.getMarkerIcon = function (input) {
        var output = input;
        if (('' + output.path).match(/^[A-Z_]+$/)) {
            output.path = google.maps.SymbolPath[output.path];
        }
        for (var key in output) {
            var arr = output[key];
            if (key === 'anchor' || key === 'origin' || key === 'labelOrigin') {
                output[key] = new google.maps.Point(arr[0], arr[1]);
            }
            else if (key === 'size' || key === 'scaledSize') {
                output[key] = new google.maps.Size(arr[0], arr[1]);
            }
        }
        return output;
    };
    OptionBuilder.prototype.onlyOptionsGiven = function (definedInputs, userInputs) {
        for (var i = 0; i < definedInputs.length; i++) {
            var input = definedInputs[i];
            if (input !== 'options' && typeof userInputs[input] !== 'undefined') {
                return false;
            }
        }
        return true;
    };
    OptionBuilder.decorators = [
        { type: core_1.Injectable },
    ];
    OptionBuilder.ctorParameters = [
        { type: geoCoder.GeoCoder, },
    ];
    return OptionBuilder;
}());
var OptionBuilder_1 = OptionBuilder$1;
var optionBuilder = {
	OptionBuilder: OptionBuilder_1
};

var NavigatorGeolocation$1 = (function () {
    function NavigatorGeolocation() {
    }
    NavigatorGeolocation.prototype.getCurrentPosition = function (geoLocationOptions) {
        geoLocationOptions = geoLocationOptions || { timeout: 5000 };
        var getCurrentPosition$ = new Subject_1.Subject();
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) { return getCurrentPosition$.next(position); }, function (evt) { return getCurrentPosition$.error(evt); }, geoLocationOptions);
        }
        else {
            getCurrentPosition$.error('Browser Geolocation service failed.');
        }
        return getCurrentPosition$;
    };
    
    NavigatorGeolocation.decorators = [
        { type: core_1.Injectable },
    ];
    NavigatorGeolocation.ctorParameters = [];
    return NavigatorGeolocation;
}());
var NavigatorGeolocation_1 = NavigatorGeolocation$1;
var navigatorGeolocation = {
	NavigatorGeolocation: NavigatorGeolocation_1
};

var NG_MAP_CONFIG_TOKEN$1 = new core_1.OpaqueToken('NG_MAP_CONFIG_TOKEN');
var config = {
	NG_MAP_CONFIG_TOKEN: NG_MAP_CONFIG_TOKEN$1
};

var Ng2Map$1 = (function () {
    function Ng2Map(geoCoder$$1, optionBuilder$$1) {
        var _this = this;
        this.geoCoder = geoCoder$$1;
        this.optionBuilder = optionBuilder$$1;
        this.updateGoogleObject = function (object, changes) {
            var val, currentValue, setMethodName;
            if (object) {
                for (var key in changes) {
                    setMethodName = "set" + key.replace(/^[a-z]/, function (x) { return x.toUpperCase(); });
                    currentValue = changes[key].currentValue;
                    if (['position', 'center'].indexOf(key) !== -1 && typeof currentValue === 'string') {
                        (function (setMethodName) {
                            _this.geoCoder.geocode({ address: currentValue }).subscribe(function (results) {
                                object[setMethodName](results[0].geometry.location);
                            });
                        })(setMethodName);
                    }
                    else {
                        val = _this.optionBuilder.googlize(currentValue);
                        object[setMethodName](val);
                    }
                }
            }
        };
    }
    Ng2Map.prototype.setObjectEvents = function (definedEvents, thisObj, prefix) {
        definedEvents.forEach(function (definedEvent) {
            var eventName = definedEvent
                .replace(/([A-Z])/g, function ($1) { return ("_" + $1.toLowerCase()); })
                .replace(/^map_/, '');
            thisObj[prefix].addListener(eventName, function (event) {
                var param = event ? event : {};
                param.target = this;
                thisObj[definedEvent].emit(param);
            });
        });
    };
    Ng2Map.decorators = [
        { type: core_1.Injectable },
    ];
    Ng2Map.ctorParameters = [
        { type: geoCoder.GeoCoder, },
        { type: optionBuilder.OptionBuilder, },
    ];
    return Ng2Map;
}());
var Ng2Map_1 = Ng2Map$1;
var ng2Map = {
	Ng2Map: Ng2Map_1
};

var async_1 = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
var async = {
	async: async_1
};

var __extends$66 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function debounceTime$2(dueTime, scheduler) {
    if (scheduler === void 0) { scheduler = async.async; }
    return this.lift(new DebounceTimeOperator(dueTime, scheduler));
}
var debounceTime_2 = debounceTime$2;
var DebounceTimeOperator = (function () {
    function DebounceTimeOperator(dueTime, scheduler) {
        this.dueTime = dueTime;
        this.scheduler = scheduler;
    }
    DebounceTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
    };
    return DebounceTimeOperator;
}());
var DebounceTimeSubscriber = (function (_super) {
    __extends$66(DebounceTimeSubscriber, _super);
    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
        _super.call(this, destination);
        this.dueTime = dueTime;
        this.scheduler = scheduler;
        this.debouncedSubscription = null;
        this.lastValue = null;
        this.hasValue = false;
    }
    DebounceTimeSubscriber.prototype._next = function (value) {
        this.clearDebounce();
        this.lastValue = value;
        this.hasValue = true;
        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$1, this.dueTime, this));
    };
    DebounceTimeSubscriber.prototype._complete = function () {
        this.debouncedNext();
        this.destination.complete();
    };
    DebounceTimeSubscriber.prototype.debouncedNext = function () {
        this.clearDebounce();
        if (this.hasValue) {
            this.destination.next(this.lastValue);
            this.lastValue = null;
            this.hasValue = false;
        }
    };
    DebounceTimeSubscriber.prototype.clearDebounce = function () {
        var debouncedSubscription = this.debouncedSubscription;
        if (debouncedSubscription !== null) {
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
        }
    };
    return DebounceTimeSubscriber;
}(Subscriber_1.Subscriber));
function dispatchNext$1(subscriber) {
    subscriber.debouncedNext();
}
var debounceTime_1 = {
	debounceTime: debounceTime_2
};

Observable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;

var INPUTS$1 = [
    'backgroundColor', 'center', 'disableDefaultUI', 'disableDoubleClickZoom', 'draggable', 'draggableCursor',
    'draggingCursor', 'heading', 'keyboardShortcuts', 'mapMaker', 'mapTypeControl', 'mapTypeId', 'maxZoom', 'minZoom',
    'noClear', 'overviewMapControl', 'panControl', 'panControlOptions', 'rotateControl', 'scaleControl', 'scrollwheel',
    'streetView', 'styles', 'tilt', 'zoom', 'streetViewControl', 'zoomControl', 'mapTypeControlOptions',
    'overviewMapControlOptions', 'rotateControlOptions', 'scaleControlOptions', 'streetViewControlOptions',
    'options',
    'geoFallbackCenter'
];
var OUTPUTS$1 = [
    'bounds_changed', 'center_changed', 'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'heading_changed', 'idle',
    'typeid_changed', 'mousemove', 'mouseout', 'mouseover', 'projection_changed', 'resize', 'rightclick',
    'tilesloaded', 'tile_changed', 'zoom_changed',
    'mapClick', 'mapMouseover', 'mapMouseout', 'mapMousemove', 'mapDrag', 'mapDragend', 'mapDragstart'
];
var Ng2MapComponent$3 = (function () {
    function Ng2MapComponent(optionBuilder$$1, elementRef, zone, geolocation, geoCoder$$1, ng2Map$$1, config$$1) {
        var _this = this;
        this.optionBuilder = optionBuilder$$1;
        this.elementRef = elementRef;
        this.zone = zone;
        this.geolocation = geolocation;
        this.geoCoder = geoCoder$$1;
        this.ng2Map = ng2Map$$1;
        this.config = config$$1;
        this.mapReady$ = new core_1.EventEmitter();
        this.mapOptions = {};
        this.inputChanges$ = new Subject_1.Subject();
        this.infoWindows = {};
        this.mapIdledOnce = false;
        this.config = this.config || { apiUrl: 'https://maps.google.com/maps/api/js' };
        window['ng2MapRef'] = window['ng2MapRef'] || [];
        this.mapIndex = window['ng2MapRef'].length;
        window['ng2MapRef'].push({ zone: this.zone, componentFn: function () { return _this.initializeMap(); } });
        if (typeof google === 'undefined' || typeof google.maps === 'undefined' || !google.maps.Map) {
            this.mapInitPath = 1;
            this.addGoogleMapsApi();
        }
        OUTPUTS$1.forEach(function (output) { return _this[output] = new core_1.EventEmitter(); });
    }
    Ng2MapComponent.prototype.ngAfterViewInit = function () {
        if (this.mapInitPath !== 1) {
            this.initializeMap();
        }
    };
    Ng2MapComponent.prototype.ngOnChanges = function (changes) {
        this.inputChanges$.next(changes);
    };
    Ng2MapComponent.prototype.addGoogleMapsApi = function () {
        window['initNg2Map'] = function () {
            window['ng2MapRef'].forEach(function (ng2MapRef) {
                ng2MapRef.zone.run(function () { ng2MapRef.componentFn(); });
            });
            window['ng2MapRef'] = [];
        };
        if ((!window['google'] || !window['google']['maps']) && !document.querySelector('#ng2-map-api')) {
            var script = document.createElement('script');
            script.id = 'ng2-map-api';
            var apiUrl = this.config.apiUrl;
            apiUrl += apiUrl.indexOf('?') !== -1 ? '&' : '?';
            script.src = apiUrl + 'callback=initNg2Map';
            document.querySelector('body').appendChild(script);
        }
    };
    Ng2MapComponent.prototype.initializeMap = function () {
        var _this = this;
        this.el = this.elementRef.nativeElement.querySelector('.google-map');
        this.mapOptions = this.optionBuilder.googlizeAllInputs(INPUTS$1, this);
        console.log('ng2-map mapOptions', this.mapOptions);
        this.mapOptions.zoom = this.mapOptions.zoom || 15;
        typeof this.mapOptions.center === 'string' && (delete this.mapOptions.center);
        this.map = new google.maps.Map(this.el, this.mapOptions);
        this.map['mapObjectName'] = 'Ng2MapComponent';
        if (!this.mapOptions.center) {
            this.setCenter();
        }
        this.ng2Map.setObjectEvents(OUTPUTS$1, this, 'map');
        this.map.addListener('idle', function () {
            if (!_this.mapIdledOnce) {
                _this.mapReady$.emit(_this.map);
                _this.mapIdledOnce = true;
            }
        });
        this.inputChanges$
            .debounceTime(1000)
            .subscribe(function (changes) { return _this.ng2Map.updateGoogleObject(_this.map, changes); });
        console.log('this.mapIndex', this.mapIndex);
        window['ng2MapRef'].map = this.map;
    };
    Ng2MapComponent.prototype.setCenter = function () {
        var _this = this;
        if (!this['center']) {
            this.geolocation.getCurrentPosition().subscribe(function (position) {
                console.log('setting map center from current location');
                var latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                _this.map.setCenter(latLng);
            }, function (error) {
                console.error('ng2-map: Error finding the current position');
                _this.map.setCenter(_this.mapOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));
            });
        }
        else if (typeof this['center'] === 'string') {
            this.geoCoder.geocode({ address: this['center'] }).subscribe(function (results) {
                console.log('setting map center from address', _this['center']);
                _this.map.setCenter(results[0].geometry.location);
            }, function (error) {
                _this.map.setCenter(_this.mapOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));
            });
        }
    };
    Ng2MapComponent.prototype.openInfoWindow = function (id, anchor, data) {
        this.infoWindows[id].open(anchor, data);
    };
    Ng2MapComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        if (this.el) {
            OUTPUTS$1.forEach(function (output) { return google.maps.event.clearListeners(_this.map, output); });
        }
    };
    Ng2MapComponent.prototype.addToMapObjectGroup = function (mapObjectName, mapObject) {
        var groupName = util.toCamelCase(mapObjectName.toLowerCase()) + 's';
        this.map[groupName] = this.map[groupName] || [];
        this.map[groupName].push(mapObject);
    };
    Ng2MapComponent.prototype.removeFromMapObjectGroup = function (mapObjectName, mapObject) {
        var groupName = util.toCamelCase(mapObjectName.toLowerCase()) + 's';
        var index = this.map[groupName].indexOf(mapObject);
        console.log('index', mapObject, index);
        (index > -1) && this.map[groupName].splice(index, 1);
    };
    Ng2MapComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ng2-map',
                    providers: [ng2Map.Ng2Map, optionBuilder.OptionBuilder, geoCoder.GeoCoder, navigatorGeolocation.NavigatorGeolocation],
                    styles: ["\n    ng2-map {display: block; height: 300px;}\n    .google-map {width: 100%; height: 100%}\n  "],
                    inputs: INPUTS$1,
                    outputs: OUTPUTS$1,
                    encapsulation: core_1.ViewEncapsulation.None,
                    template: "\n    <div class=\"google-map\"></div>\n    <ng-content></ng-content>\n  ",
                },] },
    ];
    Ng2MapComponent.ctorParameters = [
        { type: optionBuilder.OptionBuilder, },
        { type: core_1.ElementRef, },
        { type: core_1.NgZone, },
        { type: navigatorGeolocation.NavigatorGeolocation, },
        { type: geoCoder.GeoCoder, },
        { type: ng2Map.Ng2Map, },
        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [config.NG_MAP_CONFIG_TOKEN,] },] },
    ];
    Ng2MapComponent.propDecorators = {
        'mapReady$': [{ type: core_1.Output },],
    };
    return Ng2MapComponent;
}());
var Ng2MapComponent_1 = Ng2MapComponent$3;
var ng2Map_component = {
	Ng2MapComponent: Ng2MapComponent_1
};

var __extends$65 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS = [];
var OUTPUTS = [];
var BicyclingLayer$1 = (function (_super) {
    __extends$65(BicyclingLayer, _super);
    function BicyclingLayer(ng2MapComp) {
        _super.call(this, ng2MapComp, 'BicyclingLayer', INPUTS, OUTPUTS);
    }
    BicyclingLayer.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map > bicycling-layer',
                    inputs: INPUTS,
                    outputs: OUTPUTS,
                },] },
    ];
    BicyclingLayer.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
    ];
    return BicyclingLayer;
}(baseMapDirective.BaseMapDirective));
var BicyclingLayer_1 = BicyclingLayer$1;
var bicyclingLayer = {
	BicyclingLayer: BicyclingLayer_1
};

var INPUTS$2 = [
    'content', 'disableAutoPan', 'maxWidth', 'pixelOffset', 'position', 'zIndex', 'options'
];
var OUTPUTS$2 = [
    'closeclick', 'content_changed', 'domready', 'position_changed', 'zindex_changed'
];
var InfoWindow$1 = (function () {
    function InfoWindow(ng2MapComponent, elementRef, ng2Map$$1) {
        var _this = this;
        this.ng2MapComponent = ng2MapComponent;
        this.elementRef = elementRef;
        this.ng2Map = ng2Map$$1;
        this.objectOptions = {};
        this.inputChanges$ = new Subject_1.Subject();
        this.initialized$ = new core_1.EventEmitter();
        this.elementRef.nativeElement.style.display = 'none';
        OUTPUTS$2.forEach(function (output) { return _this[output] = new core_1.EventEmitter(); });
    }
    InfoWindow.prototype.ngOnInit = function () {
        var _this = this;
        if (this.ng2MapComponent.mapIdledOnce) {
            this.initialize();
        }
        else {
            this.ng2MapComponent.mapReady$.subscribe(function (map) { return _this.initialize(); });
        }
    };
    InfoWindow.prototype.ngOnChanges = function (changes) {
        this.inputChanges$.next(changes);
    };
    InfoWindow.prototype.initialize = function () {
        var _this = this;
        console.log('infowindow is being initialized');
        this.template = this.elementRef.nativeElement.innerHTML;
        this.objectOptions = this.ng2MapComponent.optionBuilder.googlizeAllInputs(INPUTS$2, this);
        this.infoWindow = new google.maps.InfoWindow(this.objectOptions);
        this.infoWindow['mapObjectName'] = 'InfoWindow';
        console.log('INFOWINDOW objectOptions', this.objectOptions);
        this.el = this.elementRef.nativeElement;
        if (this.el.id) {
            this.ng2MapComponent.infoWindows[this.el.id] = this;
        }
        else {
            console.error('An InfoWindow must have an id. e.g. id="detail"');
        }
        this.ng2Map.setObjectEvents(OUTPUTS$2, this, 'infoWindow');
        this.inputChanges$
            .debounceTime(1000)
            .subscribe(function (changes) { return _this.ng2Map.updateGoogleObject(_this.infoWindow, changes); });
        this.ng2MapComponent.addToMapObjectGroup('InfoWindow', this.infoWindow);
        this.initialized$.emit(this.infoWindow);
    };
    InfoWindow.prototype.open = function (anchor, data) {
        var html = this.template;
        for (var key in data) {
            this[key] = data[key];
            html = html.replace("[[" + key + "]]", data[key]);
        }
        this.infoWindow.setContent(html);
        this.infoWindow.open(this.ng2MapComponent.map, anchor);
    };
    InfoWindow.prototype.ngOnDestroy = function () {
        var _this = this;
        if (this.infoWindow) {
            OUTPUTS$2.forEach(function (output) { return google.maps.event.clearListeners(_this.infoWindow, output); });
            delete this.infoWindow;
        }
    };
    InfoWindow.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ng2-map > info-window',
                    inputs: INPUTS$2,
                    outputs: OUTPUTS$2,
                    template: "<ng-content></ng-content>",
                },] },
    ];
    InfoWindow.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
        { type: core_1.ElementRef, },
        { type: ng2Map.Ng2Map, },
    ];
    return InfoWindow;
}());
var InfoWindow_1 = InfoWindow$1;
var infoWindow = {
	InfoWindow: InfoWindow_1
};

var __extends$67 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$3 = [
    'position'
];
var OUTPUTS$3 = [
    'animationChanged', 'click', 'clickableChanged', 'cursorChanged', 'dblclick', 'drag', 'dragend', 'draggableChanged',
    'dragstart', 'flatChanged', 'iconChanged', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'positionChanged', 'rightclick',
    'shapeChanged', 'titleChanged', 'visibleChanged', 'zindexChanged',
    'map_click', 'map_mouseover', 'map_mouseout', 'map_mouseup', 'map_mousedown', 'map_drag', 'map_dragend'
];
function getCustomMarkerOverlayView(htmlEl, position) {
    var CustomMarkerOverlayView = (function (_super) {
        __extends$67(CustomMarkerOverlayView, _super);
        function CustomMarkerOverlayView(htmlEl, position) {
            _super.call(this);
            this.visible = true;
            this.htmlEl = htmlEl;
            this.position = position;
        }
        CustomMarkerOverlayView.prototype.onAdd = function () {
            this.getPanes().overlayMouseTarget.appendChild(this.htmlEl);
            this.htmlEl.style.position = 'absolute';
        };
        CustomMarkerOverlayView.prototype.draw = function () {
            this.setPosition(this.position);
            this.setZIndex(this.zIndex);
            this.setVisible(this.visible);
        };
        CustomMarkerOverlayView.prototype.onRemove = function () {
        };
        CustomMarkerOverlayView.prototype.setPosition = function (position) {
            var _this = this;
            var _setPosition = function (latLng) {
                var posPixel = _this.getProjection().fromLatLngToDivPixel(latLng);
                var x = Math.round(posPixel.x - (_this.htmlEl.offsetWidth / 2));
                var y = Math.round(posPixel.y - (_this.htmlEl.offsetHeight / 2));
                _this.htmlEl.style.left = x + 'px';
                _this.htmlEl.style.top = y + 'px';
                _this.htmlEl.style.visibility = 'visible';
            };
            if (typeof position === 'string') {
                var geocoder = new google.maps.Geocoder();
                geocoder.geocode({ address: position }, function (results, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        console.log('setting custom marker position from address', position);
                        _setPosition(results[0].geometry.location);
                    }
                    else {
                    }
                });
            }
            else {
                var latLng = new google.maps.LatLng(position[0], position[1]);
                _setPosition(latLng);
            }
        };
        CustomMarkerOverlayView.prototype.setZIndex = function (zIndex) {
            zIndex && (this.zIndex = zIndex);
            this.htmlEl.style.zIndex = this.zIndex;
        };
        CustomMarkerOverlayView.prototype.setVisible = function (visible) {
            this.htmlEl.style.display = visible ? 'inline-block' : 'none';
            this.visible = visible;
        };
        
        return CustomMarkerOverlayView;
    }(google.maps.OverlayView));
    return new CustomMarkerOverlayView(htmlEl, position);
}
var CustomMarker$1 = (function () {
    function CustomMarker(ng2MapComponent, elementRef, ng2Map$$1) {
        var _this = this;
        this.ng2MapComponent = ng2MapComponent;
        this.elementRef = elementRef;
        this.ng2Map = ng2Map$$1;
        this.inputChanges$ = new Subject_1.Subject();
        this.initialized$ = new core_1.EventEmitter();
        this.elementRef.nativeElement.style.display = 'none';
        OUTPUTS$3.forEach(function (output) { return _this[output] = new core_1.EventEmitter(); });
    }
    CustomMarker.prototype.ngOnInit = function () {
        var _this = this;
        if (this.ng2MapComponent.mapIdledOnce) {
            this.initialize();
        }
        else {
            this.ng2MapComponent.mapReady$.subscribe(function (map) { return _this.initialize(); });
        }
    };
    CustomMarker.prototype.ngOnChanges = function (changes) {
        this.inputChanges$.next(changes);
    };
    CustomMarker.prototype.ngOnDestroy = function () {
        var _this = this;
        this.ng2MapComponent.removeFromMapObjectGroup('CustomMarker', this.mapObject);
        if (this.mapObject) {
            OUTPUTS$3.forEach(function (output) { return google.maps.event.clearListeners(_this.mapObject, output); });
            this.mapObject.setMap(null);
            delete this.mapObject;
        }
    };
    CustomMarker.prototype.initialize = function () {
        var _this = this;
        console.log('custom-marker is being initialized');
        this.el = this.elementRef.nativeElement;
        this.mapObject = getCustomMarkerOverlayView(this.el, this['position']);
        this.mapObject.setMap(this.ng2MapComponent.map);
        this.ng2Map.setObjectEvents(OUTPUTS$3, this, 'mapObject');
        this.inputChanges$
            .debounceTime(1000)
            .subscribe(function (changes) { return _this.ng2Map.updateGoogleObject(_this.mapObject, changes); });
        this.ng2MapComponent.addToMapObjectGroup('CustomMarker', this.mapObject);
        this.initialized$.emit(this.mapObject);
    };
    CustomMarker.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ng2-map > custom-marker',
                    inputs: INPUTS$3,
                    outputs: OUTPUTS$3,
                    template: "\n    <ng-content></ng-content>\n  ",
                },] },
    ];
    CustomMarker.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
        { type: core_1.ElementRef, },
        { type: ng2Map.Ng2Map, },
    ];
    return CustomMarker;
}());
var CustomMarker_1 = CustomMarker$1;
var customMarker = {
	CustomMarker: CustomMarker_1
};

var __extends$68 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$4 = [
    'center', 'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'map', 'radius',
    'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'options',
    'geoFallbackCenter'
];
var OUTPUTS$4 = [
    'centerChanged', 'click', 'dblclick', 'drag', 'dragend', 'dragstart',
    'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'radiusChanged', 'rightclick',
];
var Circle$1 = (function (_super) {
    __extends$68(Circle, _super);
    function Circle(ng2MapComp) {
        _super.call(this, ng2MapComp, 'Circle', INPUTS$4, OUTPUTS$4);
        this.ng2MapComp = ng2MapComp;
        this.objectOptions = {};
    }
    Circle.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.setCenter();
    };
    Circle.prototype.setCenter = function () {
        var _this = this;
        if (!this['center']) {
            this._subscriptions.push(this.ng2MapComp.geolocation.getCurrentPosition().subscribe(function (center) {
                console.log('setting circle center from current location');
                var latLng = new google.maps.LatLng(center.coords.latitude, center.coords.longitude);
                _this.mapObject.setCenter(latLng);
            }, function (error) {
                console.error('ng2-map, error in finding the current position');
                _this.mapObject.setCenter(_this.objectOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));
            }));
        }
        else if (typeof this['center'] === 'string') {
            this._subscriptions.push(this.ng2MapComp.geoCoder.geocode({ address: this['center'] }).subscribe(function (results) {
                console.log('setting circle center from address', _this['center']);
                _this.mapObject.setCenter(results[0].geometry.location);
            }, function (error) {
                console.error('ng2-map, error in finding location from', _this['center']);
                _this.mapObject.setCenter(_this.objectOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));
            }));
        }
    };
    Circle.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map>circle, ng2-map>map-circle',
                    inputs: INPUTS$4,
                    outputs: OUTPUTS$4,
                },] },
    ];
    Circle.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
    ];
    return Circle;
}(baseMapDirective.BaseMapDirective));
var Circle_1 = Circle$1;
var circle = {
	Circle: Circle_1
};

var __extends$69 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$5 = ['controlPosition', 'controls', 'drawingMode', 'featureFactory', 'style', 'geoJson'];
var OUTPUTS$5 = [
    'addfeature', 'click', 'dblclick', 'mousedown', 'mouseout', 'mouseover',
    'mouseup', 'removefeature', 'removeproperty', 'rightclick', 'setgeometry', 'setproperty'
];
var DataLayer$1 = (function (_super) {
    __extends$69(DataLayer, _super);
    function DataLayer(ng2MapComponent) {
        _super.call(this, ng2MapComponent, 'Data', INPUTS$5, OUTPUTS$5);
    }
    DataLayer.prototype.initialize = function () {
        if (this['geoJson']) {
            console.log('this.geoJson', this['geoJson']);
            this.ng2MapComponent.map.data.loadGeoJson(this['geoJson']);
        }
        else {
            this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);
            console.log(this.mapObjectName, 'initialization objectOptions', this.objectOptions);
            this.ng2MapComponent.map.data.add(this.objectOptions);
        }
        this.mapObject = this.ng2MapComponent.map.data;
        this.ng2Map.setObjectEvents(this.outputs, this, 'mapObject');
        this.ng2MapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);
        this.initialized$.emit(this.mapObject);
    };
    DataLayer.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map > data-layer',
                    inputs: INPUTS$5,
                    outputs: OUTPUTS$5,
                },] },
    ];
    DataLayer.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
    ];
    return DataLayer;
}(baseMapDirective.BaseMapDirective));
var DataLayer_1 = DataLayer$1;
var dataLayer = {
	DataLayer: DataLayer_1
};

var __extends$70 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$6 = [
    'directions', 'draggable', 'hideRouteList', 'infoWindow', 'panel', 'markerOptions',
    'polylineOptions', 'preserveViewport', 'routeIndex', 'suppressBicyclingLayer',
    'suppressInfoWindows', 'suppressMarkers', 'suppressPolylines'
];
var OUTPUTS$6 = ['directions_changed'];
var DirectionsRenderer$1 = (function (_super) {
    __extends$70(DirectionsRenderer, _super);
    function DirectionsRenderer(ng2MapComponent, geolocation) {
        _super.call(this, ng2MapComponent, 'DirectionsRenderer', INPUTS$6, OUTPUTS$6);
        this.geolocation = geolocation;
    }
    DirectionsRenderer.prototype.initialize = function () {
        this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);
        if (typeof this.objectOptions['panel'] === 'string') {
            this.objectOptions['panel'] = document.querySelector(this.objectOptions['panel']);
        }
        console.log('DirectionsRenderer', 'initialization options', this.objectOptions, this.directionsRequest);
        this.directionsService = new google.maps.DirectionsService();
        this.directionsRenderer = new google.maps.DirectionsRenderer(this.objectOptions);
        this.directionsRenderer.setMap(this.ng2MapComponent.map);
        this.showDirections(this.directionsRequest);
        this.ng2Map.setObjectEvents(this.outputs, this, 'directionsRenderer');
        this.ng2MapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);
        this.initialized$.emit(this.directionsRenderer);
    };
    DirectionsRenderer.prototype.ngOnChanges = function (changes) {
        var newOptions = {};
        for (var key in changes) {
            if (this.inputs.indexOf(key) !== -1) {
                newOptions[key] = this.optionBuilder.googlize(changes[key].currentValue);
            }
        }
        if (changes['directionsRequest'] && this.directionsRenderer) {
            this.directionsService && this.showDirections(this.directionsRequest);
        }
    };
    DirectionsRenderer.prototype.showDirections = function (directionsRequest) {
        var _this = this;
        this.directionsService.route(directionsRequest, function (response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                _this.directionsRenderer.setDirections(response);
            }
            else {
                console.error('Directions request failed due to ' + status);
            }
        });
    };
    DirectionsRenderer.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map > directions-renderer',
                    inputs: INPUTS$6,
                    outputs: OUTPUTS$6,
                },] },
    ];
    DirectionsRenderer.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
        { type: navigatorGeolocation.NavigatorGeolocation, },
    ];
    DirectionsRenderer.propDecorators = {
        'directionsRequest': [{ type: core_1.Input, args: ['directions-request',] },],
    };
    return DirectionsRenderer;
}(baseMapDirective.BaseMapDirective));
var DirectionsRenderer_1 = DirectionsRenderer$1;
var directionsRenderer = {
	DirectionsRenderer: DirectionsRenderer_1
};

var __extends$71 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$7 = [
    'options',
    'circleOptions', 'drawingControl', 'drawingControlOptions', 'drawingMode',
    'map', 'markerOptions', 'polygonOptions', 'polylineOptions', 'rectangleOptions'
];
var OUTPUTS$7 = [
    'circlecomplete', 'markercomplete', 'overlaycomplete',
    'polygoncomplete', 'polylinecomplete', 'rectanglecomplete'
];
var DrawingManager$1 = (function (_super) {
    __extends$71(DrawingManager, _super);
    function DrawingManager(ng2MapComp) {
        _super.call(this, ng2MapComp, 'DrawingManager', INPUTS$7, OUTPUTS$7);
        this.libraryName = 'drawing';
    }
    DrawingManager.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map > drawing-manager',
                    inputs: INPUTS$7,
                    outputs: OUTPUTS$7,
                },] },
    ];
    DrawingManager.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
    ];
    return DrawingManager;
}(baseMapDirective.BaseMapDirective));
var DrawingManager_1 = DrawingManager$1;
var drawingManager = {
	DrawingManager: DrawingManager_1
};

var __extends$72 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$8 = ['url', 'bounds', 'clickable', 'opacity'];
var OUTPUTS$8 = ['click', 'dblclick'];
var GroundOverlay$1 = (function (_super) {
    __extends$72(GroundOverlay, _super);
    function GroundOverlay(ng2MapComp) {
        _super.call(this, ng2MapComp, 'GroundOverlay', INPUTS$8, OUTPUTS$8);
        this.objectOptions = {};
    }
    GroundOverlay.prototype.initialize = function () {
        this.objectOptions = this.optionBuilder.googlizeAllInputs(['clickable', 'opacity'], this);
        console.log(this.mapObjectName, 'initialization objectOptions', this.objectOptions);
        this.mapObject = new google.maps.GroundOverlay(this['url'], this['bounds'], this.objectOptions);
        this.mapObject.setMap(this.ng2MapComponent.map);
        this.mapObject['mapObjectName'] = this.mapObjectName;
        this.ng2Map.setObjectEvents(this.outputs, this, 'mapObject');
        this.ng2MapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);
        this.initialized$.emit(this.mapObject);
    };
    GroundOverlay.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map > ground-overlay',
                    inputs: INPUTS$8,
                    outputs: OUTPUTS$8,
                },] },
    ];
    GroundOverlay.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
    ];
    return GroundOverlay;
}(baseMapDirective.BaseMapDirective));
var GroundOverlay_1 = GroundOverlay$1;
var groundOverlay = {
	GroundOverlay: GroundOverlay_1
};

var __extends$73 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$9 = ['data', 'dissipating', 'gradient', 'maxIntensity', 'opacity', 'radius', 'options'];
var OUTPUTS$9 = [];
var HeatmapLayer$1 = (function (_super) {
    __extends$73(HeatmapLayer, _super);
    function HeatmapLayer(ng2MapComp) {
        _super.call(this, ng2MapComp, 'HeatmapLayer', INPUTS$9, OUTPUTS$9);
        this.libraryName = 'visualization';
    }
    HeatmapLayer.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map > heatmap-layer',
                    inputs: INPUTS$9,
                    outputs: OUTPUTS$9,
                },] },
    ];
    HeatmapLayer.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
    ];
    return HeatmapLayer;
}(baseMapDirective.BaseMapDirective));
var HeatmapLayer_1 = HeatmapLayer$1;
var heatmapLayer = {
	HeatmapLayer: HeatmapLayer_1
};

var __extends$74 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$10 = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex', 'options'];
var OUTPUTS$10 = ['click', 'defaultviewport_changed', 'status_changed'];
var KmlLayer$1 = (function (_super) {
    __extends$74(KmlLayer, _super);
    function KmlLayer(ng2MapComp) {
        _super.call(this, ng2MapComp, 'KmlLayer', INPUTS$10, OUTPUTS$10);
    }
    KmlLayer.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map > kml-layer',
                    inputs: INPUTS$10,
                    outputs: OUTPUTS$10,
                },] },
    ];
    KmlLayer.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
    ];
    return KmlLayer;
}(baseMapDirective.BaseMapDirective));
var KmlLayer_1 = KmlLayer$1;
var kmlLayer = {
	KmlLayer: KmlLayer_1
};

var __extends$75 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$11 = [
    'anchorPoint', 'animation', 'clickable', 'cursor', 'draggable', 'icon', 'label', 'opacity',
    'optimized', 'place', 'position', 'shape', 'title', 'visible', 'zIndex', 'options',
    'geoFallbackPosition'
];
var OUTPUTS$11 = [
    'animationChanged', 'click', 'clickableChanged', 'cursorChanged', 'dblclick', 'drag', 'dragend', 'draggableChanged',
    'dragstart', 'flatChanged', 'iconChanged', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'positionChanged', 'rightclick',
    'shapeChanged', 'titleChanged', 'visibleChanged', 'zindexChanged'
];
var Marker$1 = (function (_super) {
    __extends$75(Marker, _super);
    function Marker(ng2MapComp) {
        _super.call(this, ng2MapComp, 'Marker', INPUTS$11, OUTPUTS$11);
        this.ng2MapComp = ng2MapComp;
        this.objectOptions = {};
    }
    Marker.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.setPosition();
    };
    Marker.prototype.setPosition = function () {
        var _this = this;
        if (!this['position']) {
            this._subscriptions.push(this.ng2MapComp.geolocation.getCurrentPosition().subscribe(function (position) {
                console.log('setting marker position from current location');
                var latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                _this.mapObject.setPosition(latLng);
            }, function (error) {
                console.error('ng2-map, error finding the current location');
                _this.mapObject.setPosition(_this.objectOptions['geoFallbackPosition'] || new google.maps.LatLng(0, 0));
            }));
        }
        else if (typeof this['position'] === 'string') {
            this._subscriptions.push(this.ng2MapComp.geoCoder.geocode({ address: this['position'] }).subscribe(function (results) {
                console.log('setting marker position from address', _this['position']);
                _this.mapObject.setPosition(results[0].geometry.location);
            }, function (error) {
                console.error('ng2-map, error finding the location from', _this['position']);
                _this.mapObject.setPosition(_this.objectOptions['geoFallbackPosition'] || new google.maps.LatLng(0, 0));
            }));
        }
    };
    Marker.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map > marker',
                    inputs: INPUTS$11,
                    outputs: OUTPUTS$11,
                },] },
    ];
    Marker.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
    ];
    return Marker;
}(baseMapDirective.BaseMapDirective));
var Marker_1 = Marker$1;
var marker = {
	Marker: Marker_1
};

var PlacesAutoComplete$1 = (function () {
    function PlacesAutoComplete(optionBuilder$$1, elementRef) {
        var _this = this;
        this.optionBuilder = optionBuilder$$1;
        this.elementRef = elementRef;
        this.place_changed = new core_1.EventEmitter();
        this.initialized$ = new core_1.EventEmitter();
        this.initialize = function () {
            _this.objectOptions =
                _this.optionBuilder.googlizeAllInputs(['bounds', 'componentRestrictions', 'types'], _this);
            console.log('places autocomplete options', _this.objectOptions);
            _this.autocomplete = new google.maps.places.Autocomplete(_this.elementRef.nativeElement, _this.objectOptions);
            console.log('this.autocomplete', _this.autocomplete);
            _this.autocomplete.addListener('place_changed', function (place) { return _this.place_changed.emit(); });
            _this.initialized$.emit(_this.autocomplete);
        };
        if (typeof google === 'undefined' || typeof google.maps === 'undefined' || !google.maps.Map) {
            this.addGoogleMapsApi();
        }
        else {
            this.initialize();
        }
    }
    PlacesAutoComplete.prototype.addGoogleMapsApi = function () {
        window['initializePlacesAutoComplete'] = this.initialize;
        if ((!window['google'] || !window['google']['maps']) && !document.querySelector('#ng2-map-api')) {
            var script = document.createElement('script');
            script.id = 'ng2-map-api';
            var apiUrl = ng2Map_component.Ng2MapComponent['apiUrl'] || 'https://maps.google.com/maps/api/js';
            apiUrl += apiUrl.indexOf('?') ? '&' : '?';
            script.src = apiUrl + 'callback=initializePlacesAutoComplete';
            document.querySelector('body').appendChild(script);
        }
    };
    PlacesAutoComplete.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[places-auto-complete]'
                },] },
    ];
    PlacesAutoComplete.ctorParameters = [
        { type: optionBuilder.OptionBuilder, },
        { type: core_1.ElementRef, },
    ];
    PlacesAutoComplete.propDecorators = {
        'bounds': [{ type: core_1.Input, args: ['bounds',] },],
        'componentRestrictions': [{ type: core_1.Input, args: ['componentRestrictions',] },],
        'types': [{ type: core_1.Input, args: ['types',] },],
        'place_changed': [{ type: core_1.Output, args: ['place_changed',] },],
        'initialized$': [{ type: core_1.Output, args: ['initialized$',] },],
    };
    return PlacesAutoComplete;
}());
var PlacesAutoComplete_1 = PlacesAutoComplete$1;
var placesAutoComplete = {
	PlacesAutoComplete: PlacesAutoComplete_1
};

var __extends$76 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$12 = [
    'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'paths',
    'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'options',
];
var OUTPUTS$12 = [
    'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown',
    'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick',
];
var Polygon$1 = (function (_super) {
    __extends$76(Polygon, _super);
    function Polygon(ng2MapComp) {
        _super.call(this, ng2MapComp, 'Polygon', INPUTS$12, OUTPUTS$12);
    }
    Polygon.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map>polygon, ng2-map>map-polygon',
                    inputs: INPUTS$12,
                    outputs: OUTPUTS$12,
                },] },
    ];
    Polygon.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
    ];
    return Polygon;
}(baseMapDirective.BaseMapDirective));
var Polygon_1 = Polygon$1;
var polygon = {
	Polygon: Polygon_1
};

var __extends$77 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$13 = [
    'clickable', 'draggable', 'editable', 'geodesic', 'icons', 'path', 'strokeColor',
    'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'options'
];
var OUTPUTS$13 = [
    'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown',
    'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'
];
var Polyline$1 = (function (_super) {
    __extends$77(Polyline, _super);
    function Polyline(ng2MapComp) {
        _super.call(this, ng2MapComp, 'Polyline', INPUTS$13, OUTPUTS$13);
    }
    Polyline.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map > polyline',
                    inputs: INPUTS$13,
                    outputs: OUTPUTS$13,
                },] },
    ];
    Polyline.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
    ];
    return Polyline;
}(baseMapDirective.BaseMapDirective));
var Polyline_1 = Polyline$1;
var polyline = {
	Polyline: Polyline_1
};

var __extends$78 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$14 = [
    'selector', 'options',
    'addressControl', 'addressControlOptions', 'clickToGo', 'disableDefaultUI', 'disableDoubleClickZoom',
    'enableCloseButton', 'fullscreenControl', 'fullscreenControlOptions', 'imageDateControl', 'linksControl',
    'motionTracking', 'motionTrackingControl', 'panControl', 'panControlOptions', 'pano',
    'position', 'pov', 'scrollwheel', 'showRoadLabels', 'visible', 'zoomControl', 'zoomControlOptions'
];
var OUTPUTS$14 = [
    'closeclick', 'pano_changed', 'position_changed', 'pov_changed', 'resize', 'status_changed',
    'visible_changed', 'zoom_changed'
];
var StreetViewPanorama$1 = (function (_super) {
    __extends$78(StreetViewPanorama, _super);
    function StreetViewPanorama(ng2MapComp) {
        _super.call(this, ng2MapComp, 'StreetViewPanorama', INPUTS$14, OUTPUTS$14);
    }
    StreetViewPanorama.prototype.initialize = function () {
        this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);
        console.log(this.mapObjectName, 'initialization objectOptions', this.objectOptions);
        var element;
        if (this.objectOptions.selector) {
            element = document.querySelector(this['selector']);
            delete this.objectOptions.selector;
        }
        else {
            element = this.ng2MapComponent.el;
        }
        typeof this.objectOptions.position === 'string' && (delete this.objectOptions.position);
        this.mapObject = new google.maps[this.mapObjectName](element, this.objectOptions);
        this.mapObject['mapObjectName'] = this.mapObjectName;
        this.mapObject['ng2MapComponent'] = this.ng2MapComponent;
        this.ng2Map.setObjectEvents(this.outputs, this, 'mapObject');
        this.ng2MapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);
        this.initialized$.emit(this.mapObject);
    };
    StreetViewPanorama.prototype.ngOnDestroy = function () {
        var _this = this;
        if (this.ng2MapComponent.el) {
            OUTPUTS$14.forEach(function (output) { return google.maps.event.clearListeners(_this.mapObject, output); });
        }
    };
    StreetViewPanorama.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map > street-view-panorama',
                    inputs: INPUTS$14,
                    outputs: OUTPUTS$14,
                },] },
    ];
    StreetViewPanorama.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
    ];
    return StreetViewPanorama;
}(baseMapDirective.BaseMapDirective));
var StreetViewPanorama_1 = StreetViewPanorama$1;
var streetViewPanorama = {
	StreetViewPanorama: StreetViewPanorama_1
};

var __extends$79 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$15 = ['autoRefresh', 'options'];
var OUTPUTS$15 = [];
var TrafficLayer$1 = (function (_super) {
    __extends$79(TrafficLayer, _super);
    function TrafficLayer(ng2MapComp) {
        _super.call(this, ng2MapComp, 'TrafficLayer', INPUTS$15, OUTPUTS$15);
    }
    TrafficLayer.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map > traffic-layer',
                    inputs: INPUTS$15,
                    outputs: OUTPUTS$15,
                },] },
    ];
    TrafficLayer.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
    ];
    return TrafficLayer;
}(baseMapDirective.BaseMapDirective));
var TrafficLayer_1 = TrafficLayer$1;
var trafficLayer = {
	TrafficLayer: TrafficLayer_1
};

var __extends$80 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var INPUTS$16 = [];
var OUTPUTS$16 = [];
var TransitLayer$1 = (function (_super) {
    __extends$80(TransitLayer, _super);
    function TransitLayer(ng2MapComp) {
        _super.call(this, ng2MapComp, 'TransitLayer', INPUTS$16, OUTPUTS$16);
    }
    TransitLayer.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'ng2-map > transit-layer',
                    inputs: INPUTS$16,
                    outputs: OUTPUTS$16,
                },] },
    ];
    TransitLayer.ctorParameters = [
        { type: ng2Map_component.Ng2MapComponent, },
    ];
    return TransitLayer;
}(baseMapDirective.BaseMapDirective));
var TransitLayer_1 = TransitLayer$1;
var transitLayer = {
	TransitLayer: TransitLayer_1
};

var COMPONENTS_DIRECTIVES = [
    ng2Map_component.Ng2MapComponent, infoWindow.InfoWindow,
    marker.Marker, circle.Circle, customMarker.CustomMarker, polygon.Polygon, infoWindow.InfoWindow, polyline.Polyline, groundOverlay.GroundOverlay,
    transitLayer.TransitLayer, trafficLayer.TrafficLayer, heatmapLayer.HeatmapLayer, bicyclingLayer.BicyclingLayer, kmlLayer.KmlLayer, dataLayer.DataLayer,
    streetViewPanorama.StreetViewPanorama, placesAutoComplete.PlacesAutoComplete, directionsRenderer.DirectionsRenderer,
    drawingManager.DrawingManager,
];
var Ng2MapModule$3 = (function () {
    function Ng2MapModule() {
    }
    Ng2MapModule.forRoot = function (config$$1) {
        if (config$$1 === void 0) { config$$1 = {}; }
        return {
            ngModule: Ng2MapModule,
            providers: [
                { provide: config.NG_MAP_CONFIG_TOKEN, useValue: config$$1 }
            ],
        };
    };
    Ng2MapModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [common_1.CommonModule],
                    declarations: COMPONENTS_DIRECTIVES,
                    exports: [COMPONENTS_DIRECTIVES],
                    providers: [
                        geoCoder.GeoCoder,
                        navigatorGeolocation.NavigatorGeolocation,
                        ng2Map.Ng2Map,
                        optionBuilder.OptionBuilder
                    ]
                },] },
    ];
    Ng2MapModule.ctorParameters = [];
    return Ng2MapModule;
}());
var Ng2MapModule_1 = Ng2MapModule$3;
var ng2Map_module = {
	Ng2MapModule: Ng2MapModule_1
};

var BicyclingLayer = bicyclingLayer.BicyclingLayer;
var NavigatorGeolocation = navigatorGeolocation.NavigatorGeolocation;
var OptionBuilder = optionBuilder.OptionBuilder;
var NG_MAP_CONFIG_TOKEN = config.NG_MAP_CONFIG_TOKEN;
var Ng2MapComponent$2 = ng2Map_component.Ng2MapComponent;
var InfoWindow = infoWindow.InfoWindow;
var CustomMarker = customMarker.CustomMarker;
var Circle = circle.Circle;
var DataLayer = dataLayer.DataLayer;
var DirectionsRenderer = directionsRenderer.DirectionsRenderer;
var DrawingManager = drawingManager.DrawingManager;
var GeoCoder = geoCoder.GeoCoder;
var GroundOverlay = groundOverlay.GroundOverlay;
var HeatmapLayer = heatmapLayer.HeatmapLayer;
var KmlLayer = kmlLayer.KmlLayer;
var Marker = marker.Marker;
var Ng2Map = ng2Map.Ng2Map;
var PlacesAutoComplete = placesAutoComplete.PlacesAutoComplete;
var Polygon = polygon.Polygon;
var Polyline = polyline.Polyline;
var StreetViewPanorama = streetViewPanorama.StreetViewPanorama;
var TrafficLayer = trafficLayer.TrafficLayer;
var TransitLayer = transitLayer.TransitLayer;
var Ng2MapModule$2 = ng2Map_module.Ng2MapModule;
var index$10 = {
	BicyclingLayer: BicyclingLayer,
	NavigatorGeolocation: NavigatorGeolocation,
	OptionBuilder: OptionBuilder,
	NG_MAP_CONFIG_TOKEN: NG_MAP_CONFIG_TOKEN,
	Ng2MapComponent: Ng2MapComponent$2,
	InfoWindow: InfoWindow,
	CustomMarker: CustomMarker,
	Circle: Circle,
	DataLayer: DataLayer,
	DirectionsRenderer: DirectionsRenderer,
	DrawingManager: DrawingManager,
	GeoCoder: GeoCoder,
	GroundOverlay: GroundOverlay,
	HeatmapLayer: HeatmapLayer,
	KmlLayer: KmlLayer,
	Marker: Marker,
	Ng2Map: Ng2Map,
	PlacesAutoComplete: PlacesAutoComplete,
	Polygon: Polygon,
	Polyline: Polyline,
	StreetViewPanorama: StreetViewPanorama,
	TrafficLayer: TrafficLayer,
	TransitLayer: TransitLayer,
	Ng2MapModule: Ng2MapModule$2
};

var Ng2Util = (function () {
    function Ng2Util() {
    }
    Ng2Util.getDocumentPosition = function (oElement) {
        var posX = 0, posY = 0;
        if (oElement.offsetParent) {
            for (; oElement; oElement = oElement.offsetParent) {
                posX += oElement.offsetLeft;
                posY += oElement.offsetTop;
            }
            return { x: posX, y: posY };
        }
        else {
            return { x: oElement['x'], y: oElement['y'] };
        }
    };
    Ng2Util.getMousePositionInElement = function (evt, element) {
        evt = evt || window.event;
        var posX = 0, posY = 0;
        var elPos = this.getDocumentPosition(element);
        if (evt.pageX || evt.pageY) {
            posX = evt.pageX;
            posY = evt.pageY;
        }
        else if (evt.clientX || evt.clientY) {
            posX = evt.clientX +
                document.body.scrollLeft +
                document.documentElement.scrollLeft;
            posY = evt.clientY +
                document.body.scrollTop +
                document.documentElement.scrollTop;
        }
        return {
            x: posX - elPos.x,
            y: posY - elPos.y
        };
    };
    return Ng2Util;
}());
var Ng2Util_1 = Ng2Util;
var ng2Util = {
	Ng2Util: Ng2Util_1
};

var Ng2Overlay$1 = (function () {
    function Ng2Overlay(el, options) {
        options = options || {};
        this.id = options.id;
        this.type = options.type;
        if (!this.id) {
            throw "Invalid overlay id";
        }
        this.element = el;
        this.windowOverlay = options.windowOverlay;
        this.position = this.getPositionProperty(options.position || 'center center');
    }
    Ng2Overlay.prototype.positionIt = function (event) {
        if (this.position.inside) {
            this.positionItInside(this.position);
        }
        else {
            this.positionItOutside(this.position, event);
        }
    };
    Ng2Overlay.prototype.getPositionProperty = function (positionStr) {
        var position = {}, inside;
        var _a = positionStr.split(' '), vertical = _a[0], horizontal = _a[1], insideStr = _a[2];
        horizontal = horizontal || 'center';
        vertical = vertical || 'center';
        inside = (insideStr !== 'outside' || this.windowOverlay);
        position.horizontal = Ng2Overlay[horizontal.toUpperCase()];
        position.vertical = Ng2Overlay[vertical.toUpperCase()];
        position.inside = inside;
        return position;
    };
    Ng2Overlay.prototype.positionItInside = function (position) {
        this.element.style.display = 'flex';
        if (this.windowOverlay) {
            this.element.style.position = 'fixed';
            Object.assign(this.element.style, {
                backgroundColor: 'rgba(0,0,0,0.2)',
                top: '0', left: '0', bottom: '0', right: '0',
                width: '100%', height: '100%'
            });
        }
        else {
            var parentEl = this.element.parentElement;
            Object.assign(this.element.style, {
                position: 'absolute',
                backgroundColor: 'rgba(0,0,0,0.2)',
                top: parentEl.offsetTop + 'px',
                left: parentEl.offsetLeft + 'px',
                width: parentEl.offsetWidth + 'px',
                height: parentEl.offsetHeight + 'px'
            });
        }
        
        switch (position.horizontal) {
            case Ng2Overlay.LEFT:
                this.element.style.justifyContent = 'flex-start';
                break;
            case Ng2Overlay.CENTER:
                this.element.style.justifyContent = 'center';
                break;
            case Ng2Overlay.RIGHT:
                this.element.style.justifyContent = 'flex-end';
                break;
        }
        switch (position.vertical) {
            case Ng2Overlay.LEFT:
                this.element.style.alignItems = 'flex-start';
                break;
            case Ng2Overlay.CENTER:
            case Ng2Overlay.MIDDLE:
                this.element.style.alignItems = 'center';
                break;
            case Ng2Overlay.RIGHT:
                this.element.style.alignItems = 'flex-end';
                break;
        }
    };
    Ng2Overlay.prototype.positionItOutside = function (position, event) {
        var parentEl = this.element.parentElement;
        Object.assign(this.element.style, {
            position: 'absolute',
            pointerEvents: 'none',
            top: parentEl.offsetTop + 'px',
            left: parentEl.offsetLeft + 'px',
            width: parentEl.offsetWidth + 'px',
            height: parentEl.offsetHeight + 'px'
        });
        this.element.style.display = 'block';
        var elToPosition = (this.element.children[0]);
        elToPosition.style.position = 'absolute';
        elToPosition.style.pointerEvents = 'auto';
        switch (position.vertical) {
            case Ng2Overlay.TOP:
                elToPosition.style.bottom = this.element.offsetHeight + 'px';
                break;
            case Ng2Overlay.BOTTOM:
                elToPosition.style.top = this.element.offsetHeight + 'px';
                break;
            case Ng2Overlay.LEFT:
                elToPosition.style.right = this.element.offsetWidth + 'px';
                break;
            case Ng2Overlay.RIGHT:
                elToPosition.style.left = this.element.offsetWidth + 'px';
                break;
        }
        switch (position.horizontal) {
            case Ng2Overlay.CENTER:
                elToPosition.style.left = (this.element.offsetWidth - elToPosition.offsetWidth) / 2 + 'px';
                break;
            case Ng2Overlay.LEFT:
                elToPosition.style.left = '0';
                break;
            case Ng2Overlay.RIGHT:
                elToPosition.style.right = '0';
                break;
            case Ng2Overlay.TOP:
                elToPosition.style.top = '0';
                break;
            case Ng2Overlay.BOTTOM:
                elToPosition.style.bottom = '0';
                break;
            case Ng2Overlay.CURSOR:
                var mousePos = ng2Util.Ng2Util.getMousePositionInElement(event, this.element);
                if ((mousePos.x + elToPosition.offsetWidth) > this.element.offsetWidth) {
                    elToPosition.style.left = (this.element.offsetWidth - elToPosition.offsetWidth - 5) + 'px';
                }
                else if (mousePos.x < elToPosition.offsetWidth / 2) {
                    elToPosition.style.left = '0px';
                }
                else {
                    elToPosition.style.left = mousePos.x - elToPosition.offsetWidth / 2 + 'px';
                }
                break;
        }
    };
    return Ng2Overlay;
}());
Ng2Overlay$1.TOP = 11;
Ng2Overlay$1.MIDDLE = 12;
Ng2Overlay$1.BOTTOM = 13;
Ng2Overlay$1.LEFT = 21;
Ng2Overlay$1.CENTER = 22;
Ng2Overlay$1.RIGHT = 23;
Ng2Overlay$1.CURSOR = 31;
var Ng2Overlay_1 = Ng2Overlay$1;
var ng2Overlay = {
	Ng2Overlay: Ng2Overlay_1
};

var __decorate$3 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Ng2OverlayManager$3 = Ng2OverlayManager_1 = (function () {
    function Ng2OverlayManager() {
    }
    Ng2OverlayManager.prototype.register = function (overlay) {
        Ng2OverlayManager_1.overlays[overlay.id] = overlay;
    };
    Ng2OverlayManager.prototype.open = function (arg, event) {
        var overlay = typeof arg === 'string' ? Ng2OverlayManager_1.overlays[arg] : arg;
        if (!overlay.opened) {
            overlay.positionIt(event);
            overlay.opened = true;
        }
    };
    Ng2OverlayManager.prototype.close = function (arg) {
        var overlay = typeof arg === 'string' ? Ng2OverlayManager_1.overlays[arg] : arg;
        overlay.element.style.display = 'none';
        overlay.opened = false;
    };
    return Ng2OverlayManager;
}());
Ng2OverlayManager$3.overlays = {};
Ng2OverlayManager$3 = Ng2OverlayManager_1 = __decorate$3([
    core_1.Injectable()
], Ng2OverlayManager$3);
var Ng2OverlayManager_2 = Ng2OverlayManager$3;
var Ng2OverlayManager_1;
var ng2OverlayManager = {
	Ng2OverlayManager: Ng2OverlayManager_2
};

var __decorate$4 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2OverlayDirective$1 = (function () {
    function Ng2OverlayDirective(viewContainerRef, overlayManager) {
        this.viewContainerRef = viewContainerRef;
        this.overlayManager = overlayManager;
        this.el = this.viewContainerRef.element.nativeElement;
    }
    Ng2OverlayDirective.prototype.ngAfterViewInit = function () {
        this.wrapItWithOverlayTag();
        this.registerToOverlayManager();
    };
    Ng2OverlayDirective.prototype.wrapItWithOverlayTag = function () {
        this.overlayEl = document.createElement('ng2-overlay');
        this.overlayEl.style.display = 'none';
        this.el.parentElement.insertBefore(this.overlayEl, this.el.nextSibling);
        this.overlayEl.appendChild(this.el);
    };
    Ng2OverlayDirective.prototype.registerToOverlayManager = function () {
        var positionStr = this.overlayPosition;
        var overlay = new ng2Overlay.Ng2Overlay(this.overlayEl, {
            id: this.el.id,
            windowOverlay: this.overlayOf == "window",
            position: positionStr
        });
        this.overlayManager.register(overlay);
    };
    return Ng2OverlayDirective;
}());
__decorate$4([
    core_1.Input('ng2-overlay-of'),
    __metadata$2("design:type", String)
], Ng2OverlayDirective$1.prototype, "overlayOf", void 0);
__decorate$4([
    core_1.Input('ng2-overlay-position'),
    __metadata$2("design:type", String)
], Ng2OverlayDirective$1.prototype, "overlayPosition", void 0);
Ng2OverlayDirective$1 = __decorate$4([
    core_1.Directive({
        selector: '[ng2-overlay], [ng2-overlay-of], [ng2-overlay-position]',
    }),
    __metadata$2("design:paramtypes", [core_1.ViewContainerRef,
        ng2OverlayManager.Ng2OverlayManager])
], Ng2OverlayDirective$1);
var Ng2OverlayDirective_1 = Ng2OverlayDirective$1;
var ng2Overlay_directive = {
	Ng2OverlayDirective: Ng2OverlayDirective_1
};

var __decorate$5 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Ng2OverlayManager$4 = ng2OverlayManager.Ng2OverlayManager;
var Ng2OverlayModule$1 = (function () {
    function Ng2OverlayModule() {
    }
    return Ng2OverlayModule;
}());
Ng2OverlayModule$1 = __decorate$5([
    core_1.NgModule({
        imports: [common_1.CommonModule, forms_1.FormsModule],
        declarations: [ng2Overlay_directive.Ng2OverlayDirective],
        providers: [ng2OverlayManager.Ng2OverlayManager],
        exports: [ng2Overlay_directive.Ng2OverlayDirective]
    })
], Ng2OverlayModule$1);
var Ng2OverlayModule_1 = Ng2OverlayModule$1;

var ng2Overlay_module = {
	Ng2OverlayManager: Ng2OverlayManager$4,
	Ng2OverlayModule: Ng2OverlayModule_1
};

var Ng2Overlay = ng2Overlay.Ng2Overlay;
var Ng2OverlayManager$2 = ng2OverlayManager.Ng2OverlayManager;
var Ng2OverlayDirective = ng2Overlay_directive.Ng2OverlayDirective;
var Ng2OverlayModule = ng2Overlay_module.Ng2OverlayModule;
var index$14 = {
	Ng2Overlay: Ng2Overlay,
	Ng2OverlayManager: Ng2OverlayManager$2,
	Ng2OverlayDirective: Ng2OverlayDirective,
	Ng2OverlayModule: Ng2OverlayModule
};

var __decorate$2 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2PopupComponent$3 = (function () {
    function Ng2PopupComponent(componentResolver, overlayManager) {
        this.componentResolver = componentResolver;
        this.overlayManager = overlayManager;
    }
    Ng2PopupComponent.prototype.ngAfterViewInit = function () {
        var overlayEl = this.marker.element.nativeElement.parentElement.parentElement;
        var overlay = new index$14.Ng2Overlay(overlayEl, {
            id: 'ng2-popup-overlay',
            windowOverlay: true,
            position: 'center center'
        });
        this.overlayManager.register(overlay);
    };
    Ng2PopupComponent.prototype.open = function (component, options) {
        this.close();
        this.opened = true;
        this.classNames = options.classNames;
        this.closeButton = options.closeButton;
        var factory = this.componentResolver.resolveComponentFactory(component);
        var componentRef = this.marker.createComponent(factory);
        componentRef.instance.popupOptions = options;
        componentRef.instance.popup = this;
        this.overlayManager.open('ng2-popup-overlay', null);
    };
    Ng2PopupComponent.prototype.close = function () {
        this.opened = false;
        this.overlayManager.close('ng2-popup-overlay');
        try {
            this.marker.remove();
        }
        catch (e) { }
    };
    return Ng2PopupComponent;
}());
__decorate$2([
    core_1.ViewChild('marker', { read: core_1.ViewContainerRef }),
    __metadata$1("design:type", Object)
], Ng2PopupComponent$3.prototype, "marker", void 0);
Ng2PopupComponent$3 = __decorate$2([
    core_1.Component({
        selector: 'ng2-popup',
        directives: [index$14.Ng2OverlayDirective],
        providers: [index$14.Ng2OverlayManager],
        template: "\n    <div id=\"ng2-popup-overlay\"> <!-- <-- this is overlay -->\n      <div class=\"popup-container {{classNames}}\" [ngClass]=\"{opened: opened}\">\n        <div *ngIf=\"closeButton != false\" class=\"close-popup\" (click)=\"close()\">x</div>\n        <div class=\"marker\" #marker></div> <!-- to position popup component -->\n        <!-- popup component will be here -->\n      </div>\n    </div>\n  ",
        styles: ["\n    .popup-container { \n      background: #fff;\n      border: 1px solid #ccc;\n      box-shadow: 0 5px 15px rgba(0,0,0,.5);\n      border-radius: 5px;\n      width: 600px;\n      display: none;\n    }\n    .popup-container.opened { \n      display: block;\n    }\n    .close-popup {\n      font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n      float: right; \n      cursor: pointer; \n      font-size: 21px;\n      line-height: 1;\n      text-shadow: 0 1px 0 #fff;\n      opacity: 0.2;\n      padding: 10px;\n    }\n    /*.marker ~ * { display:block; background: #fff}*/\n    .popup-container.small { width: 300px}\n    .popup-container.large { width: 900px}\n  "],
        encapsulation: core_1.ViewEncapsulation.None
    }),
    __metadata$1("design:paramtypes", [core_1.ComponentFactoryResolver,
        index$14.Ng2OverlayManager])
], Ng2PopupComponent$3);
var Ng2PopupComponent_1 = Ng2PopupComponent$3;
var ng2Popup_component = {
	Ng2PopupComponent: Ng2PopupComponent_1
};

var __decorate$6 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2MessagePopupComponent$3 = (function () {
    function Ng2MessagePopupComponent() {
    }
    return Ng2MessagePopupComponent;
}());
Ng2MessagePopupComponent$3 = __decorate$6([
    core_1.Component({
        selector: 'ng2-message-popup',
        template: "\n    <div>\n      <div class=\"popup-header\">{{popupOptions.title}}</div>\n      <div class=\"popup-body\">{{popupOptions.message}}</div>\n      <div class=\"popup-footer\" *ngIf=\"popupOptions.buttons\">\n        <button *ngIf=\"popupOptions.buttons.OK\"\n          (click)=\"popupOptions.buttons.OK()\">Ok</button>\n        <button *ngIf=\"popupOptions.buttons.CANCEL\"\n          (click)=\"popupOptions.buttons.CANCEL()\">Cancel</button>\n      </div>\n    </div>\n  ",
        encapsulation: core_1.ViewEncapsulation.None,
        styles: ["\n    .popup-header, .popup-body, .popup-footer {\n      padding: 15px;\n      text-align: center;\n    }\n    .popup-header  {\n      font-weight: bold;\n      font-size: 18px;\n      border-bottom: 1px solid #ccc;\n    }\n  "]
    }),
    __metadata$3("design:paramtypes", [])
], Ng2MessagePopupComponent$3);
var Ng2MessagePopupComponent_1 = Ng2MessagePopupComponent$3;
var ng2MessagePopup_component = {
	Ng2MessagePopupComponent: Ng2MessagePopupComponent_1
};

var __decorate$7 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2PopupComponent$4 = ng2Popup_component.Ng2PopupComponent;
var Ng2MessagePopupComponent$4 = ng2MessagePopup_component.Ng2MessagePopupComponent;
var Ng2PopupModule$1 = (function () {
    function Ng2PopupModule() {
    }
    return Ng2PopupModule;
}());
Ng2PopupModule$1 = __decorate$7([
    core_1.NgModule({
        imports: [common_1.CommonModule, forms_1.FormsModule, index$14.Ng2OverlayModule],
        declarations: [ng2MessagePopup_component.Ng2MessagePopupComponent, ng2Popup_component.Ng2PopupComponent],
        exports: [ng2MessagePopup_component.Ng2MessagePopupComponent, ng2Popup_component.Ng2PopupComponent],
        entryComponents: [ng2MessagePopup_component.Ng2MessagePopupComponent]
    }),
    __metadata$4("design:paramtypes", [])
], Ng2PopupModule$1);
var Ng2PopupModule_1 = Ng2PopupModule$1;
var ng2Popup_module = {
	Ng2PopupComponent: Ng2PopupComponent$4,
	Ng2MessagePopupComponent: Ng2MessagePopupComponent$4,
	Ng2PopupModule: Ng2PopupModule_1
};

var Ng2PopupComponent$2 = ng2Popup_component.Ng2PopupComponent;
var Ng2MessagePopupComponent$2 = ng2MessagePopup_component.Ng2MessagePopupComponent;
var Ng2PopupModule = ng2Popup_module.Ng2PopupModule;
var index$12 = {
	Ng2PopupComponent: Ng2PopupComponent$2,
	Ng2MessagePopupComponent: Ng2MessagePopupComponent$2,
	Ng2PopupModule: Ng2PopupModule
};

var __decorate$8 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2MenuDirective$1 = (function () {
    function Ng2MenuDirective(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
        this.el = this.viewContainerRef.element.nativeElement;
        this.el.parentElement.style.position = 'relative';
        this.el.parentElement.className += ' has-ng2-menu';
    }
    Ng2MenuDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.el.parentElement.addEventListener('mouseover', function (event) {
            _this.el.parentElement.className += " active";
            _this.el.style.position = "absolute";
            if (_this.el.parentElement.offsetWidth) {
                _this.setPosition();
            }
            else {
                setTimeout(function () { return _this.setPosition(); });
            }
        });
        this.el.parentElement.addEventListener('mouseout', function (event) {
            _this.el.parentElement.className = _this.el.parentElement.className.replace(/\s?active/, '');
        });
    };
    Ng2MenuDirective.prototype.setPosition = function () {
        if (this.position === "bottom") {
            this.el.style.left = "0";
            this.el.style.top = this.el.parentElement.offsetHeight - 1 + 'px';
        }
        else if (this.position === "top") {
            this.el.style.left = "0";
            this.el.style.bottom = this.el.parentElement.offsetHeight - 1 + 'px';
        }
        else if (this.position === "right") {
            this.el.style.left = this.el.parentElement.offsetWidth - 1 + 'px';
            this.el.style.top = "0";
        }
        else if (this.position === "left") {
            this.el.style.right = this.el.parentElement.offsetWidth - 1 + 'px';
            this.el.style.top = "0";
        }
    };
    return Ng2MenuDirective;
}());
__decorate$8([
    core_1.Input('ng2-menu'),
    __metadata$5("design:type", String)
], Ng2MenuDirective$1.prototype, "position", void 0);
Ng2MenuDirective$1 = __decorate$8([
    core_1.Directive({
        selector: '[ng2-menu]'
    }),
    __metadata$5("design:paramtypes", [core_1.ViewContainerRef])
], Ng2MenuDirective$1);
var Ng2MenuDirective_1 = Ng2MenuDirective$1;
var ng2Menu_directive = {
	Ng2MenuDirective: Ng2MenuDirective_1
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var DebugDomRootRenderer$1 = core.__core_private__.DebugDomRootRenderer;

var NoOpAnimationPlayer$1 = core.__core_private__.NoOpAnimationPlayer;

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NoOpAnimationDriver = (function () {
    function NoOpAnimationDriver() {
    }
    NoOpAnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        return new NoOpAnimationPlayer$1();
    };
    return NoOpAnimationDriver;
}());
var AnimationDriver = (function () {
    function AnimationDriver() {
    }
    AnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
    AnimationDriver.NOOP = new NoOpAnimationDriver();
    return AnimationDriver;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var globalScope$3;
if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
        globalScope$3 = (self);
    }
    else {
        globalScope$3 = (global);
    }
}
else {
    globalScope$3 = (window);
}

var _global$3 = globalScope$3;

_global$3.assert = function assert(condition) {
};
function isPresent$3(obj) {
    return obj != null;
}
function isBlank$4(obj) {
    return obj == null;
}

function stringify$3(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return "" + token.overriddenName;
    }
    if (token.name) {
        return "" + token.name;
    }
    var /** @type {?} */ res = token.toString();
    var /** @type {?} */ newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}





function setValueOnPath$3(global, path, value) {
    var /** @type {?} */ parts = path.split('.');
    var /** @type {?} */ obj = global;
    while (parts.length > 1) {
        var /** @type {?} */ name_1 = parts.shift();
        if (obj.hasOwnProperty(name_1) && obj[name_1] != null) {
            obj = obj[name_1];
        }
        else {
            obj = obj[name_1] = {};
        }
    }
    if (obj === undefined || obj === null) {
        obj = {};
    }
    obj[parts.shift()] = value;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _DOM = null;
function getDOM() {
    return _DOM;
}

function setRootDomAdapter(adapter) {
    if (!_DOM) {
        _DOM = adapter;
    }
}
var DomAdapter = (function () {
    function DomAdapter() {
        this.resourceLoaderType = null;
    }
    DomAdapter.prototype.hasProperty = function (element /** TODO #9100 */, name) { };
    DomAdapter.prototype.setProperty = function (el, name, value) { };
    DomAdapter.prototype.getProperty = function (el, name) { };
    DomAdapter.prototype.invoke = function (el, methodName, args) { };
    DomAdapter.prototype.logError = function (error) { };
    DomAdapter.prototype.log = function (error) { };
    DomAdapter.prototype.logGroup = function (error) { };
    DomAdapter.prototype.logGroupEnd = function () { };
    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
        get: function () { return this._attrToPropMap; },
        set: function (value) { this._attrToPropMap = value; },
        enumerable: true,
        configurable: true
    });
    
    
    DomAdapter.prototype.parse = function (templateHtml) { };
    DomAdapter.prototype.query = function (selector) { };
    DomAdapter.prototype.querySelector = function (el /** TODO #9100 */, selector) { };
    DomAdapter.prototype.querySelectorAll = function (el /** TODO #9100 */, selector) { };
    DomAdapter.prototype.on = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener) { };
    DomAdapter.prototype.onAndCancel = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener) { };
    DomAdapter.prototype.dispatchEvent = function (el /** TODO #9100 */, evt) { };
    DomAdapter.prototype.createMouseEvent = function (eventType) { };
    DomAdapter.prototype.createEvent = function (eventType) { };
    DomAdapter.prototype.preventDefault = function (evt) { };
    DomAdapter.prototype.isPrevented = function (evt) { };
    DomAdapter.prototype.getInnerHTML = function (el) { };
    DomAdapter.prototype.getTemplateContent = function (el) { };
    DomAdapter.prototype.getOuterHTML = function (el) { };
    DomAdapter.prototype.nodeName = function (node) { };
    DomAdapter.prototype.nodeValue = function (node) { };
    DomAdapter.prototype.type = function (node) { };
    DomAdapter.prototype.content = function (node) { };
    DomAdapter.prototype.firstChild = function (el) { };
    DomAdapter.prototype.nextSibling = function (el) { };
    DomAdapter.prototype.parentElement = function (el) { };
    DomAdapter.prototype.childNodes = function (el) { };
    DomAdapter.prototype.childNodesAsList = function (el) { };
    DomAdapter.prototype.clearNodes = function (el) { };
    DomAdapter.prototype.appendChild = function (el /** TODO #9100 */, node) { };
    DomAdapter.prototype.removeChild = function (el /** TODO #9100 */, node) { };
    DomAdapter.prototype.replaceChild = function (el /** TODO #9100 */, newNode /** TODO #9100 */, oldNode) { };
    DomAdapter.prototype.remove = function (el) { };
    DomAdapter.prototype.insertBefore = function (el /** TODO #9100 */, node) { };
    DomAdapter.prototype.insertAllBefore = function (el /** TODO #9100 */, nodes) { };
    DomAdapter.prototype.insertAfter = function (el /** TODO #9100 */, node) { };
    DomAdapter.prototype.setInnerHTML = function (el /** TODO #9100 */, value) { };
    DomAdapter.prototype.getText = function (el) { };
    DomAdapter.prototype.setText = function (el /** TODO #9100 */, value) { };
    DomAdapter.prototype.getValue = function (el) { };
    DomAdapter.prototype.setValue = function (el /** TODO #9100 */, value) { };
    DomAdapter.prototype.getChecked = function (el) { };
    DomAdapter.prototype.setChecked = function (el /** TODO #9100 */, value) { };
    DomAdapter.prototype.createComment = function (text) { };
    DomAdapter.prototype.createTemplate = function (html) { };
    DomAdapter.prototype.createElement = function (tagName /** TODO #9100 */, doc) { };
    DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };
    DomAdapter.prototype.createTextNode = function (text, doc) { };
    DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };
    DomAdapter.prototype.createStyleElement = function (css, doc) { };
    DomAdapter.prototype.createShadowRoot = function (el) { };
    DomAdapter.prototype.getShadowRoot = function (el) { };
    DomAdapter.prototype.getHost = function (el) { };
    DomAdapter.prototype.getDistributedNodes = function (el) { };
    DomAdapter.prototype.clone /*<T extends Node>*/ = function (node) { };
    DomAdapter.prototype.getElementsByClassName = function (element /** TODO #9100 */, name) { };
    DomAdapter.prototype.getElementsByTagName = function (element /** TODO #9100 */, name) { };
    DomAdapter.prototype.classList = function (element) { };
    DomAdapter.prototype.addClass = function (element /** TODO #9100 */, className) { };
    DomAdapter.prototype.removeClass = function (element /** TODO #9100 */, className) { };
    DomAdapter.prototype.hasClass = function (element /** TODO #9100 */, className) { };
    DomAdapter.prototype.setStyle = function (element /** TODO #9100 */, styleName, styleValue) { };
    DomAdapter.prototype.removeStyle = function (element /** TODO #9100 */, styleName) { };
    DomAdapter.prototype.getStyle = function (element /** TODO #9100 */, styleName) { };
    DomAdapter.prototype.hasStyle = function (element /** TODO #9100 */, styleName, styleValue) { };
    DomAdapter.prototype.tagName = function (element) { };
    DomAdapter.prototype.attributeMap = function (element) { };
    DomAdapter.prototype.hasAttribute = function (element /** TODO #9100 */, attribute) { };
    DomAdapter.prototype.hasAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
    DomAdapter.prototype.getAttribute = function (element /** TODO #9100 */, attribute) { };
    DomAdapter.prototype.getAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
    DomAdapter.prototype.setAttribute = function (element /** TODO #9100 */, name, value) { };
    DomAdapter.prototype.setAttributeNS = function (element /** TODO #9100 */, ns, name, value) { };
    DomAdapter.prototype.removeAttribute = function (element /** TODO #9100 */, attribute) { };
    DomAdapter.prototype.removeAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
    DomAdapter.prototype.templateAwareRoot = function (el) { };
    DomAdapter.prototype.createHtmlDocument = function () { };
    DomAdapter.prototype.defaultDoc = function () { };
    DomAdapter.prototype.getBoundingClientRect = function (el) { };
    DomAdapter.prototype.getTitle = function () { };
    DomAdapter.prototype.setTitle = function (newTitle) { };
    DomAdapter.prototype.elementMatches = function (n /** TODO #9100 */, selector) { };
    DomAdapter.prototype.isTemplateElement = function (el) { };
    DomAdapter.prototype.isTextNode = function (node) { };
    DomAdapter.prototype.isCommentNode = function (node) { };
    DomAdapter.prototype.isElementNode = function (node) { };
    DomAdapter.prototype.hasShadowRoot = function (node) { };
    DomAdapter.prototype.isShadowRoot = function (node) { };
    DomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (node) { };
    DomAdapter.prototype.adoptNode /*<T extends Node>*/ = function (node) { };
    DomAdapter.prototype.getHref = function (element) { };
    DomAdapter.prototype.getEventKey = function (event) { };
    DomAdapter.prototype.resolveAndSetHref = function (element /** TODO #9100 */, baseUrl, href) { };
    DomAdapter.prototype.supportsDOMEvents = function () { };
    DomAdapter.prototype.supportsNativeShadowDOM = function () { };
    DomAdapter.prototype.getGlobalEventTarget = function (target) { };
    DomAdapter.prototype.getHistory = function () { };
    DomAdapter.prototype.getLocation = function () { };
    DomAdapter.prototype.getBaseHref = function () { };
    DomAdapter.prototype.resetBaseElement = function () { };
    DomAdapter.prototype.getUserAgent = function () { };
    DomAdapter.prototype.setData = function (element /** TODO #9100 */, name, value) { };
    DomAdapter.prototype.getComputedStyle = function (element) { };
    DomAdapter.prototype.getData = function (element /** TODO #9100 */, name) { };
    DomAdapter.prototype.setGlobalVar = function (name, value) { };
    DomAdapter.prototype.supportsWebAnimation = function () { };
    DomAdapter.prototype.performanceNow = function () { };
    DomAdapter.prototype.getAnimationPrefix = function () { };
    DomAdapter.prototype.getTransitionEnd = function () { };
    DomAdapter.prototype.supportsAnimation = function () { };
    DomAdapter.prototype.supportsCookies = function () { };
    DomAdapter.prototype.getCookie = function (name) { };
    DomAdapter.prototype.setCookie = function (name, value) { };
    return DomAdapter;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var WebAnimationsPlayer = (function () {
    function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
        var _this = this;
        if (previousPlayers === void 0) { previousPlayers = []; }
        this.element = element;
        this.keyframes = keyframes;
        this.options = options;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._initialized = false;
        this._finished = false;
        this._started = false;
        this._destroyed = false;
        this.parentPlayer = null;
        this._duration = options['duration'];
        this.previousStyles = {};
        previousPlayers.forEach(function (player) {
            var styles = player._captureStyles();
            Object.keys(styles).forEach(function (prop) { return _this.previousStyles[prop] = styles[prop]; });
        });
    }
    WebAnimationsPlayer.prototype._onFinish = function () {
        if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach(function (fn) { return fn(); });
            this._onDoneFns = [];
        }
    };
    WebAnimationsPlayer.prototype.init = function () {
        var _this = this;
        if (this._initialized)
            return;
        this._initialized = true;
        var /** @type {?} */ keyframes = this.keyframes.map(function (styles) {
            var /** @type {?} */ formattedKeyframe = {};
            Object.keys(styles).forEach(function (prop, index) {
                var /** @type {?} */ value = styles[prop];
                if (value == core.AUTO_STYLE) {
                    value = _computeStyle(_this.element, prop);
                }
                if (value != undefined) {
                    formattedKeyframe[prop] = value;
                }
            });
            return formattedKeyframe;
        });
        var /** @type {?} */ previousStyleProps = Object.keys(this.previousStyles);
        if (previousStyleProps.length) {
            var /** @type {?} */ startingKeyframe_1 = keyframes[0];
            var /** @type {?} */ missingStyleProps_1 = [];
            previousStyleProps.forEach(function (prop) {
                if (!isPresent$3(startingKeyframe_1[prop])) {
                    missingStyleProps_1.push(prop);
                }
                startingKeyframe_1[prop] = _this.previousStyles[prop];
            });
            if (missingStyleProps_1.length) {
                var _loop_1 = function(i) {
                    var /** @type {?} */ kf = keyframes[i];
                    missingStyleProps_1.forEach(function (prop) { kf[prop] = _computeStyle(_this.element, prop); });
                };
                for (var /** @type {?} */ i = 1; i < keyframes.length; i++) {
                    _loop_1(i);
                }
            }
        }
        this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
        this._finalKeyframe = _copyKeyframeStyles(keyframes[keyframes.length - 1]);
        this._resetDomPlayerState();
        this._player.addEventListener('finish', function () { return _this._onFinish(); });
    };
    WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {
        return (element['animate'](keyframes, options));
    };
    Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
        get: function () { return this._player; },
        enumerable: true,
        configurable: true
    });
    WebAnimationsPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
    WebAnimationsPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
    WebAnimationsPlayer.prototype.play = function () {
        this.init();
        if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) { return fn(); });
            this._onStartFns = [];
            this._started = true;
        }
        this._player.play();
    };
    WebAnimationsPlayer.prototype.pause = function () {
        this.init();
        this._player.pause();
    };
    WebAnimationsPlayer.prototype.finish = function () {
        this.init();
        this._onFinish();
        this._player.finish();
    };
    WebAnimationsPlayer.prototype.reset = function () {
        this._resetDomPlayerState();
        this._destroyed = false;
        this._finished = false;
        this._started = false;
    };
    WebAnimationsPlayer.prototype._resetDomPlayerState = function () {
        if (this._player) {
            this._player.cancel();
        }
    };
    WebAnimationsPlayer.prototype.restart = function () {
        this.reset();
        this.play();
    };
    WebAnimationsPlayer.prototype.hasStarted = function () { return this._started; };
    WebAnimationsPlayer.prototype.destroy = function () {
        if (!this._destroyed) {
            this._resetDomPlayerState();
            this._onFinish();
            this._destroyed = true;
        }
    };
    Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
        get: function () { return this._duration; },
        enumerable: true,
        configurable: true
    });
    WebAnimationsPlayer.prototype.setPosition = function (p) { this._player.currentTime = p * this.totalTime; };
    WebAnimationsPlayer.prototype.getPosition = function () { return this._player.currentTime / this.totalTime; };
    WebAnimationsPlayer.prototype._captureStyles = function () {
        var _this = this;
        var /** @type {?} */ styles = {};
        if (this.hasStarted()) {
            Object.keys(this._finalKeyframe).forEach(function (prop) {
                if (prop != 'offset') {
                    styles[prop] =
                        _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
                }
            });
        }
        return styles;
    };
    return WebAnimationsPlayer;
}());
function _computeStyle(element, prop) {
    return getDOM().getComputedStyle(element)[prop];
}
function _copyKeyframeStyles(styles) {
    var /** @type {?} */ newStyles = {};
    Object.keys(styles).forEach(function (prop) {
        if (prop != 'offset') {
            newStyles[prop] = styles[prop];
        }
    });
    return newStyles;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var WebAnimationsDriver = (function () {
    function WebAnimationsDriver() {
    }
    WebAnimationsDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        var /** @type {?} */ formattedSteps = [];
        var /** @type {?} */ startingStyleLookup = {};
        if (isPresent$3(startingStyles)) {
            startingStyleLookup = _populateStyles(startingStyles, {});
        }
        keyframes.forEach(function (keyframe) {
            var /** @type {?} */ data = _populateStyles(keyframe.styles, startingStyleLookup);
            data['offset'] = Math.max(0, Math.min(1, keyframe.offset));
            formattedSteps.push(data);
        });
        if (formattedSteps.length == 0) {
            formattedSteps = [startingStyleLookup, startingStyleLookup];
        }
        else if (formattedSteps.length == 1) {
            var /** @type {?} */ start = startingStyleLookup;
            var /** @type {?} */ end = formattedSteps[0];
            end['offset'] = null;
            formattedSteps = [start, end];
        }
        var /** @type {?} */ playerOptions = {
            'duration': duration,
            'delay': delay,
            'fill': 'both'
        };
        if (easing) {
            playerOptions['easing'] = easing;
        }
        previousPlayers = previousPlayers.filter(filterWebAnimationPlayerFn);
        return new WebAnimationsPlayer(element, formattedSteps, playerOptions, /** @type {?} */ (previousPlayers));
    };
    return WebAnimationsDriver;
}());
function _populateStyles(styles, defaultStyles) {
    var /** @type {?} */ data = {};
    styles.styles.forEach(function (entry) { Object.keys(entry).forEach(function (prop) { data[prop] = entry[prop]; }); });
    Object.keys(defaultStyles).forEach(function (prop) {
        if (!isPresent$3(data[prop])) {
            data[prop] = defaultStyles[prop];
        }
    });
    return data;
}
function filterWebAnimationPlayerFn(player) {
    return player instanceof WebAnimationsPlayer;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$82 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var GenericBrowserDomAdapter = (function (_super) {
    __extends$82(GenericBrowserDomAdapter, _super);
    function GenericBrowserDomAdapter() {
        var _this = this;
        _super.call(this);
        this._animationPrefix = null;
        this._transitionEnd = null;
        try {
            var element_1 = this.createElement('div', this.defaultDoc());
            if (isPresent$3(this.getStyle(element_1, 'animationName'))) {
                this._animationPrefix = '';
            }
            else {
                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
                for (var i = 0; i < domPrefixes.length; i++) {
                    if (isPresent$3(this.getStyle(element_1, domPrefixes[i] + 'AnimationName'))) {
                        this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
                        break;
                    }
                }
            }
            var transEndEventNames_1 = {
                WebkitTransition: 'webkitTransitionEnd',
                MozTransition: 'transitionend',
                OTransition: 'oTransitionEnd otransitionend',
                transition: 'transitionend'
            };
            Object.keys(transEndEventNames_1).forEach(function (key) {
                if (isPresent$3(_this.getStyle(element_1, key))) {
                    _this._transitionEnd = transEndEventNames_1[key];
                }
            });
        }
        catch (e) {
            this._animationPrefix = null;
            this._transitionEnd = null;
        }
    }
    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return ((el)).getDistributedNodes(); };
    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
        el.href = href == null ? baseUrl : baseUrl + '/../' + href;
    };
    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
        return typeof ((this.defaultDoc().body)).createShadowRoot === 'function';
    };
    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };
    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };
    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
        return isPresent$3(this._animationPrefix) && isPresent$3(this._transitionEnd);
    };
    return GenericBrowserDomAdapter;
}(DomAdapter));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$81 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _attrToPropMap = {
    'class': 'className',
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex',
};
var DOM_KEY_LOCATION_NUMPAD = 3;
var _keyMap = {
    '\b': 'Backspace',
    '\t': 'Tab',
    '\x7F': 'Delete',
    '\x1B': 'Escape',
    'Del': 'Delete',
    'Esc': 'Escape',
    'Left': 'ArrowLeft',
    'Right': 'ArrowRight',
    'Up': 'ArrowUp',
    'Down': 'ArrowDown',
    'Menu': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'Win': 'OS'
};
var _chromeNumKeyPadMap = {
    'A': '1',
    'B': '2',
    'C': '3',
    'D': '4',
    'E': '5',
    'F': '6',
    'G': '7',
    'H': '8',
    'I': '9',
    'J': '*',
    'K': '+',
    'M': '-',
    'N': '.',
    'O': '/',
    '\x60': '0',
    '\x90': 'NumLock'
};
var BrowserDomAdapter = (function (_super) {
    __extends$81(BrowserDomAdapter, _super);
    function BrowserDomAdapter() {
        _super.apply(this, arguments);
    }
    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };
    BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };
    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { ((el))[name] = value; };
    BrowserDomAdapter.prototype.getProperty = function (el, name) { return ((el))[name]; };
    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { (_a = ((el)))[methodName].apply(_a, args); var _a; };
    BrowserDomAdapter.prototype.logError = function (error) {
        if (window.console) {
            if (console.error) {
                console.error(error);
            }
            else {
                console.log(error);
            }
        }
    };
    BrowserDomAdapter.prototype.log = function (error) {
        if (window.console) {
            window.console.log && window.console.log(error);
        }
    };
    BrowserDomAdapter.prototype.logGroup = function (error) {
        if (window.console) {
            window.console.group && window.console.group(error);
        }
    };
    BrowserDomAdapter.prototype.logGroupEnd = function () {
        if (window.console) {
            window.console.groupEnd && window.console.groupEnd();
        }
    };
    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
        get: function () { return _attrToPropMap; },
        enumerable: true,
        configurable: true
    });
    BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };
    BrowserDomAdapter.prototype.querySelector = function (el, selector) {
        return (el.querySelector(selector));
    };
    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
        el.addEventListener(evt, listener, false);
        return function () { el.removeEventListener(evt, listener, false); };
    };
    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
        var /** @type {?} */ evt = document.createEvent('MouseEvent');
        evt.initEvent(eventType, true, true);
        return evt;
    };
    BrowserDomAdapter.prototype.createEvent = function (eventType) {
        var /** @type {?} */ evt = document.createEvent('Event');
        evt.initEvent(eventType, true, true);
        return evt;
    };
    BrowserDomAdapter.prototype.preventDefault = function (evt) {
        evt.preventDefault();
        evt.returnValue = false;
    };
    BrowserDomAdapter.prototype.isPrevented = function (evt) {
        return evt.defaultPrevented || isPresent$3(evt.returnValue) && !evt.returnValue;
    };
    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
    BrowserDomAdapter.prototype.getTemplateContent = function (el) {
        return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
    };
    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
    BrowserDomAdapter.prototype.type = function (node) { return node.type; };
    BrowserDomAdapter.prototype.content = function (node) {
        if (this.hasProperty(node, 'content')) {
            return ((node)).content;
        }
        else {
            return node;
        }
    };
    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
    BrowserDomAdapter.prototype.childNodesAsList = function (el) {
        var /** @type {?} */ childNodes = el.childNodes;
        var /** @type {?} */ res = new Array(childNodes.length);
        for (var /** @type {?} */ i = 0; i < childNodes.length; i++) {
            res[i] = childNodes[i];
        }
        return res;
    };
    BrowserDomAdapter.prototype.clearNodes = function (el) {
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
    };
    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
    BrowserDomAdapter.prototype.remove = function (node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
        return node;
    };
    BrowserDomAdapter.prototype.insertBefore = function (el, node) { el.parentNode.insertBefore(node, el); };
    BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) {
        nodes.forEach(function (n) { return el.parentNode.insertBefore(n, el); });
    };
    BrowserDomAdapter.prototype.insertAfter = function (el, node) { el.parentNode.insertBefore(node, el.nextSibling); };
    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
    BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
    BrowserDomAdapter.prototype.createTemplate = function (html) {
        var /** @type {?} */ t = document.createElement('template');
        t.innerHTML = html;
        return t;
    };
    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
        if (doc === void 0) { doc = document; }
        return doc.createElement(tagName);
    };
    BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
        if (doc === void 0) { doc = document; }
        return doc.createElementNS(ns, tagName);
    };
    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
        if (doc === void 0) { doc = document; }
        return doc.createTextNode(text);
    };
    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
        if (doc === void 0) { doc = document; }
        var /** @type {?} */ el = (doc.createElement('SCRIPT'));
        el.setAttribute(attrName, attrValue);
        return el;
    };
    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
        if (doc === void 0) { doc = document; }
        var /** @type {?} */ style = (doc.createElement('style'));
        this.appendChild(style, this.createTextNode(css));
        return style;
    };
    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return ((el)).createShadowRoot(); };
    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return ((el)).shadowRoot; };
    BrowserDomAdapter.prototype.getHost = function (el) { return ((el)).host; };
    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
        return element.getElementsByClassName(name);
    };
    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
        return element.getElementsByTagName(name);
    };
    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
    BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
    BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
    BrowserDomAdapter.prototype.hasClass = function (element, className) {
        return element.classList.contains(className);
    };
    BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
        element.style[styleName] = styleValue;
    };
    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
        element.style[stylename] = '';
    };
    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
    BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
        if (styleValue === void 0) { styleValue = null; }
        var /** @type {?} */ value = this.getStyle(element, styleName) || '';
        return styleValue ? value == styleValue : value.length > 0;
    };
    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
    BrowserDomAdapter.prototype.attributeMap = function (element) {
        var /** @type {?} */ res = new Map();
        var /** @type {?} */ elAttrs = element.attributes;
        for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {
            var /** @type {?} */ attrib = elAttrs[i];
            res.set(attrib.name, attrib.value);
        }
        return res;
    };
    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
        return element.hasAttribute(attribute);
    };
    BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
        return element.hasAttributeNS(ns, attribute);
    };
    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
        return element.getAttribute(attribute);
    };
    BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
        return element.getAttributeNS(ns, name);
    };
    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
    BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
        element.setAttributeNS(ns, name, value);
    };
    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
    BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
        element.removeAttributeNS(ns, name);
    };
    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
    BrowserDomAdapter.prototype.createHtmlDocument = function () {
        return document.implementation.createHTMLDocument('fakeTitle');
    };
    BrowserDomAdapter.prototype.defaultDoc = function () { return document; };
    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
        try {
            return el.getBoundingClientRect();
        }
        catch (e) {
            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
        }
    };
    BrowserDomAdapter.prototype.getTitle = function () { return document.title; };
    BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || ''; };
    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
        if (n instanceof HTMLElement) {
            return n.matches && n.matches(selector) ||
                n.msMatchesSelector && n.msMatchesSelector(selector) ||
                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
        }
        return false;
    };
    BrowserDomAdapter.prototype.isTemplateElement = function (el) {
        return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
    };
    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
    BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
        return isPresent$3(node.shadowRoot) && node instanceof HTMLElement;
    };
    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
    BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };
    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
    BrowserDomAdapter.prototype.getHref = function (el) { return ((el)).href; };
    BrowserDomAdapter.prototype.getEventKey = function (event) {
        var /** @type {?} */ key = event.key;
        if (isBlank$4(key)) {
            key = event.keyIdentifier;
            if (isBlank$4(key)) {
                return 'Unidentified';
            }
            if (key.startsWith('U+')) {
                key = String.fromCharCode(parseInt(key.substring(2), 16));
                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
                    key = ((_chromeNumKeyPadMap))[key];
                }
            }
        }
        return _keyMap[key] || key;
    };
    BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
        if (target === 'window') {
            return window;
        }
        if (target === 'document') {
            return document;
        }
        if (target === 'body') {
            return document.body;
        }
    };
    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
    BrowserDomAdapter.prototype.getBaseHref = function () {
        var /** @type {?} */ href = getBaseElementHref();
        return isBlank$4(href) ? null : relativePath(href);
    };
    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
    BrowserDomAdapter.prototype.setData = function (element, name, value) {
        this.setAttribute(element, 'data-' + name, value);
    };
    BrowserDomAdapter.prototype.getData = function (element, name) {
        return this.getAttribute(element, 'data-' + name);
    };
    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
    BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { setValueOnPath$3(_global$3, path, value); };
    BrowserDomAdapter.prototype.supportsWebAnimation = function () {
        return typeof ((Element)).prototype['animate'] === 'function';
    };
    BrowserDomAdapter.prototype.performanceNow = function () {
        return window.performance && window.performance.now ? window.performance.now() :
            new Date().getTime();
    };
    BrowserDomAdapter.prototype.supportsCookies = function () { return true; };
    BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };
    BrowserDomAdapter.prototype.setCookie = function (name, value) {
        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
    };
    return BrowserDomAdapter;
}(GenericBrowserDomAdapter));
var baseElement = null;
function getBaseElementHref() {
    if (!baseElement) {
        baseElement = document.querySelector('base');
        if (!baseElement) {
            return null;
        }
    }
    return baseElement.getAttribute('href');
}
var urlParsingNode;
function relativePath(url) {
    if (!urlParsingNode) {
        urlParsingNode = document.createElement('a');
    }
    urlParsingNode.setAttribute('href', url);
    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
        '/' + urlParsingNode.pathname;
}
function parseCookieValue(cookieStr, name) {
    name = encodeURIComponent(name);
    for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
        var cookie = _a[_i];
        var /** @type {?} */ eqIndex = cookie.indexOf('=');
        var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
        if (cookieName.trim() === name) {
            return decodeURIComponent(cookieValue);
        }
    }
    return null;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @return {?}
 */
function supportsState() {
    return !!window.history.pushState;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$83 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BrowserPlatformLocation = (function (_super) {
    __extends$83(BrowserPlatformLocation, _super);
    function BrowserPlatformLocation() {
        _super.call(this);
        this._init();
    }
    BrowserPlatformLocation.prototype._init = function () {
        this._location = getDOM().getLocation();
        this._history = getDOM().getHistory();
    };
    Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
        get: function () { return this._location; },
        enumerable: true,
        configurable: true
    });
    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(); };
    BrowserPlatformLocation.prototype.onPopState = function (fn) {
        getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);
    };
    BrowserPlatformLocation.prototype.onHashChange = function (fn) {
        getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
    };
    Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
        get: function () { return this._location.pathname; },
        set: function (newPath) { this._location.pathname = newPath; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
        get: function () { return this._location.search; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
        get: function () { return this._location.hash; },
        enumerable: true,
        configurable: true
    });
    BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
        if (supportsState()) {
            this._history.pushState(state, title, url);
        }
        else {
            this._location.hash = url;
        }
    };
    BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
        if (supportsState()) {
            this._history.replaceState(state, title, url);
        }
        else {
            this._location.hash = url;
        }
    };
    BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
    BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
    BrowserPlatformLocation.decorators = [
        { type: core.Injectable },
    ];
    BrowserPlatformLocation.ctorParameters = function () { return []; };
    return BrowserPlatformLocation;
}(_angular_common.PlatformLocation));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var BrowserGetTestability = (function () {
    function BrowserGetTestability() {
    }
    BrowserGetTestability.init = function () { core.setTestabilityGetter(new BrowserGetTestability()); };
    BrowserGetTestability.prototype.addToWindow = function (registry) {
        _global$3.getAngularTestability = function (elem, findInAncestors) {
            if (findInAncestors === void 0) { findInAncestors = true; }
            var /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);
            if (testability == null) {
                throw new Error('Could not find testability for element.');
            }
            return testability;
        };
        _global$3.getAllAngularTestabilities = function () { return registry.getAllTestabilities(); };
        _global$3.getAllAngularRootElements = function () { return registry.getAllRootElements(); };
        var /** @type {?} */ whenAllStable = function (callback /** TODO #9100 */) {
            var /** @type {?} */ testabilities = _global$3.getAllAngularTestabilities();
            var /** @type {?} */ count = testabilities.length;
            var /** @type {?} */ didWork = false;
            var /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {
                didWork = didWork || didWork_;
                count--;
                if (count == 0) {
                    callback(didWork);
                }
            };
            testabilities.forEach(function (testability /** TODO #9100 */) {
                testability.whenStable(decrement);
            });
        };
        if (!_global$3['frameworkStabilizers']) {
            _global$3['frameworkStabilizers'] = [];
        }
        _global$3['frameworkStabilizers'].push(whenAllStable);
    };
    BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
        if (elem == null) {
            return null;
        }
        var /** @type {?} */ t = registry.getTestability(elem);
        if (isPresent$3(t)) {
            return t;
        }
        else if (!findInAncestors) {
            return null;
        }
        if (getDOM().isShadowRoot(elem)) {
            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
        }
        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
    };
    return BrowserGetTestability;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var Title = (function () {
    function Title() {
    }
    Title.prototype.getTitle = function () { return getDOM().getTitle(); };
    Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(newTitle); };
    return Title;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var StringMapWrapper$3 = (function () {
    function StringMapWrapper() {
    }
    StringMapWrapper.merge = function (m1, m2) {
        var /** @type {?} */ m = {};
        for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
        }
        for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
        }
        return m;
    };
    StringMapWrapper.equals = function (m1, m2) {
        var /** @type {?} */ k1 = Object.keys(m1);
        var /** @type {?} */ k2 = Object.keys(m2);
        if (k1.length != k2.length) {
            return false;
        }
        for (var /** @type {?} */ i = 0; i < k1.length; i++) {
            var /** @type {?} */ key = k1[i];
            if (m1[key] !== m2[key]) {
                return false;
            }
        }
        return true;
    };
    return StringMapWrapper;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DOCUMENT = new core.OpaqueToken('DocumentToken');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var EVENT_MANAGER_PLUGINS = new core.OpaqueToken('EventManagerPlugins');
var EventManager = (function () {
    function EventManager(plugins, _zone) {
        var _this = this;
        this._zone = _zone;
        this._eventNameToPlugin = new Map();
        plugins.forEach(function (p) { return p.manager = _this; });
        this._plugins = plugins.slice().reverse();
    }
    EventManager.prototype.addEventListener = function (element, eventName, handler) {
        var /** @type {?} */ plugin = this._findPluginFor(eventName);
        return plugin.addEventListener(element, eventName, handler);
    };
    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
        var /** @type {?} */ plugin = this._findPluginFor(eventName);
        return plugin.addGlobalEventListener(target, eventName, handler);
    };
    EventManager.prototype.getZone = function () { return this._zone; };
    EventManager.prototype._findPluginFor = function (eventName) {
        var /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);
        if (plugin) {
            return plugin;
        }
        var /** @type {?} */ plugins = this._plugins;
        for (var /** @type {?} */ i = 0; i < plugins.length; i++) {
            var /** @type {?} */ plugin_1 = plugins[i];
            if (plugin_1.supports(eventName)) {
                this._eventNameToPlugin.set(eventName, plugin_1);
                return plugin_1;
            }
        }
        throw new Error("No event manager plugin found for event " + eventName);
    };
    EventManager.decorators = [
        { type: core.Injectable },
    ];
    EventManager.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: core.Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
        { type: core.NgZone, },
    ]; };
    return EventManager;
}());
var EventManagerPlugin = (function () {
    function EventManagerPlugin() {
    }
    EventManagerPlugin.prototype.supports = function (eventName) { };
    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };
    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
        var /** @type {?} */ target = getDOM().getGlobalEventTarget(element);
        if (!target) {
            throw new Error("Unsupported event target " + target + " for event " + eventName);
        }
        return this.addEventListener(target, eventName, handler);
    };
    
    return EventManagerPlugin;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$85 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SharedStylesHost = (function () {
    function SharedStylesHost() {
        this._stylesSet = new Set();
    }
    SharedStylesHost.prototype.addStyles = function (styles) {
        var _this = this;
        var /** @type {?} */ additions = new Set();
        styles.forEach(function (style) {
            if (!_this._stylesSet.has(style)) {
                _this._stylesSet.add(style);
                additions.add(style);
            }
        });
        this.onStylesAdded(additions);
    };
    SharedStylesHost.prototype.onStylesAdded = function (additions) { };
    SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };
    SharedStylesHost.decorators = [
        { type: core.Injectable },
    ];
    SharedStylesHost.ctorParameters = function () { return []; };
    return SharedStylesHost;
}());
var DomSharedStylesHost = (function (_super) {
    __extends$85(DomSharedStylesHost, _super);
    function DomSharedStylesHost(_doc) {
        _super.call(this);
        this._doc = _doc;
        this._hostNodes = new Set();
        this._styleNodes = new Set();
        this._hostNodes.add(_doc.head);
    }
    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
        var _this = this;
        styles.forEach(function (style) {
            var /** @type {?} */ styleEl = _this._doc.createElement('style');
            styleEl.textContent = style;
            _this._styleNodes.add(host.appendChild(styleEl));
        });
    };
    DomSharedStylesHost.prototype.addHost = function (hostNode) {
        this._addStylesToHost(this._stylesSet, hostNode);
        this._hostNodes.add(hostNode);
    };
    DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
        var _this = this;
        this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });
    };
    DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };
    DomSharedStylesHost.decorators = [
        { type: core.Injectable },
    ];
    DomSharedStylesHost.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [DOCUMENT,] },] },
    ]; };
    return DomSharedStylesHost;
}(SharedStylesHost));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$84 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var NAMESPACE_URIS = {
    'xlink': 'http://www.w3.org/1999/xlink',
    'svg': 'http://www.w3.org/2000/svg',
    'xhtml': 'http://www.w3.org/1999/xhtml'
};
var TEMPLATE_COMMENT_TEXT = 'template bindings={}';
var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
var DomRootRenderer = (function () {
    function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver, appId) {
        this.document = document;
        this.eventManager = eventManager;
        this.sharedStylesHost = sharedStylesHost;
        this.animationDriver = animationDriver;
        this.appId = appId;
        this.registeredComponents = new Map();
    }
    DomRootRenderer.prototype.renderComponent = function (componentProto) {
        var /** @type {?} */ renderer = this.registeredComponents.get(componentProto.id);
        if (!renderer) {
            renderer = new DomRenderer(this, componentProto, this.animationDriver, this.appId + "-" + componentProto.id);
            this.registeredComponents.set(componentProto.id, renderer);
        }
        return renderer;
    };
    return DomRootRenderer;
}());
var DomRootRenderer_ = (function (_super) {
    __extends$84(DomRootRenderer_, _super);
    function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver, appId) {
        _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver, appId);
    }
    DomRootRenderer_.decorators = [
        { type: core.Injectable },
    ];
    DomRootRenderer_.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [DOCUMENT,] },] },
        { type: EventManager, },
        { type: DomSharedStylesHost, },
        { type: AnimationDriver, },
        { type: undefined, decorators: [{ type: core.Inject, args: [core.APP_ID,] },] },
    ]; };
    return DomRootRenderer_;
}(DomRootRenderer));
var DIRECT_DOM_RENDERER = {
    remove: function (node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    },
    appendChild: function (node, parent) { parent.appendChild(node); },
    insertBefore: function (node, refNode) { refNode.parentNode.insertBefore(node, refNode); },
    nextSibling: function (node) { return node.nextSibling; },
    parentElement: function (node) { return (node.parentNode); }
};
var DomRenderer = (function () {
    function DomRenderer(_rootRenderer, componentProto, _animationDriver, styleShimId) {
        this._rootRenderer = _rootRenderer;
        this.componentProto = componentProto;
        this._animationDriver = _animationDriver;
        this.directRenderer = DIRECT_DOM_RENDERER;
        this._styles = flattenStyles$1(styleShimId, componentProto.styles, []);
        if (componentProto.encapsulation !== core.ViewEncapsulation.Native) {
            this._rootRenderer.sharedStylesHost.addStyles(this._styles);
        }
        if (this.componentProto.encapsulation === core.ViewEncapsulation.Emulated) {
            this._contentAttr = shimContentAttribute(styleShimId);
            this._hostAttr = shimHostAttribute(styleShimId);
        }
        else {
            this._contentAttr = null;
            this._hostAttr = null;
        }
    }
    DomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
        var /** @type {?} */ el;
        if (typeof selectorOrNode === 'string') {
            el = this._rootRenderer.document.querySelector(selectorOrNode);
            if (!el) {
                throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
            }
        }
        else {
            el = selectorOrNode;
        }
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
        return el;
    };
    DomRenderer.prototype.createElement = function (parent, name, debugInfo) {
        var /** @type {?} */ el;
        if (isNamespaced(name)) {
            var /** @type {?} */ nsAndName = splitNamespace(name);
            el = document.createElementNS((NAMESPACE_URIS)[nsAndName[0]], nsAndName[1]);
        }
        else {
            el = document.createElement(name);
        }
        if (this._contentAttr) {
            el.setAttribute(this._contentAttr, '');
        }
        if (parent) {
            parent.appendChild(el);
        }
        return el;
    };
    DomRenderer.prototype.createViewRoot = function (hostElement) {
        var /** @type {?} */ nodesParent;
        if (this.componentProto.encapsulation === core.ViewEncapsulation.Native) {
            nodesParent = ((hostElement)).createShadowRoot();
            for (var /** @type {?} */ i = 0; i < this._styles.length; i++) {
                var /** @type {?} */ styleEl = document.createElement('style');
                styleEl.textContent = this._styles[i];
                nodesParent.appendChild(styleEl);
            }
        }
        else {
            if (this._hostAttr) {
                hostElement.setAttribute(this._hostAttr, '');
            }
            nodesParent = hostElement;
        }
        return nodesParent;
    };
    DomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
        var /** @type {?} */ comment = document.createComment(TEMPLATE_COMMENT_TEXT);
        if (parentElement) {
            parentElement.appendChild(comment);
        }
        return comment;
    };
    DomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
        var /** @type {?} */ node = document.createTextNode(value);
        if (parentElement) {
            parentElement.appendChild(node);
        }
        return node;
    };
    DomRenderer.prototype.projectNodes = function (parentElement, nodes) {
        if (!parentElement)
            return;
        appendNodes(parentElement, nodes);
    };
    DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) { moveNodesAfterSibling(node, viewRootNodes); };
    DomRenderer.prototype.detachView = function (viewRootNodes) {
        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
            var /** @type {?} */ node = viewRootNodes[i];
            if (node.parentNode) {
                node.parentNode.removeChild(node);
            }
        }
    };
    DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
        if (this.componentProto.encapsulation === core.ViewEncapsulation.Native && hostElement) {
            this._rootRenderer.sharedStylesHost.removeHost(((hostElement)).shadowRoot);
        }
    };
    DomRenderer.prototype.listen = function (renderElement, name, callback) {
        return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
    };
    DomRenderer.prototype.listenGlobal = function (target, name, callback) {
        return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
    };
    DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
        ((renderElement))[propertyName] = propertyValue;
    };
    DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
        var /** @type {?} */ attrNs;
        var /** @type {?} */ attrNameWithoutNs = attributeName;
        if (isNamespaced(attributeName)) {
            var /** @type {?} */ nsAndName = splitNamespace(attributeName);
            attrNameWithoutNs = nsAndName[1];
            attributeName = nsAndName[0] + ':' + nsAndName[1];
            attrNs = NAMESPACE_URIS[nsAndName[0]];
        }
        if (isPresent$3(attributeValue)) {
            if (attrNs) {
                renderElement.setAttributeNS(attrNs, attributeName, attributeValue);
            }
            else {
                renderElement.setAttribute(attributeName, attributeValue);
            }
        }
        else {
            if (isPresent$3(attrNs)) {
                renderElement.removeAttributeNS(attrNs, attrNameWithoutNs);
            }
            else {
                renderElement.removeAttribute(attributeName);
            }
        }
    };
    DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
        if (renderElement.nodeType === Node.COMMENT_NODE) {
            var /** @type {?} */ existingBindings = renderElement.nodeValue.replace(/\n/g, '').match(TEMPLATE_BINDINGS_EXP);
            var /** @type {?} */ parsedBindings = JSON.parse(existingBindings[1]);
            parsedBindings[propertyName] = propertyValue;
            renderElement.nodeValue =
                TEMPLATE_COMMENT_TEXT.replace('{}', JSON.stringify(parsedBindings, null, 2));
        }
        else {
            this.setElementAttribute(renderElement, propertyName, propertyValue);
        }
    };
    DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
        if (isAdd) {
            renderElement.classList.add(className);
        }
        else {
            renderElement.classList.remove(className);
        }
    };
    DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
        if (isPresent$3(styleValue)) {
            ((renderElement.style))[styleName] = stringify$3(styleValue);
        }
        else {
            ((renderElement.style))[styleName] = '';
        }
    };
    DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
        ((renderElement))[methodName].apply(renderElement, args);
    };
    DomRenderer.prototype.setText = function (renderNode, text) { renderNode.nodeValue = text; };
    DomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        if (this._rootRenderer.document.body.contains(element)) {
            return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
        }
        return new NoOpAnimationPlayer$1();
    };
    return DomRenderer;
}());
function moveNodesAfterSibling(sibling, nodes) {
    var /** @type {?} */ parent = sibling.parentNode;
    if (nodes.length > 0 && parent) {
        var /** @type {?} */ nextSibling = sibling.nextSibling;
        if (nextSibling) {
            for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
                parent.insertBefore(nodes[i], nextSibling);
            }
        }
        else {
            for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
                parent.appendChild(nodes[i]);
            }
        }
    }
}
function appendNodes(parent, nodes) {
    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
        parent.appendChild(nodes[i]);
    }
}
function decoratePreventDefault(eventHandler) {
    return function (event) {
        var /** @type {?} */ allowDefaultBehavior = eventHandler(event);
        if (allowDefaultBehavior === false) {
            event.preventDefault();
            event.returnValue = false;
        }
    };
}
var COMPONENT_REGEX = /%COMP%/g;
var COMPONENT_VARIABLE = '%COMP%';
var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
function shimContentAttribute(componentShortId) {
    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
function shimHostAttribute(componentShortId) {
    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
function flattenStyles$1(compId, styles, target) {
    for (var /** @type {?} */ i = 0; i < styles.length; i++) {
        var /** @type {?} */ style = styles[i];
        if (Array.isArray(style)) {
            flattenStyles$1(compId, style, target);
        }
        else {
            style = style.replace(COMPONENT_REGEX, compId);
            target.push(style);
        }
    }
    return target;
}
var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
function isNamespaced(name) {
    return name[0] === ':';
}
function splitNamespace(name) {
    var /** @type {?} */ match = name.match(NS_PREFIX_RE);
    return [match[1], match[2]];
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var CORE_TOKENS = {
    'ApplicationRef': core.ApplicationRef,
    'NgZone': core.NgZone,
};
var INSPECT_GLOBAL_NAME = 'ng.probe';
var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
function inspectNativeElement(element) {
    return core.getDebugNode(element);
}
var NgProbeToken$2 = (function () {
    function NgProbeToken$$1(name, token) {
        this.name = name;
        this.token = token;
    }
    return NgProbeToken$$1;
}());
function _createConditionalRootRenderer(rootRenderer, extraTokens, coreTokens) {
    return core.isDevMode() ?
        _createRootRenderer(rootRenderer, (extraTokens || []).concat(coreTokens || [])) :
        rootRenderer;
}
function _createRootRenderer(rootRenderer, extraTokens) {
    getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
    getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper$3.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
    return new DebugDomRootRenderer$1(rootRenderer);
}
function _ngProbeTokensToMap(tokens) {
    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
}
var ELEMENT_PROBE_PROVIDERS = [{
        provide: core.RootRenderer,
        useFactory: _createConditionalRootRenderer,
        deps: [
            DomRootRenderer, [NgProbeToken$2, new core.Optional()],
            [core.NgProbeToken, new core.Optional()]
        ]
    }];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$86 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DomEventsPlugin = (function (_super) {
    __extends$86(DomEventsPlugin, _super);
    function DomEventsPlugin() {
        _super.apply(this, arguments);
    }
    DomEventsPlugin.prototype.supports = function (eventName) { return true; };
    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
        element.addEventListener(eventName, /** @type {?} */ (handler), false);
        return function () { return element.removeEventListener(eventName, /** @type {?} */ (handler), false); };
    };
    DomEventsPlugin.decorators = [
        { type: core.Injectable },
    ];
    DomEventsPlugin.ctorParameters = function () { return []; };
    return DomEventsPlugin;
}(EventManagerPlugin));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$87 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EVENT_NAMES = {
    'pan': true,
    'panstart': true,
    'panmove': true,
    'panend': true,
    'pancancel': true,
    'panleft': true,
    'panright': true,
    'panup': true,
    'pandown': true,
    'pinch': true,
    'pinchstart': true,
    'pinchmove': true,
    'pinchend': true,
    'pinchcancel': true,
    'pinchin': true,
    'pinchout': true,
    'press': true,
    'pressup': true,
    'rotate': true,
    'rotatestart': true,
    'rotatemove': true,
    'rotateend': true,
    'rotatecancel': true,
    'swipe': true,
    'swipeleft': true,
    'swiperight': true,
    'swipeup': true,
    'swipedown': true,
    'tap': true,
};
var HAMMER_GESTURE_CONFIG = new core.OpaqueToken('HammerGestureConfig');
var HammerGestureConfig = (function () {
    function HammerGestureConfig() {
        this.events = [];
        this.overrides = {};
    }
    HammerGestureConfig.prototype.buildHammer = function (element) {
        var /** @type {?} */ mc = new Hammer(element);
        mc.get('pinch').set({ enable: true });
        mc.get('rotate').set({ enable: true });
        for (var eventName in this.overrides) {
            mc.get(eventName).set(this.overrides[eventName]);
        }
        return mc;
    };
    HammerGestureConfig.decorators = [
        { type: core.Injectable },
    ];
    HammerGestureConfig.ctorParameters = function () { return []; };
    return HammerGestureConfig;
}());
var HammerGesturesPlugin = (function (_super) {
    __extends$87(HammerGesturesPlugin, _super);
    function HammerGesturesPlugin(_config) {
        _super.call(this);
        this._config = _config;
    }
    HammerGesturesPlugin.prototype.supports = function (eventName) {
        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
            return false;
        }
        if (!((window)).Hammer) {
            throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
        }
        return true;
    };
    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
        var _this = this;
        var /** @type {?} */ zone = this.manager.getZone();
        eventName = eventName.toLowerCase();
        return zone.runOutsideAngular(function () {
            var /** @type {?} */ mc = _this._config.buildHammer(element);
            var /** @type {?} */ callback = function (eventObj) {
                zone.runGuarded(function () { handler(eventObj); });
            };
            mc.on(eventName, callback);
            return function () { return mc.off(eventName, callback); };
        });
    };
    HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
    HammerGesturesPlugin.decorators = [
        { type: core.Injectable },
    ];
    HammerGesturesPlugin.ctorParameters = function () { return [
        { type: HammerGestureConfig, decorators: [{ type: core.Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
    ]; };
    return HammerGesturesPlugin;
}(EventManagerPlugin));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$88 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
var MODIFIER_KEY_GETTERS = {
    'alt': function (event) { return event.altKey; },
    'control': function (event) { return event.ctrlKey; },
    'meta': function (event) { return event.metaKey; },
    'shift': function (event) { return event.shiftKey; }
};
var KeyEventsPlugin = (function (_super) {
    __extends$88(KeyEventsPlugin, _super);
    function KeyEventsPlugin() {
        _super.call(this);
    }
    KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
        var /** @type {?} */ parsedEvent = KeyEventsPlugin.parseEventName(eventName);
        var /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
        return this.manager.getZone().runOutsideAngular(function () {
            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
        });
    };
    KeyEventsPlugin.parseEventName = function (eventName) {
        var /** @type {?} */ parts = eventName.toLowerCase().split('.');
        var /** @type {?} */ domEventName = parts.shift();
        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
            return null;
        }
        var /** @type {?} */ key = KeyEventsPlugin._normalizeKey(parts.pop());
        var /** @type {?} */ fullKey = '';
        MODIFIER_KEYS.forEach(function (modifierName) {
            var /** @type {?} */ index = parts.indexOf(modifierName);
            if (index > -1) {
                parts.splice(index, 1);
                fullKey += modifierName + '.';
            }
        });
        fullKey += key;
        if (parts.length != 0 || key.length === 0) {
            return null;
        }
        var /** @type {?} */ result = {};
        result['domEventName'] = domEventName;
        result['fullKey'] = fullKey;
        return result;
    };
    KeyEventsPlugin.getEventFullKey = function (event) {
        var /** @type {?} */ fullKey = '';
        var /** @type {?} */ key = getDOM().getEventKey(event);
        key = key.toLowerCase();
        if (key === ' ') {
            key = 'space';
        }
        else if (key === '.') {
            key = 'dot';
        }
        MODIFIER_KEYS.forEach(function (modifierName) {
            if (modifierName != key) {
                var /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
                if (modifierGetter(event)) {
                    fullKey += modifierName + '.';
                }
            }
        });
        fullKey += key;
        return fullKey;
    };
    KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
        return function (event /** TODO #9100 */) {
            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
                zone.runGuarded(function () { return handler(event); });
            }
        };
    };
    KeyEventsPlugin._normalizeKey = function (keyName) {
        switch (keyName) {
            case 'esc':
                return 'escape';
            default:
                return keyName;
        }
    };
    KeyEventsPlugin.decorators = [
        { type: core.Injectable },
    ];
    KeyEventsPlugin.ctorParameters = function () { return []; };
    return KeyEventsPlugin;
}(EventManagerPlugin));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
function sanitizeUrl(url) {
    url = String(url);
    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
        return url;
    if (core.isDevMode()) {
        getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
    }
    return 'unsafe:' + url;
}
function sanitizeSrcset(srcset) {
    srcset = String(srcset);
    return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var inertElement = null;
var DOM = null;
function getInertElement() {
    if (inertElement)
        return inertElement;
    DOM = getDOM();
    var /** @type {?} */ templateEl = DOM.createElement('template');
    if ('content' in templateEl)
        return templateEl;
    var /** @type {?} */ doc = DOM.createHtmlDocument();
    inertElement = DOM.querySelector(doc, 'body');
    if (inertElement == null) {
        var /** @type {?} */ html = DOM.createElement('html', doc);
        inertElement = DOM.createElement('body', doc);
        DOM.appendChild(html, inertElement);
        DOM.appendChild(doc, html);
    }
    return inertElement;
}
function tagSet(tags) {
    var /** @type {?} */ res = {};
    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
        var t = _a[_i];
        res[t] = true;
    }
    return res;
}
function merge() {
    var sets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sets[_i - 0] = arguments[_i];
    }
    var /** @type {?} */ res = {};
    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
        var s = sets_1[_a];
        for (var v in s) {
            if (s.hasOwnProperty(v))
                res[v] = true;
        }
    }
    return res;
}
var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
var SRCSET_ATTRS = tagSet('srcset');
var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
    'valign,value,vspace,width');
var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
var SanitizingHtmlSerializer = (function () {
    function SanitizingHtmlSerializer() {
        this.sanitizedSomething = false;
        this.buf = [];
    }
    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
        var /** @type {?} */ current = el.firstChild;
        while (current) {
            if (DOM.isElementNode(current)) {
                this.startElement(/** @type {?} */ (current));
            }
            else if (DOM.isTextNode(current)) {
                this.chars(DOM.nodeValue(current));
            }
            else {
                this.sanitizedSomething = true;
            }
            if (DOM.firstChild(current)) {
                current = DOM.firstChild(current);
                continue;
            }
            while (current) {
                if (DOM.isElementNode(current)) {
                    this.endElement(/** @type {?} */ (current));
                }
                if (DOM.nextSibling(current)) {
                    current = DOM.nextSibling(current);
                    break;
                }
                current = DOM.parentElement(current);
            }
        }
        return this.buf.join('');
    };
    SanitizingHtmlSerializer.prototype.startElement = function (element) {
        var _this = this;
        var /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();
        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
            this.sanitizedSomething = true;
            return;
        }
        this.buf.push('<');
        this.buf.push(tagName);
        DOM.attributeMap(element).forEach(function (value, attrName) {
            var /** @type {?} */ lower = attrName.toLowerCase();
            if (!VALID_ATTRS.hasOwnProperty(lower)) {
                _this.sanitizedSomething = true;
                return;
            }
            if (URI_ATTRS[lower])
                value = sanitizeUrl(value);
            if (SRCSET_ATTRS[lower])
                value = sanitizeSrcset(value);
            _this.buf.push(' ');
            _this.buf.push(attrName);
            _this.buf.push('="');
            _this.buf.push(encodeEntities(value));
            _this.buf.push('"');
        });
        this.buf.push('>');
    };
    SanitizingHtmlSerializer.prototype.endElement = function (current) {
        var /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();
        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
            this.buf.push('</');
            this.buf.push(tagName);
            this.buf.push('>');
        }
    };
    SanitizingHtmlSerializer.prototype.chars = function (chars /** TODO #9100 */) { this.buf.push(encodeEntities(chars)); };
    return SanitizingHtmlSerializer;
}());
var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
function encodeEntities(value) {
    return value.replace(/&/g, '&amp;')
        .replace(SURROGATE_PAIR_REGEXP, function (match) {
        var /** @type {?} */ hi = match.charCodeAt(0);
        var /** @type {?} */ low = match.charCodeAt(1);
        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
    })
        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}
function stripCustomNsAttrs(el) {
    DOM.attributeMap(el).forEach(function (_, attrName) {
        if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
            DOM.removeAttribute(el, attrName);
        }
    });
    for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
        var n = _a[_i];
        if (DOM.isElementNode(n))
            stripCustomNsAttrs(/** @type {?} */ (n));
    }
}
function sanitizeHtml(unsafeHtmlInput) {
    try {
        var /** @type {?} */ containerEl = getInertElement();
        var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
        var /** @type {?} */ mXSSAttempts = 5;
        var /** @type {?} */ parsedHtml = unsafeHtml;
        do {
            if (mXSSAttempts === 0) {
                throw new Error('Failed to sanitize html because the input is unstable');
            }
            mXSSAttempts--;
            unsafeHtml = parsedHtml;
            DOM.setInnerHTML(containerEl, unsafeHtml);
            if (((DOM.defaultDoc())).documentMode) {
                stripCustomNsAttrs(containerEl);
            }
            parsedHtml = DOM.getInnerHTML(containerEl);
        } while (unsafeHtml !== parsedHtml);
        var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();
        var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
        var /** @type {?} */ parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
        for (var _i = 0, _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
            var child = _a[_i];
            DOM.removeChild(parent_1, child);
        }
        if (core.isDevMode() && sanitizer.sanitizedSomething) {
            DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
        }
        return safeHtml;
    }
    catch (e) {
        inertElement = null;
        throw e;
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
var COLOR_FNS = '(?:rgb|hsl)a?';
var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
var CSS3_FNS = '(?:calc|attr)';
var FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
var SAFE_STYLE_VALUE = new RegExp(("^(" + VALUES + "|") +
    ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") +
    (FN_ARGS + ")$"), 'g');
var URL_RE = /^url\(([^)]+)\)$/;
function hasBalancedQuotes(value) {
    var /** @type {?} */ outsideSingle = true;
    var /** @type {?} */ outsideDouble = true;
    for (var /** @type {?} */ i = 0; i < value.length; i++) {
        var /** @type {?} */ c = value.charAt(i);
        if (c === '\'' && outsideDouble) {
            outsideSingle = !outsideSingle;
        }
        else if (c === '"' && outsideSingle) {
            outsideDouble = !outsideDouble;
        }
    }
    return outsideSingle && outsideDouble;
}
function sanitizeStyle(value) {
    value = String(value).trim();
    if (!value)
        return '';
    var /** @type {?} */ urlMatch = value.match(URL_RE);
    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
        return value;
    }
    if (core.isDevMode()) {
        getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
    }
    return 'unsafe';
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$89 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DomSanitizer = (function () {
    function DomSanitizer() {
    }
    DomSanitizer.prototype.sanitize = function (context, value) { };
    DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };
    DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };
    DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };
    DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };
    DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };
    return DomSanitizer;
}());
var DomSanitizerImpl = (function (_super) {
    __extends$89(DomSanitizerImpl, _super);
    function DomSanitizerImpl() {
        _super.apply(this, arguments);
    }
    DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
        if (value == null)
            return null;
        switch (ctx) {
            case core.SecurityContext.NONE:
                return value;
            case core.SecurityContext.HTML:
                if (value instanceof SafeHtmlImpl)
                    return value.changingThisBreaksApplicationSecurity;
                this.checkNotSafeValue(value, 'HTML');
                return sanitizeHtml(String(value));
            case core.SecurityContext.STYLE:
                if (value instanceof SafeStyleImpl)
                    return value.changingThisBreaksApplicationSecurity;
                this.checkNotSafeValue(value, 'Style');
                return sanitizeStyle(value);
            case core.SecurityContext.SCRIPT:
                if (value instanceof SafeScriptImpl)
                    return value.changingThisBreaksApplicationSecurity;
                this.checkNotSafeValue(value, 'Script');
                throw new Error('unsafe value used in a script context');
            case core.SecurityContext.URL:
                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
                    return value.changingThisBreaksApplicationSecurity;
                }
                this.checkNotSafeValue(value, 'URL');
                return sanitizeUrl(String(value));
            case core.SecurityContext.RESOURCE_URL:
                if (value instanceof SafeResourceUrlImpl) {
                    return value.changingThisBreaksApplicationSecurity;
                }
                this.checkNotSafeValue(value, 'ResourceURL');
                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
            default:
                throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
        }
    };
    DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
        if (value instanceof SafeValueImpl) {
            throw new Error(("Required a safe " + expectedType + ", got a " + value.getTypeName() + " ") +
                "(see http://g.co/ng/security#xss)");
        }
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
        return new SafeResourceUrlImpl(value);
    };
    DomSanitizerImpl.decorators = [
        { type: core.Injectable },
    ];
    DomSanitizerImpl.ctorParameters = function () { return []; };
    return DomSanitizerImpl;
}(DomSanitizer));
var SafeValueImpl = (function () {
    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
    }
    SafeValueImpl.prototype.getTypeName = function () { };
    SafeValueImpl.prototype.toString = function () {
        return ("SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity) +
            " (see http://g.co/ng/security#xss)";
    };
    return SafeValueImpl;
}());
var SafeHtmlImpl = (function (_super) {
    __extends$89(SafeHtmlImpl, _super);
    function SafeHtmlImpl() {
        _super.apply(this, arguments);
    }
    SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
    return SafeHtmlImpl;
}(SafeValueImpl));
var SafeStyleImpl = (function (_super) {
    __extends$89(SafeStyleImpl, _super);
    function SafeStyleImpl() {
        _super.apply(this, arguments);
    }
    SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
    return SafeStyleImpl;
}(SafeValueImpl));
var SafeScriptImpl = (function (_super) {
    __extends$89(SafeScriptImpl, _super);
    function SafeScriptImpl() {
        _super.apply(this, arguments);
    }
    SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
    return SafeScriptImpl;
}(SafeValueImpl));
var SafeUrlImpl = (function (_super) {
    __extends$89(SafeUrlImpl, _super);
    function SafeUrlImpl() {
        _super.apply(this, arguments);
    }
    SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
    return SafeUrlImpl;
}(SafeValueImpl));
var SafeResourceUrlImpl = (function (_super) {
    __extends$89(SafeResourceUrlImpl, _super);
    function SafeResourceUrlImpl() {
        _super.apply(this, arguments);
    }
    SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
    return SafeResourceUrlImpl;
}(SafeValueImpl));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
    { provide: core.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
    { provide: _angular_common.PlatformLocation, useClass: BrowserPlatformLocation }
];
var BROWSER_SANITIZATION_PROVIDERS = [
    { provide: core.Sanitizer, useExisting: DomSanitizer },
    { provide: DomSanitizer, useClass: DomSanitizerImpl },
];
var platformBrowser = core.createPlatformFactory(core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
function initDomAdapter() {
    BrowserDomAdapter.makeCurrent();
    BrowserGetTestability.init();
}
function errorHandler() {
    return new core.ErrorHandler();
}
function _document() {
    return getDOM().defaultDoc();
}
function _resolveDefaultAnimationDriver() {
    if (getDOM().supportsWebAnimation()) {
        return new WebAnimationsDriver();
    }
    return AnimationDriver.NOOP;
}
var BrowserModule$1 = (function () {
    function BrowserModule$$1(parentModule) {
        if (parentModule) {
            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
        }
    }
    BrowserModule$$1.decorators = [
        { type: core.NgModule, args: [{
                    providers: [
                        BROWSER_SANITIZATION_PROVIDERS, { provide: core.ErrorHandler, useFactory: errorHandler, deps: [] },
                        { provide: DOCUMENT, useFactory: _document, deps: [] },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
                        { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
                        { provide: DomRootRenderer, useClass: DomRootRenderer_ },
                        { provide: core.RootRenderer, useExisting: DomRootRenderer },
                        { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
                        { provide: AnimationDriver, useFactory: _resolveDefaultAnimationDriver }, DomSharedStylesHost,
                        core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title
                    ],
                    exports: [_angular_common.CommonModule, core.ApplicationModule]
                },] },
    ];
    BrowserModule$$1.ctorParameters = function () { return [
        { type: BrowserModule$$1, decorators: [{ type: core.Optional }, { type: core.SkipSelf },] },
    ]; };
    return BrowserModule$$1;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var win = typeof window !== 'undefined' && window || ({});

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ChangeDetectionPerfRecord = (function () {
    function ChangeDetectionPerfRecord(msPerTick, numTicks) {
        this.msPerTick = msPerTick;
        this.numTicks = numTicks;
    }
    return ChangeDetectionPerfRecord;
}());
var AngularTools = (function () {
    function AngularTools(ref) {
        this.profiler = new AngularProfiler(ref);
    }
    return AngularTools;
}());
var AngularProfiler = (function () {
    function AngularProfiler(ref) {
        this.appRef = ref.injector.get(core.ApplicationRef);
    }
    AngularProfiler.prototype.timeChangeDetection = function (config) {
        var /** @type {?} */ record = config && config['record'];
        var /** @type {?} */ profileName = 'Change Detection';
        var /** @type {?} */ isProfilerAvailable = isPresent$3(win.console.profile);
        if (record && isProfilerAvailable) {
            win.console.profile(profileName);
        }
        var /** @type {?} */ start = getDOM().performanceNow();
        var /** @type {?} */ numTicks = 0;
        while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
            this.appRef.tick();
            numTicks++;
        }
        var /** @type {?} */ end = getDOM().performanceNow();
        if (record && isProfilerAvailable) {
            ((win.console.profileEnd))(profileName);
        }
        var /** @type {?} */ msPerTick = (end - start) / numTicks;
        win.console.log("ran " + numTicks + " change detection cycles");
        win.console.log(msPerTick.toFixed(2) + " ms per check");
        return new ChangeDetectionPerfRecord(msPerTick, numTicks);
    };
    return AngularProfiler;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var context = (_global$3);
function enableDebugTools(ref) {
    ((Object)).assign(context.ng, new AngularTools(ref));
    return ref;
}
function disableDebugTools() {
    if (context.ng) {
        delete context.ng.profiler;
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var By = (function () {
    function By() {
    }
    By.all = function () { return function (debugElement) { return true; }; };
    By.css = function (selector) {
        return function (debugElement) {
            return isPresent$3(debugElement.nativeElement) ?
                getDOM().elementMatches(debugElement.nativeElement, selector) :
                false;
        };
    };
    By.directive = function (type) {
        return function (debugElement) { return debugElement.providerTokens.indexOf(type) !== -1; };
    };
    return By;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __platform_browser_private__$1 = {
    BrowserPlatformLocation: BrowserPlatformLocation,
    DomAdapter: DomAdapter,
    BrowserDomAdapter: BrowserDomAdapter,
    BrowserGetTestability: BrowserGetTestability,
    getDOM: getDOM,
    setRootDomAdapter: setRootDomAdapter,
    DomRootRenderer_: DomRootRenderer_,
    DomRootRenderer: DomRootRenderer,
    NAMESPACE_URIS: NAMESPACE_URIS,
    shimContentAttribute: shimContentAttribute,
    shimHostAttribute: shimHostAttribute,
    flattenStyles: flattenStyles$1,
    splitNamespace: splitNamespace,
    isNamespaced: isNamespaced,
    DomSharedStylesHost: DomSharedStylesHost,
    SharedStylesHost: SharedStylesHost,
    ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
    DomEventsPlugin: DomEventsPlugin,
    KeyEventsPlugin: KeyEventsPlugin,
    HammerGesturesPlugin: HammerGesturesPlugin,
    initDomAdapter: initDomAdapter,
    INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS,
    BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS,
    WebAnimationsDriver: WebAnimationsDriver
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var VERSION$4 = new core.Version('2.4.9');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */



var index$18 = Object.freeze({
	BrowserModule: BrowserModule$1,
	platformBrowser: platformBrowser,
	Title: Title,
	disableDebugTools: disableDebugTools,
	enableDebugTools: enableDebugTools,
	AnimationDriver: AnimationDriver,
	By: By,
	NgProbeToken: NgProbeToken$2,
	DOCUMENT: DOCUMENT,
	EVENT_MANAGER_PLUGINS: EVENT_MANAGER_PLUGINS,
	EventManager: EventManager,
	HAMMER_GESTURE_CONFIG: HAMMER_GESTURE_CONFIG,
	HammerGestureConfig: HammerGestureConfig,
	DomSanitizer: DomSanitizer,
	VERSION: VERSION$4,
	__platform_browser_private__: __platform_browser_private__$1
});

var platform_browser_1 = ( index$18 && undefined ) || index$18;

var __decorate$9 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$6 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2MenuModule$1 = (function () {
    function Ng2MenuModule() {
    }
    return Ng2MenuModule;
}());
Ng2MenuModule$1 = __decorate$9([
    core_1.NgModule({
        imports: [platform_browser_1.BrowserModule, forms_1.FormsModule],
        declarations: [ng2Menu_directive.Ng2MenuDirective],
        exports: [ng2Menu_directive.Ng2MenuDirective]
    }),
    __metadata$6("design:paramtypes", [])
], Ng2MenuModule$1);
var Ng2MenuModule_1 = Ng2MenuModule$1;
var ng2Menu_module = {
	Ng2MenuModule: Ng2MenuModule_1
};

var Ng2MenuDirective = ng2Menu_directive.Ng2MenuDirective;
var Ng2MenuModule = ng2Menu_module.Ng2MenuModule;
var index$16 = {
	Ng2MenuDirective: Ng2MenuDirective,
	Ng2MenuModule: Ng2MenuModule
};

var ng2ParallaxScroll_umd = createCommonjsModule(function (module, exports) {
(function webpackUniversalModuleDefinition(root, factory) {
	module.exports = factory(core_1, forms_1, common_1);
})(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {
return /******/ (function(modules) {
/******/ 	var installedModules = {};
/******/ 	function __webpack_require__(moduleId) {
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 		module.loaded = true;
/******/ 		return module.exports;
/******/ 	}
/******/ 	__webpack_require__.m = modules;
/******/ 	__webpack_require__.c = installedModules;
/******/ 	__webpack_require__.p = "";
/******/ 	return __webpack_require__(0);
/******/ })
/******/ ([
/***/ function(module, exports, __webpack_require__) {
	"use strict";
	var ng2_parallax_scroll_directive_1 = __webpack_require__(1);
	exports.Ng2ParallaxScrollDirective = ng2_parallax_scroll_directive_1.Ng2ParallaxScrollDirective;
	var ng2_parallax_scroll_module_1 = __webpack_require__(3);
	exports.Ng2ParallaxScrollModule = ng2_parallax_scroll_module_1.Ng2ParallaxScrollModule;
/***/ },
/***/ function(module, exports, __webpack_require__) {
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1$$1 = __webpack_require__(2);
	var Ng2ParallaxScrollDirective = (function () {
	    function Ng2ParallaxScrollDirective(viewContainer) {
	        this.viewContainer = viewContainer;
	        this.el = this.viewContainer.element.nativeElement;
	    }
	    Ng2ParallaxScrollDirective.prototype.ngAfterViewInit = function () {
	        var _this = this;
	        this.img = this.el.querySelector("img");
	        this.img.onload = function () {
	            _this.imgOrgWidth = _this.imgOrgWidth || _this.img.offsetWidth;
	            _this.imgOrgHeight = _this.imgOrgHeight || _this.img.offsetHeight;
	            console.log(_this.img.offsetWidth, _this.img.offsetHeight, _this.img.width, _this.img.height);
	            _this.setParallaxImage();
	            _this.updateParallaxImage();
	            window.addEventListener('scroll', function () {
	                _this.updateParallaxImage();
	            });
	            window.addEventListener('resize', function () {
	                _this.setParallaxImage();
	                _this.updateParallaxImage();
	            });
	        };
	    };
	    Ng2ParallaxScrollDirective.prototype.setParallaxImage = function () {
	        var imgSize = this.imgOrgWidth > this.el.offsetWidth ?
	            { width: this.el.offsetWidth + 'px' } : { height: this.el.offsetHeight * 1.5 + 'px' };
	        Object.assign(this.img.style, {
	            display: 'block', position: 'absolute', bottom: 0, left: 0
	        }, imgSize);
	        Object.assign(this.el.style, {
	            position: 'relative', overflow: 'hidden'
	        });
	        var imgWrapperEl = this.el.querySelector('.parallax-img-wrapper');
	        if (!imgWrapperEl) {
	            imgWrapperEl = document.createElement('div');
	            imgWrapperEl.className = 'parallax-img-wrapper';
	            imgWrapperEl.appendChild(this.img);
	            this.el.appendChild(imgWrapperEl);
	        }
	        Object.assign(imgWrapperEl.style, {
	            position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, zIndex: -1
	        });
	    };
	    Ng2ParallaxScrollDirective.prototype.updateParallaxImage = function () {
	        var elRect = this.el.getBoundingClientRect();
	        var imgRect = this.img.getBoundingClientRect();
	        var imgDist = imgRect.height - elRect.height;
	        var bottom = this.el.offsetTop + elRect.height;
	        var top = this.el.offsetTop;
	        var scrollTop = document.body.scrollTop;
	        var windowBottom = scrollTop + window.innerHeight;
	        var percentScrolled = (windowBottom - top) / (elRect.height + window.innerHeight);
	        var parallax = Math.round((imgDist * percentScrolled));
	        if ((bottom > scrollTop) && (top < (scrollTop + window.innerHeight))) {
	            this.img.style.bottom = parallax * -1 + 'px';
	        }
	    };
	    return Ng2ParallaxScrollDirective;
	}());
	Ng2ParallaxScrollDirective = __decorate([
	    core_1$$1.Directive({
	        selector: '[ng2-parallax], ng2-parallax'
	    }),
	    __metadata("design:paramtypes", [core_1$$1.ViewContainerRef])
	], Ng2ParallaxScrollDirective);
	exports.Ng2ParallaxScrollDirective = Ng2ParallaxScrollDirective;
/***/ },
/***/ function(module, exports) {
	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;
/***/ },
/***/ function(module, exports, __webpack_require__) {
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1$$1 = __webpack_require__(2);
	var forms_1$$1 = __webpack_require__(4);
	var common_1$$1 = __webpack_require__(5);
	var ng2_parallax_scroll_directive_1 = __webpack_require__(1);
	var Ng2ParallaxScrollModule = (function () {
	    function Ng2ParallaxScrollModule() {
	    }
	    return Ng2ParallaxScrollModule;
	}());
	Ng2ParallaxScrollModule = __decorate([
	    core_1$$1.NgModule({
	        imports: [common_1$$1.CommonModule, forms_1$$1.FormsModule],
	        declarations: [ng2_parallax_scroll_directive_1.Ng2ParallaxScrollDirective],
	        exports: [ng2_parallax_scroll_directive_1.Ng2ParallaxScrollDirective]
	    }),
	    __metadata("design:paramtypes", [])
	], Ng2ParallaxScrollModule);
	exports.Ng2ParallaxScrollModule = Ng2ParallaxScrollModule;
/***/ },
/***/ function(module, exports) {
	module.exports = __WEBPACK_EXTERNAL_MODULE_4__;
/***/ },
/***/ function(module, exports) {
	module.exports = __WEBPACK_EXTERNAL_MODULE_5__;
/***/ }
/******/ ])
});

});

function scrollTo$1(selector, parentSelector, horizontal, distance) {
    var parentEl, targetEl;
    parentSelector = parentSelector || 'body';
    targetEl = document.querySelector(selector);
    if (!targetEl) {
        throw "Invalid selector " + selector;
    }
    parentEl = document.querySelector(parentSelector);
    if (!parentEl) {
        throw "Invalid parent selector " + parentSelector;
    }
    var parentElStyle = window.getComputedStyle(parentEl);
    var scrollContainerEl = parentElStyle.overflow === 'auto' ? parentEl : document.body;
    var currentScrollTop = scrollContainerEl.scrollTop;
    var currentScrollLeft = scrollContainerEl.scrollLeft;
    var targetOffsetTop;
    var targetOffsetLeft;
    if (scrollContainerEl === document.body) {
        var bodyRect = document.body.getBoundingClientRect();
        var targetRect = targetEl.getBoundingClientRect();
        targetOffsetTop = targetRect.top - bodyRect.top;
        targetOffsetLeft = targetRect.left - bodyRect.left;
    }
    else {
        targetOffsetTop = targetEl.offsetTop;
        targetOffsetLeft = targetEl.offsetLeft;
    }
    if (distance) {
        currentScrollTop += distance;
        currentScrollLeft += distance;
    }
    var step = horizontal ?
        Math.ceil((targetOffsetLeft - currentScrollLeft) / 10) :
        Math.ceil((targetOffsetTop - currentScrollTop) / 10);
    var scrollProp = horizontal ? 'scrollLeft' : 'scrollTop';
    (function loop(i, prop) {
        setTimeout(function main() {
            scrollContainerEl[prop] += step;
            i > 1 && loop(i - 1, prop);
        }, 50);
    }(10, scrollProp));
}
var scrollTo_2 = scrollTo$1;
var scrollTo_1 = {
	scrollTo: scrollTo_2
};

function elementVisible$1(innerElement, outerElement, adjustment) {
    var innerEl;
    var outerEl;
    innerEl = (typeof innerElement === 'string') ?
        document.querySelector(innerElement) : innerElement;
    outerEl = (typeof outerElement === 'string') ?
        document.querySelector(outerElement) : outerElement;
    var innerRect = innerEl.getBoundingClientRect();
    var bottomAdjustment = (adjustment && adjustment.bottom || 0);
    if (outerEl === window) {
        return {
            top: innerRect.bottom - bottomAdjustment > window.innerHeight
                && innerRect.top < window.innerHeight,
            bottom: innerRect.bottom - bottomAdjustment > 0
                && innerRect.bottom < window.innerHeight,
            left: innerRect.right > window.innerWidth
                && innerRect.left < window.innerWidth,
            right: innerRect.right > 0
                && innerRect.right < window.innerWidth
        };
    }
    else {
        var outerRect = outerEl.getBoundingClientRect();
        var defaultView = (innerEl.ownerDocument || document).defaultView;
        var computedStyle = defaultView.getComputedStyle(outerEl, null);
        var outerRectBorderTopWidth = parseInt(computedStyle.getPropertyValue('border-top-width'), 10);
        var outerRectBorderLeftWidth = parseInt(computedStyle.getPropertyValue('border-left-width'), 10);
        var topVisible = (innerRect.top >= outerRect.top
            && innerRect.top < outerRect.bottom);
        var bottomVisible = (innerRect.bottom > (outerRect.top + outerRectBorderTopWidth)
            && innerRect.bottom < outerRect.bottom);
        var leftVisible = (innerRect.left >= outerRect.left
            && innerRect.left < outerRect.right);
        var rightVisible = (innerRect.right > (outerRect.left + outerRectBorderLeftWidth)
            && innerRect.right < outerRect.right);
        return {
            top: topVisible,
            bottom: bottomVisible,
            left: leftVisible,
            right: rightVisible
        };
    }
}
var elementVisible_2 = elementVisible$1;
var elementVisible_1 = {
	elementVisible: elementVisible_2
};

function computedStyle$1(element, styleProp) {
    var el;
    el = (typeof element === 'string') ? document.querySelector(element) : element;
    var value, defaultView = (el.ownerDocument || document).defaultView;
    if (defaultView && defaultView.getComputedStyle) {
        styleProp = styleProp.replace(/([A-Z])/g, "-$1").toLowerCase();
        return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);
    }
    else if (el['currentStyle']) {
        styleProp = styleProp.replace(/\-(\w)/g, function (str, letter) {
            return letter.toUpperCase();
        });
        value = el['currentStyle'][styleProp];
        if (/^\d+(em|pt|%|ex)?$/i.test(value)) {
            return (function (value) {
                var oldLeft = el.style.left, oldRsLeft = el['runtimeStyle'].left;
                el['runtimeStyle'].left = el['currentStyle'].left;
                el.style.left = value || 0;
                value = el.style['pixelLeft'] + "px";
                el.style.left = oldLeft;
                el['runtimeStyle'].left = oldRsLeft;
                return value;
            })(value);
        }
        return value;
    }
}
var computedStyle_2 = computedStyle$1;
var computedStyle_1 = {
	computedStyle: computedStyle_2
};

function outerWidth$1(element) {
    var el;
    (typeof element === 'string') ? (el = document.querySelector(element)) : element;
    var style = getComputedStyle(el);
    return el.offsetWidth +
        parseInt(style.getPropertyValue('margin-left')) +
        parseInt(style.getPropertyValue('margin-right'));
}
var outerWidth_2 = outerWidth$1;
var outerWidth_1 = {
	outerWidth: outerWidth_2
};

function outerHeight$1(element) {
    var el;
    (typeof element === 'string') ? (el = document.querySelector(element)) : element;
    var style = getComputedStyle(el);
    return el.offsetHeight +
        parseInt(style.getPropertyValue('margin-top')) +
        parseInt(style.getPropertyValue('margin-bottom'));
}
var outerHeight_2 = outerHeight$1;
var outerHeight_1 = {
	outerHeight: outerHeight_2
};

var __decorate$11 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$8 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var HtmlCodePipe$1 = (function () {
    function HtmlCodePipe() {
    }
    HtmlCodePipe.prototype.transform = function (html, tagsIncludeExclude) {
        var ret;
        var tagsInclude = [];
        var tagsExclude = [];
        (tagsIncludeExclude || '').split(',').forEach(function (tag) {
            if (tag.match(/^-/)) {
                tag = tag.replace(/^-/, '');
                tagsExclude.push(tag);
            }
            else if (tag !== '') {
                tagsInclude.push(tag);
            }
        });
        ret = tagsInclude.length > 0 ? '' : html;
        if (tagsInclude.length > 0) {
            tagsInclude.forEach(function (tag) {
                var regEx = new RegExp("<" + tag + ">([\\s\\S]*?)</" + tag + ">");
                var matches = html.match(regEx);
                var output = matches[0].replace(/<\/?ng2-utils-[0-9]+>\s*/g, '');
                ret = ret + output;
            });
        }
        if (tagsExclude.length > 0) {
            tagsExclude.forEach(function (tag) {
                var regEx = new RegExp("<" + tag + ">([\\s\\S]*?)</" + tag + ">");
                ret = ret.replace(regEx, '');
            });
        }
        return ret;
    };
    return HtmlCodePipe;
}());
HtmlCodePipe$1 = __decorate$11([
    core_1.Pipe({ name: 'htmlCode' }),
    __metadata$8("design:paramtypes", [])
], HtmlCodePipe$1);
var HtmlCodePipe_1 = HtmlCodePipe$1;
var htmlCode_pipe = {
	HtmlCodePipe: HtmlCodePipe_1
};

var beautify = createCommonjsModule(function (module, exports) {
if (!Object.values) {
    Object.values = function(o) {
        if (o !== Object(o)) {
            throw new TypeError('Object.values called on a non-object');
        }
        var k = [],
            p;
        for (p in o) {
            if (Object.prototype.hasOwnProperty.call(o, p)) {
                k.push(o[p]);
            }
        }
        return k;
    };
}
(function() {
    function mergeOpts(allOptions, targetType) {
        var finalOpts = {};
        var name;
        for (name in allOptions) {
            if (name !== targetType) {
                finalOpts[name] = allOptions[name];
            }
        }
        if (targetType in allOptions) {
            for (name in allOptions[targetType]) {
                finalOpts[name] = allOptions[targetType][name];
            }
        }
        return finalOpts;
    }
    function js_beautify(js_source_text, options) {
        var acorn = {};
        (function(exports) {
            var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
            var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
            var nonASCIIidentifierChars = "\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u0620-\u0649\u0672-\u06d3\u06e7-\u06e8\u06fb-\u06fc\u0730-\u074a\u0800-\u0814\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0840-\u0857\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962-\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09d7\u09df-\u09e0\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5f-\u0b60\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2-\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d46-\u0d48\u0d57\u0d62-\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e34-\u0e3a\u0e40-\u0e45\u0e50-\u0e59\u0eb4-\u0eb9\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f41-\u0f47\u0f71-\u0f84\u0f86-\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1029\u1040-\u1049\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u170e-\u1710\u1720-\u1730\u1740-\u1750\u1772\u1773\u1780-\u17b2\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1920-\u192b\u1930-\u193b\u1951-\u196d\u19b0-\u19c0\u19c8-\u19c9\u19d0-\u19d9\u1a00-\u1a15\u1a20-\u1a53\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b46-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1bb0-\u1bb9\u1be6-\u1bf3\u1c00-\u1c22\u1c40-\u1c49\u1c5b-\u1c7d\u1cd0-\u1cd2\u1d00-\u1dbe\u1e01-\u1f15\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2d81-\u2d96\u2de0-\u2dff\u3021-\u3028\u3099\u309a\ua640-\ua66d\ua674-\ua67d\ua69f\ua6f0-\ua6f1\ua7f8-\ua800\ua806\ua80b\ua823-\ua827\ua880-\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8f3-\ua8f7\ua900-\ua909\ua926-\ua92d\ua930-\ua945\ua980-\ua983\ua9b3-\ua9c0\uaa00-\uaa27\uaa40-\uaa41\uaa4c-\uaa4d\uaa50-\uaa59\uaa7b\uaae0-\uaae9\uaaf2-\uaaf3\uabc0-\uabe1\uabec\uabed\uabf0-\uabf9\ufb20-\ufb28\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
            var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
            var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
            exports.newline = /[\n\r\u2028\u2029]/;
            exports.lineBreak = new RegExp('\r\n|' + exports.newline.source);
            exports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');
            exports.isIdentifierStart = function(code) {
                if (code < 65) return code === 36 || code === 64;
                if (code < 91) return true;
                if (code < 97) return code === 95;
                if (code < 123) return true;
                return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
            };
            exports.isIdentifierChar = function(code) {
                if (code < 48) return code === 36;
                if (code < 58) return true;
                if (code < 65) return false;
                if (code < 91) return true;
                if (code < 97) return code === 95;
                if (code < 123) return true;
                return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
            };
        })(acorn);
        function in_array(what, arr) {
            for (var i = 0; i < arr.length; i += 1) {
                if (arr[i] === what) {
                    return true;
                }
            }
            return false;
        }
        function trim(s) {
            return s.replace(/^\s+|\s+$/g, '');
        }
        function ltrim(s) {
            return s.replace(/^\s+/g, '');
        }
        function sanitizeOperatorPosition(opPosition) {
            opPosition = opPosition || OPERATOR_POSITION.before_newline;
            var validPositionValues = Object.values(OPERATOR_POSITION);
            if (!in_array(opPosition, validPositionValues)) {
                throw new Error("Invalid Option Value: The option 'operator_position' must be one of the following values\n" +
                    validPositionValues +
                    "\nYou passed in: '" + opPosition + "'");
            }
            return opPosition;
        }
        var OPERATOR_POSITION = {
            before_newline: 'before-newline',
            after_newline: 'after-newline',
            preserve_newline: 'preserve-newline',
        };
        var OPERATOR_POSITION_BEFORE_OR_PRESERVE = [OPERATOR_POSITION.before_newline, OPERATOR_POSITION.preserve_newline];
        var MODE = {
            BlockStatement: 'BlockStatement',
            Statement: 'Statement',
            ObjectLiteral: 'ObjectLiteral',
            ArrayLiteral: 'ArrayLiteral',
            ForInitializer: 'ForInitializer',
            Conditional: 'Conditional',
            Expression: 'Expression'
        };
        function Beautifier(js_source_text, options) {
            "use strict";
            var output;
            var tokens = [],
                token_pos;
            var Tokenizer;
            var current_token;
            var last_type, last_last_text, indent_string;
            var flags, previous_flags, flag_store;
            var prefix;
            var handlers, opt;
            var baseIndentString = '';
            handlers = {
                'TK_START_EXPR': handle_start_expr,
                'TK_END_EXPR': handle_end_expr,
                'TK_START_BLOCK': handle_start_block,
                'TK_END_BLOCK': handle_end_block,
                'TK_WORD': handle_word,
                'TK_RESERVED': handle_word,
                'TK_SEMICOLON': handle_semicolon,
                'TK_STRING': handle_string,
                'TK_EQUALS': handle_equals,
                'TK_OPERATOR': handle_operator,
                'TK_COMMA': handle_comma,
                'TK_BLOCK_COMMENT': handle_block_comment,
                'TK_COMMENT': handle_comment,
                'TK_DOT': handle_dot,
                'TK_UNKNOWN': handle_unknown,
                'TK_EOF': handle_eof
            };
            function create_flags(flags_base, mode) {
                var next_indent_level = 0;
                if (flags_base) {
                    next_indent_level = flags_base.indentation_level;
                    if (!output.just_added_newline() &&
                        flags_base.line_indent_level > next_indent_level) {
                        next_indent_level = flags_base.line_indent_level;
                    }
                }
                var next_flags = {
                    mode: mode,
                    parent: flags_base,
                    last_text: flags_base ? flags_base.last_text : '',
                    last_word: flags_base ? flags_base.last_word : '',
                    declaration_statement: false,
                    declaration_assignment: false,
                    multiline_frame: false,
                    inline_frame: false,
                    if_block: false,
                    else_block: false,
                    do_block: false,
                    do_while: false,
                    import_block: false,
                    in_case_statement: false,
                    in_case: false,
                    case_body: false,
                    indentation_level: next_indent_level,
                    line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,
                    start_line_index: output.get_line_number(),
                    ternary_depth: 0
                };
                return next_flags;
            }
            options = options ? options : {};
            options = mergeOpts(options, 'js');
            opt = {};
            if (options.brace_style === "expand-strict") {
                options.brace_style = "expand";
            } else if (options.brace_style === "collapse-preserve-inline") {
                options.brace_style = "collapse,preserve-inline";
            } else if (options.braces_on_own_line !== undefined) {
                options.brace_style = options.braces_on_own_line ? "expand" : "collapse";
            } else if (!options.brace_style)
            {
                options.brace_style = "collapse";
            }
            var brace_style_split = options.brace_style.split(/[^a-zA-Z0-9_\-]+/);
            opt.brace_style = brace_style_split[0];
            opt.brace_preserve_inline = brace_style_split[1] ? brace_style_split[1] : false;
            opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;
            opt.indent_char = options.indent_char ? options.indent_char : ' ';
            opt.eol = options.eol ? options.eol : 'auto';
            opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;
            opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;
            opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);
            opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;
            opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;
            opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;
            opt.space_after_anon_function = (options.space_after_anon_function === undefined) ? false : options.space_after_anon_function;
            opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;
            opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;
            opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;
            opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);
            opt.e4x = (options.e4x === undefined) ? false : options.e4x;
            opt.end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
            opt.comma_first = (options.comma_first === undefined) ? false : options.comma_first;
            opt.operator_position = sanitizeOperatorPosition(options.operator_position);
            opt.test_output_raw = (options.test_output_raw === undefined) ? false : options.test_output_raw;
            if (opt.jslint_happy) {
                opt.space_after_anon_function = true;
            }
            if (options.indent_with_tabs) {
                opt.indent_char = '\t';
                opt.indent_size = 1;
            }
            if (opt.eol === 'auto') {
                opt.eol = '\n';
                if (js_source_text && acorn.lineBreak.test(js_source_text || '')) {
                    opt.eol = js_source_text.match(acorn.lineBreak)[0];
                }
            }
            opt.eol = opt.eol.replace(/\\r/, '\r').replace(/\\n/, '\n');
            indent_string = '';
            while (opt.indent_size > 0) {
                indent_string += opt.indent_char;
                opt.indent_size -= 1;
            }
            var preindent_index = 0;
            if (js_source_text && js_source_text.length) {
                while ((js_source_text.charAt(preindent_index) === ' ' ||
                        js_source_text.charAt(preindent_index) === '\t')) {
                    baseIndentString += js_source_text.charAt(preindent_index);
                    preindent_index += 1;
                }
                js_source_text = js_source_text.substring(preindent_index);
            }
            last_type = 'TK_START_BLOCK';
            last_last_text = '';
            output = new Output$$1(indent_string, baseIndentString);
            output.raw = opt.test_output_raw;
            flag_store = [];
            set_mode(MODE.BlockStatement);
            this.beautify = function() {
                var sweet_code;
                Tokenizer = new tokenizer(js_source_text, opt, indent_string);
                tokens = Tokenizer.tokenize();
                token_pos = 0;
                current_token = get_token();
                while (current_token) {
                    handlers[current_token.type]();
                    last_last_text = flags.last_text;
                    last_type = current_token.type;
                    flags.last_text = current_token.text;
                    token_pos += 1;
                    current_token = get_token();
                }
                sweet_code = output.get_code();
                if (opt.end_with_newline) {
                    sweet_code += '\n';
                }
                if (opt.eol !== '\n') {
                    sweet_code = sweet_code.replace(/[\n]/g, opt.eol);
                }
                return sweet_code;
            };
            function handle_whitespace_and_comments(local_token, preserve_statement_flags) {
                var newlines = local_token.newlines;
                var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);
                var temp_token = current_token;
                for (var h = 0; h < local_token.comments_before.length; h++) {
                    current_token = local_token.comments_before[h];
                    handle_whitespace_and_comments(current_token, preserve_statement_flags);
                    handlers[current_token.type](preserve_statement_flags);
                }
                current_token = temp_token;
                if (keep_whitespace) {
                    for (var i = 0; i < newlines; i += 1) {
                        print_newline(i > 0, preserve_statement_flags);
                    }
                } else {
                    if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {
                        newlines = opt.max_preserve_newlines;
                    }
                    if (opt.preserve_newlines) {
                        if (local_token.newlines > 1) {
                            print_newline(false, preserve_statement_flags);
                            for (var j = 1; j < newlines; j += 1) {
                                print_newline(true, preserve_statement_flags);
                            }
                        }
                    }
                }
            }
            function split_linebreaks(s) {
                s = s.replace(acorn.allLineBreaks, '\n');
                var out = [],
                    idx = s.indexOf("\n");
                while (idx !== -1) {
                    out.push(s.substring(0, idx));
                    s = s.substring(idx + 1);
                    idx = s.indexOf("\n");
                }
                if (s.length) {
                    out.push(s);
                }
                return out;
            }
            var newline_restricted_tokens = ['break', 'continue', 'return', 'throw'];
            function allow_wrap_or_preserved_newline(force_linewrap) {
                force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;
                if (output.just_added_newline()) {
                    return;
                }
                var shouldPreserveOrForce = (opt.preserve_newlines && current_token.wanted_newline) || force_linewrap;
                var operatorLogicApplies = in_array(flags.last_text, Tokenizer.positionable_operators) || in_array(current_token.text, Tokenizer.positionable_operators);
                if (operatorLogicApplies) {
                    var shouldPrintOperatorNewline = (
                            in_array(flags.last_text, Tokenizer.positionable_operators) &&
                            in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)
                        ) ||
                        in_array(current_token.text, Tokenizer.positionable_operators);
                    shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;
                }
                if (shouldPreserveOrForce) {
                    print_newline(false, true);
                } else if (opt.wrap_line_length) {
                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, newline_restricted_tokens)) {
                        return;
                    }
                    var proposed_line_length = output.current_line.get_character_count() + current_token.text.length +
                        (output.space_before_token ? 1 : 0);
                    if (proposed_line_length >= opt.wrap_line_length) {
                        print_newline(false, true);
                    }
                }
            }
            function print_newline(force_newline, preserve_statement_flags) {
                if (!preserve_statement_flags) {
                    if (flags.last_text !== ';' && flags.last_text !== ',' && flags.last_text !== '=' && last_type !== 'TK_OPERATOR') {
                        var next_token = get_token(1);
                        while (flags.mode === MODE.Statement &&
                            !(flags.if_block && next_token && next_token.type === 'TK_RESERVED' && next_token.text === 'else') &&
                            !flags.do_block) {
                            restore_mode();
                        }
                    }
                }
                if (output.add_new_line(force_newline)) {
                    flags.multiline_frame = true;
                }
            }
            function print_token_line_indentation() {
                if (output.just_added_newline()) {
                    if (opt.keep_array_indentation && is_array(flags.mode) && current_token.wanted_newline) {
                        output.current_line.push(current_token.whitespace_before);
                        output.space_before_token = false;
                    } else if (output.set_indent(flags.indentation_level)) {
                        flags.line_indent_level = flags.indentation_level;
                    }
                }
            }
            function print_token(printable_token) {
                if (output.raw) {
                    output.add_raw_token(current_token);
                    return;
                }
                if (opt.comma_first && last_type === 'TK_COMMA' &&
                    output.just_added_newline()) {
                    if (output.previous_line.last() === ',') {
                        var popped = output.previous_line.pop();
                        if (output.previous_line.is_empty()) {
                            output.previous_line.push(popped);
                            output.trim(true);
                            output.current_line.pop();
                            output.trim();
                        }
                        print_token_line_indentation();
                        output.add_token(',');
                        output.space_before_token = true;
                    }
                }
                printable_token = printable_token || current_token.text;
                print_token_line_indentation();
                output.add_token(printable_token);
            }
            function indent() {
                flags.indentation_level += 1;
            }
            function deindent() {
                if (flags.indentation_level > 0 &&
                    ((!flags.parent) || flags.indentation_level > flags.parent.indentation_level)) {
                    flags.indentation_level -= 1;
                }
            }
            function set_mode(mode) {
                if (flags) {
                    flag_store.push(flags);
                    previous_flags = flags;
                } else {
                    previous_flags = create_flags(null, mode);
                }
                flags = create_flags(previous_flags, mode);
            }
            function is_array(mode) {
                return mode === MODE.ArrayLiteral;
            }
            function is_expression(mode) {
                return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);
            }
            function restore_mode() {
                if (flag_store.length > 0) {
                    previous_flags = flags;
                    flags = flag_store.pop();
                    if (previous_flags.mode === MODE.Statement) {
                        output.remove_redundant_indentation(previous_flags);
                    }
                }
            }
            function start_of_object_property() {
                return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (
                    (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set'])));
            }
            function start_of_statement() {
                if (
                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') ||
                    (last_type === 'TK_RESERVED' && flags.last_text === 'do') ||
                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw']) && !current_token.wanted_newline) ||
                    (last_type === 'TK_RESERVED' && flags.last_text === 'else' &&
                        !(current_token.type === 'TK_RESERVED' && current_token.text === 'if' && !current_token.comments_before.length)) ||
                    (last_type === 'TK_END_EXPR' && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional)) ||
                    (last_type === 'TK_WORD' && flags.mode === MODE.BlockStatement &&
                        !flags.in_case &&
                        !(current_token.text === '--' || current_token.text === '++') &&
                        last_last_text !== 'function' &&
                        current_token.type !== 'TK_WORD' && current_token.type !== 'TK_RESERVED') ||
                    (flags.mode === MODE.ObjectLiteral && (
                        (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set']))))
                ) {
                    set_mode(MODE.Statement);
                    indent();
                    handle_whitespace_and_comments(current_token, true);
                    if (!start_of_object_property()) {
                        allow_wrap_or_preserved_newline(
                            current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['do', 'for', 'if', 'while']));
                    }
                    return true;
                }
                return false;
            }
            function all_lines_start_with(lines, c) {
                for (var i = 0; i < lines.length; i++) {
                    var line = trim(lines[i]);
                    if (line.charAt(0) !== c) {
                        return false;
                    }
                }
                return true;
            }
            function each_line_matches_indent(lines, indent) {
                var i = 0,
                    len = lines.length,
                    line;
                for (; i < len; i++) {
                    line = lines[i];
                    if (line && line.indexOf(indent) !== 0) {
                        return false;
                    }
                }
                return true;
            }
            function is_special_word(word) {
                return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);
            }
            function get_token(offset) {
                var index = token_pos + (offset || 0);
                return (index < 0 || index >= tokens.length) ? null : tokens[index];
            }
            function handle_start_expr() {
                if (!start_of_statement()) {
                    handle_whitespace_and_comments(current_token);
                }
                var next_mode = MODE.Expression;
                if (current_token.text === '[') {
                    if (last_type === 'TK_WORD' || flags.last_text === ')') {
                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, Tokenizer.line_starters)) {
                            output.space_before_token = true;
                        }
                        set_mode(next_mode);
                        print_token();
                        indent();
                        if (opt.space_in_paren) {
                            output.space_before_token = true;
                        }
                        return;
                    }
                    next_mode = MODE.ArrayLiteral;
                    if (is_array(flags.mode)) {
                        if (flags.last_text === '[' ||
                            (flags.last_text === ',' && (last_last_text === ']' || last_last_text === '}'))) {
                            if (!opt.keep_array_indentation) {
                                print_newline();
                            }
                        }
                    }
                } else {
                    if (last_type === 'TK_RESERVED' && flags.last_text === 'for') {
                        next_mode = MODE.ForInitializer;
                    } else if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['if', 'while'])) {
                        next_mode = MODE.Conditional;
                    } else {
                    }
                }
                if (flags.last_text === ';' || last_type === 'TK_START_BLOCK') {
                    print_newline();
                } else if (last_type === 'TK_END_EXPR' || last_type === 'TK_START_EXPR' || last_type === 'TK_END_BLOCK' || flags.last_text === '.') {
                    allow_wrap_or_preserved_newline(current_token.wanted_newline);
                } else if (!(last_type === 'TK_RESERVED' && current_token.text === '(') && last_type !== 'TK_WORD' && last_type !== 'TK_OPERATOR') {
                    output.space_before_token = true;
                } else if ((last_type === 'TK_RESERVED' && (flags.last_word === 'function' || flags.last_word === 'typeof')) ||
                    (flags.last_text === '*' &&
                        (in_array(last_last_text, ['function', 'yield']) ||
                            (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {
                    if (opt.space_after_anon_function) {
                        output.space_before_token = true;
                    }
                } else if (last_type === 'TK_RESERVED' && (in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === 'catch')) {
                    if (opt.space_before_conditional) {
                        output.space_before_token = true;
                    }
                }
                if (current_token.text === '(' && last_type === 'TK_RESERVED' && flags.last_word === 'await') {
                    output.space_before_token = true;
                }
                if (current_token.text === '(') {
                    if (last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
                        if (!start_of_object_property()) {
                            allow_wrap_or_preserved_newline();
                        }
                    }
                }
                if (current_token.text === '(' && last_type !== 'TK_WORD' && last_type !== 'TK_RESERVED') {
                    allow_wrap_or_preserved_newline();
                }
                set_mode(next_mode);
                print_token();
                if (opt.space_in_paren) {
                    output.space_before_token = true;
                }
                indent();
            }
            function handle_end_expr() {
                while (flags.mode === MODE.Statement) {
                    restore_mode();
                }
                handle_whitespace_and_comments(current_token);
                if (flags.multiline_frame) {
                    allow_wrap_or_preserved_newline(current_token.text === ']' && is_array(flags.mode) && !opt.keep_array_indentation);
                }
                if (opt.space_in_paren) {
                    if (last_type === 'TK_START_EXPR' && !opt.space_in_empty_paren) {
                        output.trim();
                        output.space_before_token = false;
                    } else {
                        output.space_before_token = true;
                    }
                }
                if (current_token.text === ']' && opt.keep_array_indentation) {
                    print_token();
                    restore_mode();
                } else {
                    restore_mode();
                    print_token();
                }
                output.remove_redundant_indentation(previous_flags);
                if (flags.do_while && previous_flags.mode === MODE.Conditional) {
                    previous_flags.mode = MODE.Expression;
                    flags.do_block = false;
                    flags.do_while = false;
                }
            }
            function handle_start_block() {
                handle_whitespace_and_comments(current_token);
                var next_token = get_token(1);
                var second_token = get_token(2);
                if (second_token && (
                        (in_array(second_token.text, [':', ',']) && in_array(next_token.type, ['TK_STRING', 'TK_WORD', 'TK_RESERVED'])) ||
                        (in_array(next_token.text, ['get', 'set', '...']) && in_array(second_token.type, ['TK_WORD', 'TK_RESERVED']))
                    )) {
                    if (!in_array(last_last_text, ['class', 'interface'])) {
                        set_mode(MODE.ObjectLiteral);
                    } else {
                        set_mode(MODE.BlockStatement);
                    }
                } else if (last_type === 'TK_OPERATOR' && flags.last_text === '=>') {
                    set_mode(MODE.BlockStatement);
                } else if (in_array(last_type, ['TK_EQUALS', 'TK_START_EXPR', 'TK_COMMA', 'TK_OPERATOR']) ||
                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw', 'import', 'default']))
                ) {
                    set_mode(MODE.ObjectLiteral);
                } else {
                    set_mode(MODE.BlockStatement);
                }
                var empty_braces = !next_token.comments_before.length && next_token.text === '}';
                var empty_anonymous_function = empty_braces && flags.last_word === 'function' &&
                    last_type === 'TK_END_EXPR';
                if (opt.brace_preserve_inline)
                {
                    var index = 0;
                    var check_token = null;
                    flags.inline_frame = true;
                    do {
                        index += 1;
                        check_token = get_token(index);
                        if (check_token.wanted_newline) {
                            flags.inline_frame = false;
                            break;
                        }
                    } while (check_token.type !== 'TK_EOF' &&
                        !(check_token.type === 'TK_END_BLOCK' && check_token.opened === current_token));
                }
                if ((opt.brace_style === "expand" ||
                        (opt.brace_style === "none" && current_token.wanted_newline)) &&
                    !flags.inline_frame) {
                    if (last_type !== 'TK_OPERATOR' &&
                        (empty_anonymous_function ||
                            last_type === 'TK_EQUALS' ||
                            (last_type === 'TK_RESERVED' && is_special_word(flags.last_text) && flags.last_text !== 'else'))) {
                        output.space_before_token = true;
                    } else {
                        print_newline(false, true);
                    }
                } else {
                    if (is_array(previous_flags.mode) && (last_type === 'TK_START_EXPR' || last_type === 'TK_COMMA')) {
                        if (last_type === 'TK_COMMA' || opt.space_in_paren) {
                            output.space_before_token = true;
                        }
                        if (last_type === 'TK_COMMA' || (last_type === 'TK_START_EXPR' && flags.inline_frame)) {
                            allow_wrap_or_preserved_newline();
                            previous_flags.multiline_frame = previous_flags.multiline_frame || flags.multiline_frame;
                            flags.multiline_frame = false;
                        }
                    }
                    if (last_type !== 'TK_OPERATOR' && last_type !== 'TK_START_EXPR') {
                        if (last_type === 'TK_START_BLOCK' && !flags.inline_frame) {
                            print_newline();
                        } else {
                            output.space_before_token = true;
                        }
                    }
                }
                print_token();
                indent();
            }
            function handle_end_block() {
                handle_whitespace_and_comments(current_token);
                while (flags.mode === MODE.Statement) {
                    restore_mode();
                }
                var empty_braces = last_type === 'TK_START_BLOCK';
                if (flags.inline_frame && !empty_braces) {
                    output.space_before_token = true;
                } else if (opt.brace_style === "expand") {
                    if (!empty_braces) {
                        print_newline();
                    }
                } else {
                    if (!empty_braces) {
                        if (is_array(flags.mode) && opt.keep_array_indentation) {
                            opt.keep_array_indentation = false;
                            print_newline();
                            opt.keep_array_indentation = true;
                        } else {
                            print_newline();
                        }
                    }
                }
                restore_mode();
                print_token();
            }
            function handle_word() {
                if (current_token.type === 'TK_RESERVED') {
                    if (in_array(current_token.text, ['set', 'get']) && flags.mode !== MODE.ObjectLiteral) {
                        current_token.type = 'TK_WORD';
                    } else if (in_array(current_token.text, ['as', 'from']) && !flags.import_block) {
                        current_token.type = 'TK_WORD';
                    } else if (flags.mode === MODE.ObjectLiteral) {
                        var next_token = get_token(1);
                        if (next_token.text === ':') {
                            current_token.type = 'TK_WORD';
                        }
                    }
                }
                if (start_of_statement()) {
                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') {
                        flags.declaration_statement = true;
                    }
                } else if (current_token.wanted_newline && !is_expression(flags.mode) &&
                    (last_type !== 'TK_OPERATOR' || (flags.last_text === '--' || flags.last_text === '++')) &&
                    last_type !== 'TK_EQUALS' &&
                    (opt.preserve_newlines || !(last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {
                    handle_whitespace_and_comments(current_token);
                    print_newline();
                } else {
                    handle_whitespace_and_comments(current_token);
                }
                if (flags.do_block && !flags.do_while) {
                    if (current_token.type === 'TK_RESERVED' && current_token.text === 'while') {
                        output.space_before_token = true;
                        print_token();
                        output.space_before_token = true;
                        flags.do_while = true;
                        return;
                    } else {
                        print_newline();
                        flags.do_block = false;
                    }
                }
                if (flags.if_block) {
                    if (!flags.else_block && (current_token.type === 'TK_RESERVED' && current_token.text === 'else')) {
                        flags.else_block = true;
                    } else {
                        while (flags.mode === MODE.Statement) {
                            restore_mode();
                        }
                        flags.if_block = false;
                        flags.else_block = false;
                    }
                }
                if (current_token.type === 'TK_RESERVED' && (current_token.text === 'case' || (current_token.text === 'default' && flags.in_case_statement))) {
                    print_newline();
                    if (flags.case_body || opt.jslint_happy) {
                        deindent();
                        flags.case_body = false;
                    }
                    print_token();
                    flags.in_case = true;
                    flags.in_case_statement = true;
                    return;
                }
                if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
                    if (!start_of_object_property()) {
                        allow_wrap_or_preserved_newline();
                    }
                }
                if (current_token.type === 'TK_RESERVED' && current_token.text === 'function') {
                    if (in_array(flags.last_text, ['}', ';']) ||
                        (output.just_added_newline() && !(in_array(flags.last_text, ['(', '[', '{', ':', '=', ',']) || last_type === 'TK_OPERATOR'))) {
                        if (!output.just_added_blankline() && !current_token.comments_before.length) {
                            print_newline();
                            print_newline(true);
                        }
                    }
                    if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {
                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set', 'new', 'return', 'export', 'async'])) {
                            output.space_before_token = true;
                        } else if (last_type === 'TK_RESERVED' && flags.last_text === 'default' && last_last_text === 'export') {
                            output.space_before_token = true;
                        } else {
                            print_newline();
                        }
                    } else if (last_type === 'TK_OPERATOR' || flags.last_text === '=') {
                        output.space_before_token = true;
                    } else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {
                    } else {
                        print_newline();
                    }
                    print_token();
                    flags.last_word = current_token.text;
                    return;
                }
                prefix = 'NONE';
                if (last_type === 'TK_END_BLOCK') {
                    if (previous_flags.inline_frame) {
                        prefix = 'SPACE';
                    } else if (!(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally', 'from']))) {
                        prefix = 'NEWLINE';
                    } else {
                        if (opt.brace_style === "expand" ||
                            opt.brace_style === "end-expand" ||
                            (opt.brace_style === "none" && current_token.wanted_newline)) {
                            prefix = 'NEWLINE';
                        } else {
                            prefix = 'SPACE';
                            output.space_before_token = true;
                        }
                    }
                } else if (last_type === 'TK_SEMICOLON' && flags.mode === MODE.BlockStatement) {
                    prefix = 'NEWLINE';
                } else if (last_type === 'TK_SEMICOLON' && is_expression(flags.mode)) {
                    prefix = 'SPACE';
                } else if (last_type === 'TK_STRING') {
                    prefix = 'NEWLINE';
                } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' ||
                    (flags.last_text === '*' &&
                        (in_array(last_last_text, ['function', 'yield']) ||
                            (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {
                    prefix = 'SPACE';
                } else if (last_type === 'TK_START_BLOCK') {
                    if (flags.inline_frame) {
                        prefix = 'SPACE';
                    } else {
                        prefix = 'NEWLINE';
                    }
                } else if (last_type === 'TK_END_EXPR') {
                    output.space_before_token = true;
                    prefix = 'NEWLINE';
                }
                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {
                    if (flags.inline_frame || flags.last_text === 'else' || flags.last_text === 'export') {
                        prefix = 'SPACE';
                    } else {
                        prefix = 'NEWLINE';
                    }
                }
                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally'])) {
                    if ((!(last_type === 'TK_END_BLOCK' && previous_flags.mode === MODE.BlockStatement) ||
                            opt.brace_style === "expand" ||
                            opt.brace_style === "end-expand" ||
                            (opt.brace_style === "none" && current_token.wanted_newline)) &&
                        !flags.inline_frame) {
                        print_newline();
                    } else {
                        output.trim(true);
                        var line = output.current_line;
                        if (line.last() !== '}') {
                            print_newline();
                        }
                        output.space_before_token = true;
                    }
                } else if (prefix === 'NEWLINE') {
                    if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
                        output.space_before_token = true;
                    } else if (last_type !== 'TK_END_EXPR') {
                        if ((last_type !== 'TK_START_EXPR' || !(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['var', 'let', 'const']))) && flags.last_text !== ':') {
                            if (current_token.type === 'TK_RESERVED' && current_token.text === 'if' && flags.last_text === 'else') {
                                output.space_before_token = true;
                            } else {
                                print_newline();
                            }
                        }
                    } else if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {
                        print_newline();
                    }
                } else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === ',' && last_last_text === '}') {
                    print_newline();
                } else if (prefix === 'SPACE') {
                    output.space_before_token = true;
                }
                print_token();
                flags.last_word = current_token.text;
                if (current_token.type === 'TK_RESERVED') {
                    if (current_token.text === 'do') {
                        flags.do_block = true;
                    } else if (current_token.text === 'if') {
                        flags.if_block = true;
                    } else if (current_token.text === 'import') {
                        flags.import_block = true;
                    } else if (flags.import_block && current_token.type === 'TK_RESERVED' && current_token.text === 'from') {
                        flags.import_block = false;
                    }
                }
            }
            function handle_semicolon() {
                if (start_of_statement()) {
                    output.space_before_token = false;
                } else {
                    handle_whitespace_and_comments(current_token);
                }
                var next_token = get_token(1);
                while (flags.mode === MODE.Statement &&
                    !(flags.if_block && next_token && next_token.type === 'TK_RESERVED' && next_token.text === 'else') &&
                    !flags.do_block) {
                    restore_mode();
                }
                if (flags.import_block) {
                    flags.import_block = false;
                }
                print_token();
            }
            function handle_string() {
                if (start_of_statement()) {
                    output.space_before_token = true;
                } else {
                    handle_whitespace_and_comments(current_token);
                    if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' || flags.inline_frame) {
                        output.space_before_token = true;
                    } else if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
                        if (!start_of_object_property()) {
                            allow_wrap_or_preserved_newline();
                        }
                    } else {
                        print_newline();
                    }
                }
                print_token();
            }
            function handle_equals() {
                if (start_of_statement()) {
                } else {
                    handle_whitespace_and_comments(current_token);
                }
                if (flags.declaration_statement) {
                    flags.declaration_assignment = true;
                }
                output.space_before_token = true;
                print_token();
                output.space_before_token = true;
            }
            function handle_comma() {
                handle_whitespace_and_comments(current_token, true);
                print_token();
                output.space_before_token = true;
                if (flags.declaration_statement) {
                    if (is_expression(flags.parent.mode)) {
                        flags.declaration_assignment = false;
                    }
                    if (flags.declaration_assignment) {
                        flags.declaration_assignment = false;
                        print_newline(false, true);
                    } else if (opt.comma_first) {
                        allow_wrap_or_preserved_newline();
                    }
                } else if (flags.mode === MODE.ObjectLiteral ||
                    (flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {
                    if (flags.mode === MODE.Statement) {
                        restore_mode();
                    }
                    if (!flags.inline_frame) {
                        print_newline();
                    }
                } else if (opt.comma_first) {
                    allow_wrap_or_preserved_newline();
                }
            }
            function handle_operator() {
                var isGeneratorAsterisk = current_token.text === '*' &&
                    ((last_type === 'TK_RESERVED' && in_array(flags.last_text, ['function', 'yield'])) ||
                        (in_array(last_type, ['TK_START_BLOCK', 'TK_COMMA', 'TK_END_BLOCK', 'TK_SEMICOLON']))
                    );
                var isUnary = in_array(current_token.text, ['-', '+']) && (
                    in_array(last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) ||
                    in_array(flags.last_text, Tokenizer.line_starters) ||
                    flags.last_text === ','
                );
                if (start_of_statement()) {
                } else {
                    var preserve_statement_flags = !isGeneratorAsterisk;
                    handle_whitespace_and_comments(current_token, preserve_statement_flags);
                }
                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
                    output.space_before_token = true;
                    print_token();
                    return;
                }
                if (current_token.text === '*' && last_type === 'TK_DOT') {
                    print_token();
                    return;
                }
                if (current_token.text === '::') {
                    print_token();
                    return;
                }
                if (last_type === 'TK_OPERATOR' && in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {
                    allow_wrap_or_preserved_newline();
                }
                if (current_token.text === ':' && flags.in_case) {
                    flags.case_body = true;
                    indent();
                    print_token();
                    print_newline();
                    flags.in_case = false;
                    return;
                }
                var space_before = true;
                var space_after = true;
                var in_ternary = false;
                if (current_token.text === ':') {
                    if (flags.ternary_depth === 0) {
                        space_before = false;
                    } else {
                        flags.ternary_depth -= 1;
                        in_ternary = true;
                    }
                } else if (current_token.text === '?') {
                    flags.ternary_depth += 1;
                }
                if (!isUnary && !isGeneratorAsterisk && opt.preserve_newlines && in_array(current_token.text, Tokenizer.positionable_operators)) {
                    var isColon = current_token.text === ':';
                    var isTernaryColon = (isColon && in_ternary);
                    var isOtherColon = (isColon && !in_ternary);
                    switch (opt.operator_position) {
                        case OPERATOR_POSITION.before_newline:
                            output.space_before_token = !isOtherColon;
                            print_token();
                            if (!isColon || isTernaryColon) {
                                allow_wrap_or_preserved_newline();
                            }
                            output.space_before_token = true;
                            return;
                        case OPERATOR_POSITION.after_newline:
                            output.space_before_token = true;
                            if (!isColon || isTernaryColon) {
                                if (get_token(1).wanted_newline) {
                                    print_newline(false, true);
                                } else {
                                    allow_wrap_or_preserved_newline();
                                }
                            } else {
                                output.space_before_token = false;
                            }
                            print_token();
                            output.space_before_token = true;
                            return;
                        case OPERATOR_POSITION.preserve_newline:
                            if (!isOtherColon) {
                                allow_wrap_or_preserved_newline();
                            }
                            space_before = !(output.just_added_newline() || isOtherColon);
                            output.space_before_token = space_before;
                            print_token();
                            output.space_before_token = true;
                            return;
                    }
                }
                if (isGeneratorAsterisk) {
                    allow_wrap_or_preserved_newline();
                    space_before = false;
                    var next_token = get_token(1);
                    space_after = next_token && in_array(next_token.type, ['TK_WORD', 'TK_RESERVED']);
                } else if (current_token.text === '...') {
                    allow_wrap_or_preserved_newline();
                    space_before = last_type === 'TK_START_BLOCK';
                    space_after = false;
                } else if (in_array(current_token.text, ['--', '++', '!', '~']) || isUnary) {
                    space_before = false;
                    space_after = false;
                    if (current_token.wanted_newline && (current_token.text === '--' || current_token.text === '++')) {
                        print_newline(false, true);
                    }
                    if (flags.last_text === ';' && is_expression(flags.mode)) {
                        space_before = true;
                    }
                    if (last_type === 'TK_RESERVED') {
                        space_before = true;
                    } else if (last_type === 'TK_END_EXPR') {
                        space_before = !(flags.last_text === ']' && (current_token.text === '--' || current_token.text === '++'));
                    } else if (last_type === 'TK_OPERATOR') {
                        space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(flags.last_text, ['--', '-', '++', '+']);
                        if (in_array(current_token.text, ['+', '-']) && in_array(flags.last_text, ['--', '++'])) {
                            space_after = true;
                        }
                    }
                    if (((flags.mode === MODE.BlockStatement && !flags.inline_frame) || flags.mode === MODE.Statement) &&
                        (flags.last_text === '{' || flags.last_text === ';')) {
                        print_newline();
                    }
                }
                output.space_before_token = output.space_before_token || space_before;
                print_token();
                output.space_before_token = space_after;
            }
            function handle_block_comment(preserve_statement_flags) {
                if (output.raw) {
                    output.add_raw_token(current_token);
                    if (current_token.directives && current_token.directives.preserve === 'end') {
                        output.raw = opt.test_output_raw;
                    }
                    return;
                }
                if (current_token.directives) {
                    print_newline(false, preserve_statement_flags);
                    print_token();
                    if (current_token.directives.preserve === 'start') {
                        output.raw = true;
                    }
                    print_newline(false, true);
                    return;
                }
                if (!acorn.newline.test(current_token.text) && !current_token.wanted_newline) {
                    output.space_before_token = true;
                    print_token();
                    output.space_before_token = true;
                    return;
                }
                var lines = split_linebreaks(current_token.text);
                var j;
                var javadoc = false;
                var starless = false;
                var lastIndent = current_token.whitespace_before;
                var lastIndentLength = lastIndent.length;
                print_newline(false, preserve_statement_flags);
                if (lines.length > 1) {
                    javadoc = all_lines_start_with(lines.slice(1), '*');
                    starless = each_line_matches_indent(lines.slice(1), lastIndent);
                }
                print_token(lines[0]);
                for (j = 1; j < lines.length; j++) {
                    print_newline(false, true);
                    if (javadoc) {
                        print_token(' ' + ltrim(lines[j]));
                    } else if (starless && lines[j].length > lastIndentLength) {
                        print_token(lines[j].substring(lastIndentLength));
                    } else {
                        output.add_token(lines[j]);
                    }
                }
                print_newline(false, preserve_statement_flags);
            }
            function handle_comment(preserve_statement_flags) {
                if (current_token.wanted_newline) {
                    print_newline(false, preserve_statement_flags);
                } else {
                    output.trim(true);
                }
                output.space_before_token = true;
                print_token();
                print_newline(false, preserve_statement_flags);
            }
            function handle_dot() {
                if (start_of_statement()) {
                } else {
                    handle_whitespace_and_comments(current_token, true);
                }
                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
                    output.space_before_token = true;
                } else {
                    allow_wrap_or_preserved_newline(flags.last_text === ')' && opt.break_chained_methods);
                }
                print_token();
            }
            function handle_unknown(preserve_statement_flags) {
                print_token();
                if (current_token.text[current_token.text.length - 1] === '\n') {
                    print_newline(false, preserve_statement_flags);
                }
            }
            function handle_eof() {
                while (flags.mode === MODE.Statement) {
                    restore_mode();
                }
                handle_whitespace_and_comments(current_token);
            }
        }
        function OutputLine(parent) {
            var _character_count = 0;
            var _indent_count = -1;
            var _items = [];
            var _empty = true;
            this.set_indent = function(level) {
                _character_count = parent.baseIndentLength + level * parent.indent_length;
                _indent_count = level;
            };
            this.get_character_count = function() {
                return _character_count;
            };
            this.is_empty = function() {
                return _empty;
            };
            this.last = function() {
                if (!this._empty) {
                    return _items[_items.length - 1];
                } else {
                    return null;
                }
            };
            this.push = function(input) {
                _items.push(input);
                _character_count += input.length;
                _empty = false;
            };
            this.pop = function() {
                var item = null;
                if (!_empty) {
                    item = _items.pop();
                    _character_count -= item.length;
                    _empty = _items.length === 0;
                }
                return item;
            };
            this.remove_indent = function() {
                if (_indent_count > 0) {
                    _indent_count -= 1;
                    _character_count -= parent.indent_length;
                }
            };
            this.trim = function() {
                while (this.last() === ' ') {
                    _items.pop();
                    _character_count -= 1;
                }
                _empty = _items.length === 0;
            };
            this.toString = function() {
                var result = '';
                if (!this._empty) {
                    if (_indent_count >= 0) {
                        result = parent.indent_cache[_indent_count];
                    }
                    result += _items.join('');
                }
                return result;
            };
        }
        function Output$$1(indent_string, baseIndentString) {
            baseIndentString = baseIndentString || '';
            this.indent_cache = [baseIndentString];
            this.baseIndentLength = baseIndentString.length;
            this.indent_length = indent_string.length;
            this.raw = false;
            var lines = [];
            this.baseIndentString = baseIndentString;
            this.indent_string = indent_string;
            this.previous_line = null;
            this.current_line = null;
            this.space_before_token = false;
            this.add_outputline = function() {
                this.previous_line = this.current_line;
                this.current_line = new OutputLine(this);
                lines.push(this.current_line);
            };
            this.add_outputline();
            this.get_line_number = function() {
                return lines.length;
            };
            this.add_new_line = function(force_newline) {
                if (this.get_line_number() === 1 && this.just_added_newline()) {
                    return false;
                }
                if (force_newline || !this.just_added_newline()) {
                    if (!this.raw) {
                        this.add_outputline();
                    }
                    return true;
                }
                return false;
            };
            this.get_code = function() {
                var sweet_code = lines.join('\n').replace(/[\r\n\t ]+$/, '');
                return sweet_code;
            };
            this.set_indent = function(level) {
                if (lines.length > 1) {
                    while (level >= this.indent_cache.length) {
                        this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);
                    }
                    this.current_line.set_indent(level);
                    return true;
                }
                this.current_line.set_indent(0);
                return false;
            };
            this.add_raw_token = function(token) {
                for (var x = 0; x < token.newlines; x++) {
                    this.add_outputline();
                }
                this.current_line.push(token.whitespace_before);
                this.current_line.push(token.text);
                this.space_before_token = false;
            };
            this.add_token = function(printable_token) {
                this.add_space_before_token();
                this.current_line.push(printable_token);
            };
            this.add_space_before_token = function() {
                if (this.space_before_token && !this.just_added_newline()) {
                    this.current_line.push(' ');
                }
                this.space_before_token = false;
            };
            this.remove_redundant_indentation = function(frame) {
                if (frame.multiline_frame ||
                    frame.mode === MODE.ForInitializer ||
                    frame.mode === MODE.Conditional) {
                    return;
                }
                var index = frame.start_line_index;
                var output_length = lines.length;
                while (index < output_length) {
                    lines[index].remove_indent();
                    index++;
                }
            };
            this.trim = function(eat_newlines) {
                eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;
                this.current_line.trim(indent_string, baseIndentString);
                while (eat_newlines && lines.length > 1 &&
                    this.current_line.is_empty()) {
                    lines.pop();
                    this.current_line = lines[lines.length - 1];
                    this.current_line.trim();
                }
                this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null;
            };
            this.just_added_newline = function() {
                return this.current_line.is_empty();
            };
            this.just_added_blankline = function() {
                if (this.just_added_newline()) {
                    if (lines.length === 1) {
                        return true;
                    }
                    var line = lines[lines.length - 2];
                    return line.is_empty();
                }
                return false;
            };
        }
        var InputScanner = function(input) {
            var _input = input;
            var _input_length = _input.length;
            var _position = 0;
            this.back = function() {
                _position -= 1;
            };
            this.hasNext = function() {
                return _position < _input_length;
            };
            this.next = function() {
                var val = null;
                if (this.hasNext()) {
                    val = _input.charAt(_position);
                    _position += 1;
                }
                return val;
            };
            this.peek = function(index) {
                var val = null;
                index = index || 0;
                index += _position;
                if (index >= 0 && index < _input_length) {
                    val = _input.charAt(index);
                }
                return val;
            };
            this.peekCharCode = function(index) {
                var val = 0;
                index = index || 0;
                index += _position;
                if (index >= 0 && index < _input_length) {
                    val = _input.charCodeAt(index);
                }
                return val;
            };
            this.test = function(pattern, index) {
                index = index || 0;
                pattern.lastIndex = _position + index;
                return pattern.test(_input);
            };
            this.testChar = function(pattern, index) {
                var val = this.peek(index);
                return val !== null && pattern.test(val);
            };
            this.match = function(pattern) {
                pattern.lastIndex = _position;
                var pattern_match = pattern.exec(_input);
                if (pattern_match && pattern_match.index === _position) {
                    _position += pattern_match[0].length;
                } else {
                    pattern_match = null;
                }
                return pattern_match;
            };
        };
        var Token = function(type, text, newlines, whitespace_before, parent) {
            this.type = type;
            this.text = text;
            this.comments_before = /* inline comment*/ [];
            this.comments_after = [];
            this.newlines = newlines || 0;
            this.wanted_newline = newlines > 0;
            this.whitespace_before = whitespace_before || '';
            this.parent = parent || null;
            this.opened = null;
            this.directives = null;
        };
        function tokenizer(input_string, opts) {
            var whitespace = "\n\r\t ".split('');
            var digit = /[0-9]/;
            var digit_bin = /[01]/;
            var digit_oct = /[01234567]/;
            var digit_hex = /[0123456789abcdefABCDEF]/;
            this.positionable_operators = '!= !== % & && * ** + - / : < << <= == === > >= >> >>> ? ^ | ||'.split(' ');
            var punct = this.positionable_operators.concat(
                '! %= &= *= **= ++ += , -- -= /= :: <<= = => >>= >>>= ^= |= ~ ...'.split(' '));
            this.line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');
            var reserved_words = this.line_starters.concat(['do', 'in', 'of', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await', 'from', 'as']);
            var block_comment_pattern = /([\s\S]*?)((?:\*\/)|$)/g;
            var comment_pattern = /([^\n\r\u2028\u2029]*)/g;
            var directives_block_pattern = /\/\* beautify( \w+[:]\w+)+ \*\//g;
            var directive_pattern = / (\w+)[:](\w+)/g;
            var directives_end_ignore_pattern = /([\s\S]*?)((?:\/\*\sbeautify\signore:end\s\*\/)|$)/g;
            var template_pattern = /((<\?php|<\?=)[\s\S]*?\?>)|(<%[\s\S]*?%>)/g;
            var n_newlines, whitespace_before_token, in_html_comment, tokens;
            var input;
            this.tokenize = function() {
                input = new InputScanner(input_string);
                in_html_comment = false;
                tokens = [];
                var next, last;
                var token_values;
                var open = null;
                var open_stack = [];
                var comments = [];
                while (!(last && last.type === 'TK_EOF')) {
                    token_values = tokenize_next();
                    next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);
                    while (next.type === 'TK_COMMENT' || next.type === 'TK_BLOCK_COMMENT' || next.type === 'TK_UNKNOWN') {
                        if (next.type === 'TK_BLOCK_COMMENT') {
                            next.directives = token_values[2];
                        }
                        comments.push(next);
                        token_values = tokenize_next();
                        next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);
                    }
                    if (comments.length) {
                        next.comments_before = comments;
                        comments = [];
                    }
                    if (next.type === 'TK_START_BLOCK' || next.type === 'TK_START_EXPR') {
                        next.parent = last;
                        open_stack.push(open);
                        open = next;
                    } else if ((next.type === 'TK_END_BLOCK' || next.type === 'TK_END_EXPR') &&
                        (open && (
                            (next.text === ']' && open.text === '[') ||
                            (next.text === ')' && open.text === '(') ||
                            (next.text === '}' && open.text === '{')))) {
                        next.parent = open.parent;
                        next.opened = open;
                        open = open_stack.pop();
                    }
                    tokens.push(next);
                    last = next;
                }
                return tokens;
            };
            function get_directives(text) {
                if (!text.match(directives_block_pattern)) {
                    return null;
                }
                var directives = {};
                directive_pattern.lastIndex = 0;
                var directive_match = directive_pattern.exec(text);
                while (directive_match) {
                    directives[directive_match[1]] = directive_match[2];
                    directive_match = directive_pattern.exec(text);
                }
                return directives;
            }
            function tokenize_next() {
                var resulting_string;
                var whitespace_on_this_line = [];
                n_newlines = 0;
                whitespace_before_token = '';
                var c = input.next();
                if (c === null) {
                    return ['', 'TK_EOF'];
                }
                var last_token;
                if (tokens.length) {
                    last_token = tokens[tokens.length - 1];
                } else {
                    last_token = new Token('TK_START_BLOCK', '{');
                }
                while (in_array(c, whitespace)) {
                    if (acorn.newline.test(c)) {
                        if (!(c === '\n' && input.peek(-2) === '\r')) {
                            n_newlines += 1;
                            whitespace_on_this_line = [];
                        }
                    } else {
                        whitespace_on_this_line.push(c);
                    }
                    c = input.next();
                    if (c === null) {
                        return ['', 'TK_EOF'];
                    }
                }
                if (whitespace_on_this_line.length) {
                    whitespace_before_token = whitespace_on_this_line.join('');
                }
                if (digit.test(c) || (c === '.' && input.testChar(digit))) {
                    var allow_decimal = true;
                    var allow_e = true;
                    var local_digit = digit;
                    if (c === '0' && input.testChar(/[XxOoBb]/)) {
                        allow_decimal = false;
                        allow_e = false;
                        if (input.testChar(/[Bb]/)) {
                            local_digit = digit_bin;
                        } else if (input.testChar(/[Oo]/)) {
                            local_digit = digit_oct;
                        } else {
                            local_digit = digit_hex;
                        }
                        c += input.next();
                    } else if (c === '.') {
                        allow_decimal = false;
                    } else {
                        c = '';
                        input.back();
                    }
                    while (input.testChar(local_digit)) {
                        c += input.next();
                        if (allow_decimal && input.peek() === '.') {
                            c += input.next();
                            allow_decimal = false;
                        }
                        if (allow_e && input.testChar(/[Ee]/)) {
                            c += input.next();
                            if (input.testChar(/[+-]/)) {
                                c += input.next();
                            }
                            allow_e = false;
                            allow_decimal = false;
                        }
                    }
                    return [c, 'TK_WORD'];
                }
                if (acorn.isIdentifierStart(input.peekCharCode(-1))) {
                    if (input.hasNext()) {
                        while (acorn.isIdentifierChar(input.peekCharCode())) {
                            c += input.next();
                            if (!input.hasNext()) {
                                break;
                            }
                        }
                    }
                    if (!(last_token.type === 'TK_DOT' ||
                            (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['set', 'get']))) &&
                        in_array(c, reserved_words)) {
                        if (c === 'in' || c === 'of') {
                            return [c, 'TK_OPERATOR'];
                        }
                        return [c, 'TK_RESERVED'];
                    }
                    return [c, 'TK_WORD'];
                }
                if (c === '(' || c === '[') {
                    return [c, 'TK_START_EXPR'];
                }
                if (c === ')' || c === ']') {
                    return [c, 'TK_END_EXPR'];
                }
                if (c === '{') {
                    return [c, 'TK_START_BLOCK'];
                }
                if (c === '}') {
                    return [c, 'TK_END_BLOCK'];
                }
                if (c === ';') {
                    return [c, 'TK_SEMICOLON'];
                }
                if (c === '/') {
                    var comment = '';
                    var comment_match;
                    if (input.peek() === '*') {
                        input.next();
                        comment_match = input.match(block_comment_pattern);
                        comment = '/*' + comment_match[0];
                        var directives = get_directives(comment);
                        if (directives && directives.ignore === 'start') {
                            comment_match = input.match(directives_end_ignore_pattern);
                            comment += comment_match[0];
                        }
                        comment = comment.replace(acorn.allLineBreaks, '\n');
                        return [comment, 'TK_BLOCK_COMMENT', directives];
                    }
                    if (input.peek() === '/') {
                        input.next();
                        comment_match = input.match(comment_pattern);
                        comment = '//' + comment_match[0];
                        return [comment, 'TK_COMMENT'];
                    }
                }
                var startXmlRegExp = /<()([-a-zA-Z:0-9_.]+|{[\s\S]+?}|!\[CDATA\[[\s\S]*?\]\])(\s+{[\s\S]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{[\s\S]+?}))*\s*(\/?)\s*>/g;
                if (c === '`' || c === "'" || c === '"' ||
                    (
                        (c === '/') ||
                        (opts.e4x && c === "<" && input.test(startXmlRegExp, -1))
                    ) && (
                        (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||
                        (last_token.type === 'TK_END_EXPR' && last_token.text === ')' &&
                            last_token.parent && last_token.parent.type === 'TK_RESERVED' && in_array(last_token.parent.text, ['if', 'while', 'for'])) ||
                        (in_array(last_token.type, ['TK_COMMENT', 'TK_START_EXPR', 'TK_START_BLOCK',
                            'TK_END_BLOCK', 'TK_OPERATOR', 'TK_EQUALS', 'TK_EOF', 'TK_SEMICOLON', 'TK_COMMA'
                        ]))
                    )) {
                    var sep = c,
                        esc = false,
                        has_char_escapes = false;
                    resulting_string = c;
                    if (sep === '/') {
                        var in_char_class = false;
                        while (input.hasNext() &&
                            ((esc || in_char_class || input.peek() !== sep) &&
                                !input.testChar(acorn.newline))) {
                            resulting_string += input.peek();
                            if (!esc) {
                                esc = input.peek() === '\\';
                                if (input.peek() === '[') {
                                    in_char_class = true;
                                } else if (input.peek() === ']') {
                                    in_char_class = false;
                                }
                            } else {
                                esc = false;
                            }
                            input.next();
                        }
                    } else if (opts.e4x && sep === '<') {
                        var xmlRegExp = /[\s\S]*?<(\/?)([-a-zA-Z:0-9_.]+|{[\s\S]+?}|!\[CDATA\[[\s\S]*?\]\])(\s+{[\s\S]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{[\s\S]+?}))*\s*(\/?)\s*>/g;
                        input.back();
                        var xmlStr = '';
                        var match = input.match(startXmlRegExp);
                        if (match) {
                            var rootTag = match[2].replace(/^{\s+/, '{').replace(/\s+}$/, '}');
                            var isCurlyRoot = rootTag.indexOf('{') === 0;
                            var depth = 0;
                            while (match) {
                                var isEndTag = !!match[1];
                                var tagName = match[2];
                                var isSingletonTag = (!!match[match.length - 1]) || (tagName.slice(0, 8) === "![CDATA[");
                                if (!isSingletonTag &&
                                    (tagName === rootTag || (isCurlyRoot && tagName.replace(/^{\s+/, '{').replace(/\s+}$/, '}')))) {
                                    if (isEndTag) {
                                        --depth;
                                    } else {
                                        ++depth;
                                    }
                                }
                                xmlStr += match[0];
                                if (depth <= 0) {
                                    break;
                                }
                                match = input.match(xmlRegExp);
                            }
                            if (!match) {
                                xmlStr += input.match(/[\s\S]*/g)[0];
                            }
                            xmlStr = xmlStr.replace(acorn.allLineBreaks, '\n');
                            return [xmlStr, "TK_STRING"];
                        }
                    } else {
                        var parse_string = function(delimiter, allow_unescaped_newlines, start_sub) {
                            var current_char;
                            while (input.hasNext()) {
                                current_char = input.peek();
                                if (!(esc || (current_char !== delimiter &&
                                        (allow_unescaped_newlines || !acorn.newline.test(current_char))))) {
                                    break;
                                }
                                if ((esc || allow_unescaped_newlines) && acorn.newline.test(current_char)) {
                                    if (current_char === '\r' && input.peek(1) === '\n') {
                                        input.next();
                                        current_char = input.peek();
                                    }
                                    resulting_string += '\n';
                                } else {
                                    resulting_string += current_char;
                                }
                                if (esc) {
                                    if (current_char === 'x' || current_char === 'u') {
                                        has_char_escapes = true;
                                    }
                                    esc = false;
                                } else {
                                    esc = current_char === '\\';
                                }
                                input.next();
                                if (start_sub && resulting_string.indexOf(start_sub, resulting_string.length - start_sub.length) !== -1) {
                                    if (delimiter === '`') {
                                        parse_string('}', allow_unescaped_newlines, '`');
                                    } else {
                                        parse_string('`', allow_unescaped_newlines, '${');
                                    }
                                    if (input.hasNext()) {
                                        resulting_string += input.next();
                                    }
                                }
                            }
                        };
                        if (sep === '`') {
                            parse_string('`', true, '${');
                        } else {
                            parse_string(sep);
                        }
                    }
                    if (has_char_escapes && opts.unescape_strings) {
                        resulting_string = unescape_string(resulting_string);
                    }
                    if (input.peek() === sep) {
                        resulting_string += sep;
                        input.next();
                        if (sep === '/') {
                            while (input.hasNext() && acorn.isIdentifierStart(input.peekCharCode())) {
                                resulting_string += input.next();
                            }
                        }
                    }
                    return [resulting_string, 'TK_STRING'];
                }
                if (c === '#') {
                    if (tokens.length === 0 && input.peek() === '!') {
                        resulting_string = c;
                        while (input.hasNext() && c !== '\n') {
                            c = input.next();
                            resulting_string += c;
                        }
                        return [trim(resulting_string) + '\n', 'TK_UNKNOWN'];
                    }
                    var sharp = '#';
                    if (input.hasNext() && input.testChar(digit)) {
                        do {
                            c = input.next();
                            sharp += c;
                        } while (input.hasNext() && c !== '#' && c !== '=');
                        if (c === '#') {
                        } else if (input.peek() === '[' && input.peek(1) === ']') {
                            sharp += '[]';
                            input.next();
                            input.next();
                        } else if (input.peek() === '{' && input.peek(1) === '}') {
                            sharp += '{}';
                            input.next();
                            input.next();
                        }
                        return [sharp, 'TK_WORD'];
                    }
                }
                if (c === '<' && (input.peek() === '?' || input.peek() === '%')) {
                    input.back();
                    var template_match = input.match(template_pattern);
                    if (template_match) {
                        c = template_match[0];
                        c = c.replace(acorn.allLineBreaks, '\n');
                        return [c, 'TK_STRING'];
                    }
                }
                if (c === '<' && input.match(/\!--/g)) {
                    c = '<!--';
                    while (input.hasNext() && !input.testChar(acorn.newline)) {
                        c += input.next();
                    }
                    in_html_comment = true;
                    return [c, 'TK_COMMENT'];
                }
                if (c === '-' && in_html_comment && input.match(/->/g)) {
                    in_html_comment = false;
                    return ['-->', 'TK_COMMENT'];
                }
                if (c === '.') {
                    if (input.peek() === '.' && input.peek(1) === '.') {
                        c += input.next() + input.next();
                        return [c, 'TK_OPERATOR'];
                    }
                    return [c, 'TK_DOT'];
                }
                if (in_array(c, punct)) {
                    while (input.hasNext() && in_array(c + input.peek(), punct)) {
                        c += input.next();
                        if (!input.hasNext()) {
                            break;
                        }
                    }
                    if (c === ',') {
                        return [c, 'TK_COMMA'];
                    } else if (c === '=') {
                        return [c, 'TK_EQUALS'];
                    } else {
                        return [c, 'TK_OPERATOR'];
                    }
                }
                return [c, 'TK_UNKNOWN'];
            }
            function unescape_string(s) {
                var out = '',
                    escaped = 0;
                var input_scan = new InputScanner(s);
                var matched = null;
                while (input_scan.hasNext()) {
                    matched = input_scan.match(/([\s]|[^\\]|\\\\)+/g);
                    if (matched) {
                        out += matched[0];
                    }
                    if (input_scan.peek() === '\\') {
                        input_scan.next();
                        if (input_scan.peek() === 'x') {
                            matched = input_scan.match(/x([0-9A-Fa-f]{2})/g);
                        } else if (input_scan.peek() === 'u') {
                            matched = input_scan.match(/u([0-9A-Fa-f]{4})/g);
                        } else {
                            out += '\\';
                            if (input_scan.hasNext()) {
                                out += input_scan.next();
                            }
                            continue;
                        }
                        if (!matched) {
                            return s;
                        }
                        escaped = parseInt(matched[1], 16);
                        if (escaped > 0x7e && escaped <= 0xff && matched[0].indexOf('x') === 0) {
                            return s;
                        } else if (escaped >= 0x00 && escaped < 0x20) {
                            out += '\\' + matched[0];
                            continue;
                        } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {
                            out += '\\' + String.fromCharCode(escaped);
                        } else {
                            out += String.fromCharCode(escaped);
                        }
                    }
                }
                return out;
            }
        }
        var beautifier = new Beautifier(js_source_text, options);
        return beautifier.beautify();
    }
    if (typeof undefined === "function" && undefined.amd) {
        undefined([], function() {
            return { js_beautify: js_beautify };
        });
    } else {
        exports.js_beautify = js_beautify;
    }
}());
});

var beautifyCss = createCommonjsModule(function (module, exports) {
(function() {
    function mergeOpts(allOptions, targetType) {
        var finalOpts = {};
        var name;
        for (name in allOptions) {
            if (name !== targetType) {
                finalOpts[name] = allOptions[name];
            }
        }
        if (targetType in allOptions) {
            for (name in allOptions[targetType]) {
                finalOpts[name] = allOptions[targetType][name];
            }
        }
        return finalOpts;
    }
    var lineBreak = /\r\n|[\n\r\u2028\u2029]/;
    var allLineBreaks = new RegExp(lineBreak.source, 'g');
    function css_beautify(source_text, options) {
        options = options || {};
        options = mergeOpts(options, 'css');
        source_text = source_text || '';
        var indentSize = options.indent_size ? parseInt(options.indent_size, 10) : 4;
        var indentCharacter = options.indent_char || ' ';
        var selectorSeparatorNewline = (options.selector_separator_newline === undefined) ? true : options.selector_separator_newline;
        var end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
        var newline_between_rules = (options.newline_between_rules === undefined) ? true : options.newline_between_rules;
        var space_around_combinator = (options.space_around_combinator === undefined) ? false : options.space_around_combinator;
        space_around_combinator = space_around_combinator || ((options.space_around_selector_separator === undefined) ? false : options.space_around_selector_separator);
        var eol = options.eol ? options.eol : 'auto';
        if (options.indent_with_tabs) {
            indentCharacter = '\t';
            indentSize = 1;
        }
        if (eol === 'auto') {
            eol = '\n';
            if (source_text && lineBreak.test(source_text || '')) {
                eol = source_text.match(lineBreak)[0];
            }
        }
        eol = eol.replace(/\\r/, '\r').replace(/\\n/, '\n');
        source_text = source_text.replace(allLineBreaks, '\n');
        var whiteRe = /^\s+$/;
        var pos = -1,
            ch;
        var parenLevel = 0;
        function next() {
            ch = source_text.charAt(++pos);
            return ch || '';
        }
        function peek(skipWhitespace) {
            var result = '';
            var prev_pos = pos;
            if (skipWhitespace) {
                eatWhitespace();
            }
            result = source_text.charAt(pos + 1) || '';
            pos = prev_pos - 1;
            next();
            return result;
        }
        function eatString(endChars) {
            var start = pos;
            while (next()) {
                if (ch === "\\") {
                    next();
                } else if (endChars.indexOf(ch) !== -1) {
                    break;
                } else if (ch === "\n") {
                    break;
                }
            }
            return source_text.substring(start, pos + 1);
        }
        function peekString(endChar) {
            var prev_pos = pos;
            var str = eatString(endChar);
            pos = prev_pos - 1;
            next();
            return str;
        }
        function eatWhitespace() {
            var result = '';
            while (whiteRe.test(peek())) {
                next();
                result += ch;
            }
            return result;
        }
        function skipWhitespace() {
            var result = '';
            if (ch && whiteRe.test(ch)) {
                result = ch;
            }
            while (whiteRe.test(next())) {
                result += ch;
            }
            return result;
        }
        function eatComment(singleLine) {
            var start = pos;
            singleLine = peek() === "/";
            next();
            while (next()) {
                if (!singleLine && ch === "*" && peek() === "/") {
                    next();
                    break;
                } else if (singleLine && ch === "\n") {
                    return source_text.substring(start, pos);
                }
            }
            return source_text.substring(start, pos) + ch;
        }
        function lookBack(str) {
            return source_text.substring(pos - str.length, pos).toLowerCase() ===
                str;
        }
        function foundNestedPseudoClass() {
            var openParen = 0;
            for (var i = pos + 1; i < source_text.length; i++) {
                var ch = source_text.charAt(i);
                if (ch === "{") {
                    return true;
                } else if (ch === '(') {
                    openParen += 1;
                } else if (ch === ')') {
                    if (openParen === 0) {
                        return false;
                    }
                    openParen -= 1;
                } else if (ch === ";" || ch === "}") {
                    return false;
                }
            }
            return false;
        }
        var basebaseIndentString = source_text.match(/^[\t ]*/)[0];
        var singleIndent = new Array(indentSize + 1).join(indentCharacter);
        var indentLevel = 0;
        var nestedLevel = 0;
        function indent() {
            indentLevel++;
            basebaseIndentString += singleIndent;
        }
        function outdent() {
            indentLevel--;
            basebaseIndentString = basebaseIndentString.slice(0, -indentSize);
        }
        var print = {};
        print["{"] = function(ch) {
            print.singleSpace();
            output.push(ch);
            print.newLine();
        };
        print["}"] = function(ch) {
            print.newLine();
            output.push(ch);
            print.newLine();
        };
        print._lastCharWhitespace = function() {
            return whiteRe.test(output[output.length - 1]);
        };
        print.newLine = function(keepWhitespace) {
            if (output.length) {
                if (!keepWhitespace && output[output.length - 1] !== '\n') {
                    print.trim();
                }
                output.push('\n');
                if (basebaseIndentString) {
                    output.push(basebaseIndentString);
                }
            }
        };
        print.singleSpace = function() {
            if (output.length && !print._lastCharWhitespace()) {
                output.push(' ');
            }
        };
        print.preserveSingleSpace = function() {
            if (isAfterSpace) {
                print.singleSpace();
            }
        };
        print.trim = function() {
            while (print._lastCharWhitespace()) {
                output.pop();
            }
        };
        var output = [];
        var insideRule = false;
        var insidePropertyValue = false;
        var enteringConditionalGroup = false;
        var top_ch = '';
        var last_top_ch = '';
        while (true) {
            var whitespace = skipWhitespace();
            var isAfterSpace = whitespace !== '';
            var isAfterNewline = whitespace.indexOf('\n') !== -1;
            last_top_ch = top_ch;
            top_ch = ch;
            if (!ch) {
                break;
            } else if (ch === '/' && peek() === '*') {
                var header = indentLevel === 0;
                if (isAfterNewline || header) {
                    print.newLine();
                }
                output.push(eatComment());
                print.newLine();
                if (header) {
                    print.newLine(true);
                }
            } else if (ch === '/' && peek() === '/') {
                if (!isAfterNewline && last_top_ch !== '{') {
                    print.trim();
                }
                print.singleSpace();
                output.push(eatComment());
                print.newLine();
            } else if (ch === '@') {
                print.preserveSingleSpace();
                if (peek() === '{') {
                    output.push(eatString('}'));
                } else {
                    output.push(ch);
                    var variableOrRule = peekString(": ,;{}()[]/='\"");
                    if (variableOrRule.match(/[ :]$/)) {
                        next();
                        variableOrRule = eatString(": ").replace(/\s$/, '');
                        output.push(variableOrRule);
                        print.singleSpace();
                    }
                    variableOrRule = variableOrRule.replace(/\s$/, '');
                    if (variableOrRule in css_beautify.NESTED_AT_RULE) {
                        nestedLevel += 1;
                        if (variableOrRule in css_beautify.CONDITIONAL_GROUP_RULE) {
                            enteringConditionalGroup = true;
                        }
                    }
                }
            } else if (ch === '#' && peek() === '{') {
                print.preserveSingleSpace();
                output.push(eatString('}'));
            } else if (ch === '{') {
                if (peek(true) === '}') {
                    eatWhitespace();
                    next();
                    print.singleSpace();
                    output.push("{}");
                    print.newLine();
                    if (newline_between_rules && indentLevel === 0) {
                        print.newLine(true);
                    }
                } else {
                    indent();
                    print["{"](ch);
                    if (enteringConditionalGroup) {
                        enteringConditionalGroup = false;
                        insideRule = (indentLevel > nestedLevel);
                    } else {
                        insideRule = (indentLevel >= nestedLevel);
                    }
                }
            } else if (ch === '}') {
                outdent();
                print["}"](ch);
                insideRule = false;
                insidePropertyValue = false;
                if (nestedLevel) {
                    nestedLevel--;
                }
                if (newline_between_rules && indentLevel === 0) {
                    print.newLine(true);
                }
            } else if (ch === ":") {
                eatWhitespace();
                if ((insideRule || enteringConditionalGroup) &&
                    !(lookBack("&") || foundNestedPseudoClass()) &&
                    !lookBack("(")) {
                    output.push(':');
                    if (!insidePropertyValue) {
                        insidePropertyValue = true;
                        print.singleSpace();
                    }
                } else {
                    if (lookBack(" ") && output[output.length - 1] !== " ") {
                        output.push(" ");
                    }
                    if (peek() === ":") {
                        next();
                        output.push("::");
                    } else {
                        output.push(':');
                    }
                }
            } else if (ch === '"' || ch === '\'') {
                print.preserveSingleSpace();
                output.push(eatString(ch));
            } else if (ch === ';') {
                insidePropertyValue = false;
                output.push(ch);
                print.newLine();
            } else if (ch === '(') {
                if (lookBack("url")) {
                    output.push(ch);
                    eatWhitespace();
                    if (next()) {
                        if (ch !== ')' && ch !== '"' && ch !== '\'') {
                            output.push(eatString(')'));
                        } else {
                            pos--;
                        }
                    }
                } else {
                    parenLevel++;
                    print.preserveSingleSpace();
                    output.push(ch);
                    eatWhitespace();
                }
            } else if (ch === ')') {
                output.push(ch);
                parenLevel--;
            } else if (ch === ',') {
                output.push(ch);
                eatWhitespace();
                if (selectorSeparatorNewline && !insidePropertyValue && parenLevel < 1) {
                    print.newLine();
                } else {
                    print.singleSpace();
                }
            } else if ((ch === '>' || ch === '+' || ch === '~') &&
                !insidePropertyValue && parenLevel < 1) {
                if (space_around_combinator) {
                    print.singleSpace();
                    output.push(ch);
                    print.singleSpace();
                } else {
                    output.push(ch);
                    eatWhitespace();
                    if (ch && whiteRe.test(ch)) {
                        ch = '';
                    }
                }
            } else if (ch === ']') {
                output.push(ch);
            } else if (ch === '[') {
                print.preserveSingleSpace();
                output.push(ch);
            } else if (ch === '=') {
                eatWhitespace();
                ch = '=';
                output.push(ch);
            } else {
                print.preserveSingleSpace();
                output.push(ch);
            }
        }
        var sweetCode = '';
        if (basebaseIndentString) {
            sweetCode += basebaseIndentString;
        }
        sweetCode += output.join('').replace(/[\r\n\t ]+$/, '');
        if (end_with_newline) {
            sweetCode += '\n';
        }
        if (eol !== '\n') {
            sweetCode = sweetCode.replace(/[\n]/g, eol);
        }
        return sweetCode;
    }
    css_beautify.NESTED_AT_RULE = {
        "@page": true,
        "@font-face": true,
        "@keyframes": true,
        "@media": true,
        "@supports": true,
        "@document": true
    };
    css_beautify.CONDITIONAL_GROUP_RULE = {
        "@media": true,
        "@supports": true,
        "@document": true
    };
    if (typeof undefined === "function" && undefined.amd) {
        undefined([], function() {
            return {
                css_beautify: css_beautify
            };
        });
    } else {
        exports.css_beautify = css_beautify;
    }
}());
});

var beautifyHtml = createCommonjsModule(function (module, exports) {
(function() {
    function ltrim(s) {
        return s.replace(/^\s+/g, '');
    }
    function rtrim(s) {
        return s.replace(/\s+$/g, '');
    }
    function mergeOpts(allOptions, targetType) {
        var finalOpts = {};
        var name;
        for (name in allOptions) {
            if (name !== targetType) {
                finalOpts[name] = allOptions[name];
            }
        }
        if (targetType in allOptions) {
            for (name in allOptions[targetType]) {
                finalOpts[name] = allOptions[targetType][name];
            }
        }
        return finalOpts;
    }
    var lineBreak = /\r\n|[\n\r\u2028\u2029]/;
    var allLineBreaks = new RegExp(lineBreak.source, 'g');
    function style_html(html_source, options, js_beautify, css_beautify) {
        var multi_parser,
            indent_inner_html,
            indent_body_inner_html,
            indent_head_inner_html,
            indent_size,
            indent_character,
            wrap_line_length,
            brace_style,
            unformatted,
            content_unformatted,
            preserve_newlines,
            max_preserve_newlines,
            indent_handlebars,
            wrap_attributes,
            wrap_attributes_indent_size,
            is_wrap_attributes_force,
            is_wrap_attributes_force_expand_multiline,
            is_wrap_attributes_force_aligned,
            end_with_newline,
            extra_liners,
            eol;
        options = options || {};
        options = mergeOpts(options, 'html');
        if ((options.wrap_line_length === undefined || parseInt(options.wrap_line_length, 10) === 0) &&
            (options.max_char !== undefined && parseInt(options.max_char, 10) !== 0)) {
            options.wrap_line_length = options.max_char;
        }
        indent_inner_html = (options.indent_inner_html === undefined) ? false : options.indent_inner_html;
        indent_body_inner_html = (options.indent_body_inner_html === undefined) ? true : options.indent_body_inner_html;
        indent_head_inner_html = (options.indent_head_inner_html === undefined) ? true : options.indent_head_inner_html;
        indent_size = (options.indent_size === undefined) ? 4 : parseInt(options.indent_size, 10);
        indent_character = (options.indent_char === undefined) ? ' ' : options.indent_char;
        brace_style = (options.brace_style === undefined) ? 'collapse' : options.brace_style;
        wrap_line_length = parseInt(options.wrap_line_length, 10) === 0 ? 32786 : parseInt(options.wrap_line_length || 250, 10);
        unformatted = options.unformatted || [
            'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',
            'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',
            'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',
            'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', /* 'script', */ 'select', 'small',
            'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',
            'video', 'wbr', 'text',
            'acronym', 'address', 'big', 'dt', 'ins', 'strike', 'tt',
        ];
        content_unformatted = options.content_unformatted || [
            'pre',
        ];
        preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;
        max_preserve_newlines = preserve_newlines ?
            (isNaN(parseInt(options.max_preserve_newlines, 10)) ? 32786 : parseInt(options.max_preserve_newlines, 10)) :
            0;
        indent_handlebars = (options.indent_handlebars === undefined) ? false : options.indent_handlebars;
        wrap_attributes = (options.wrap_attributes === undefined) ? 'auto' : options.wrap_attributes;
        wrap_attributes_indent_size = (isNaN(parseInt(options.wrap_attributes_indent_size, 10))) ? indent_size : parseInt(options.wrap_attributes_indent_size, 10);
        is_wrap_attributes_force = wrap_attributes.substr(0, 'force'.length) === 'force';
        is_wrap_attributes_force_expand_multiline = (wrap_attributes === 'force-expand-multiline');
        is_wrap_attributes_force_aligned = (wrap_attributes === 'force-aligned');
        end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
        extra_liners = (typeof options.extra_liners === 'object') && options.extra_liners ?
            options.extra_liners.concat() : (typeof options.extra_liners === 'string') ?
            options.extra_liners.split(',') : 'head,body,/html'.split(',');
        eol = options.eol ? options.eol : 'auto';
        if (options.indent_with_tabs) {
            indent_character = '\t';
            indent_size = 1;
        }
        if (eol === 'auto') {
            eol = '\n';
            if (html_source && lineBreak.test(html_source || '')) {
                eol = html_source.match(lineBreak)[0];
            }
        }
        eol = eol.replace(/\\r/, '\r').replace(/\\n/, '\n');
        html_source = html_source.replace(allLineBreaks, '\n');
        function Parser() {
            this.pos = 0;
            this.token = '';
            this.current_mode = 'CONTENT';
            this.tags = {
                parent: 'parent1',
                parentcount: 1,
                parent1: ''
            };
            this.tag_type = '';
            this.token_text = this.last_token = this.last_text = this.token_type = '';
            this.newlines = 0;
            this.indent_content = indent_inner_html;
            this.indent_body_inner_html = indent_body_inner_html;
            this.indent_head_inner_html = indent_head_inner_html;
            this.Utils = {
                whitespace: "\n\r\t ".split(''),
                single_token: [
                    'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',
                    'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr',
                    '!doctype', '?xml',
                    '?php',
                    'basefont', 'isindex'
                ],
                extra_liners: extra_liners,
                in_array: function(what, arr) {
                    for (var i = 0; i < arr.length; i++) {
                        if (what === arr[i]) {
                            return true;
                        }
                    }
                    return false;
                }
            };
            this.is_whitespace = function(text) {
                for (var n = 0; n < text.length; n++) {
                    if (!this.Utils.in_array(text.charAt(n), this.Utils.whitespace)) {
                        return false;
                    }
                }
                return true;
            };
            this.traverse_whitespace = function() {
                var input_char = '';
                input_char = this.input.charAt(this.pos);
                if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
                    this.newlines = 0;
                    while (this.Utils.in_array(input_char, this.Utils.whitespace)) {
                        if (preserve_newlines && input_char === '\n' && this.newlines <= max_preserve_newlines) {
                            this.newlines += 1;
                        }
                        this.pos++;
                        input_char = this.input.charAt(this.pos);
                    }
                    return true;
                }
                return false;
            };
            this.space_or_wrap = function(content) {
                if (this.line_char_count >= this.wrap_line_length) {
                    this.print_newline(false, content);
                    this.print_indentation(content);
                    return true;
                } else {
                    this.line_char_count++;
                    content.push(' ');
                    return false;
                }
            };
            this.get_content = function() {
                var input_char = '',
                    content = [],
                    handlebarsStarted = 0;
                while (this.input.charAt(this.pos) !== '<' || handlebarsStarted === 2) {
                    if (this.pos >= this.input.length) {
                        return content.length ? content.join('') : ['', 'TK_EOF'];
                    }
                    if (handlebarsStarted < 2 && this.traverse_whitespace()) {
                        this.space_or_wrap(content);
                        continue;
                    }
                    input_char = this.input.charAt(this.pos);
                    if (indent_handlebars) {
                        if (input_char === '{') {
                            handlebarsStarted += 1;
                        } else if (handlebarsStarted < 2) {
                            handlebarsStarted = 0;
                        }
                        if (input_char === '}' && handlebarsStarted > 0) {
                            if (handlebarsStarted-- === 0) {
                                break;
                            }
                        }
                        var peek3 = this.input.substr(this.pos, 3);
                        if (peek3 === '{{#' || peek3 === '{{/') {
                            break;
                        } else if (peek3 === '{{!') {
                            return [this.get_tag(), 'TK_TAG_HANDLEBARS_COMMENT'];
                        } else if (this.input.substr(this.pos, 2) === '{{') {
                            if (this.get_tag(true) === '{{else}}') {
                                break;
                            }
                        }
                    }
                    this.pos++;
                    this.line_char_count++;
                    content.push(input_char);
                }
                return content.length ? content.join('') : '';
            };
            this.get_contents_to = function(name) {
                if (this.pos === this.input.length) {
                    return ['', 'TK_EOF'];
                }
                var content = '';
                var reg_match = new RegExp('</' + name + '\\s*>', 'igm');
                reg_match.lastIndex = this.pos;
                var reg_array = reg_match.exec(this.input);
                var end_script = reg_array ? reg_array.index : this.input.length;
                if (this.pos < end_script) {
                    content = this.input.substring(this.pos, end_script);
                    this.pos = end_script;
                }
                return content;
            };
            this.record_tag = function(tag) {
                if (this.tags[tag + 'count']) {
                    this.tags[tag + 'count']++;
                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level;
                } else {
                    this.tags[tag + 'count'] = 1;
                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level;
                }
                this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent;
                this.tags.parent = tag + this.tags[tag + 'count'];
            };
            this.retrieve_tag = function(tag) {
                if (this.tags[tag + 'count']) {
                    var temp_parent = this.tags.parent;
                    while (temp_parent) {
                        if (tag + this.tags[tag + 'count'] === temp_parent) {
                            break;
                        }
                        temp_parent = this.tags[temp_parent + 'parent'];
                    }
                    if (temp_parent) {
                        this.indent_level = this.tags[tag + this.tags[tag + 'count']];
                        this.tags.parent = this.tags[temp_parent + 'parent'];
                    }
                    delete this.tags[tag + this.tags[tag + 'count'] + 'parent'];
                    delete this.tags[tag + this.tags[tag + 'count']];
                    if (this.tags[tag + 'count'] === 1) {
                        delete this.tags[tag + 'count'];
                    } else {
                        this.tags[tag + 'count']--;
                    }
                }
            };
            this.indent_to_tag = function(tag) {
                if (!this.tags[tag + 'count']) {
                    return;
                }
                var temp_parent = this.tags.parent;
                while (temp_parent) {
                    if (tag + this.tags[tag + 'count'] === temp_parent) {
                        break;
                    }
                    temp_parent = this.tags[temp_parent + 'parent'];
                }
                if (temp_parent) {
                    this.indent_level = this.tags[tag + this.tags[tag + 'count']];
                }
            };
            this.get_tag = function(peek) {
                var input_char = '',
                    content = [],
                    comment = '',
                    space = false,
                    first_attr = true,
                    has_wrapped_attrs = false,
                    tag_start, tag_end,
                    tag_start_char,
                    orig_pos = this.pos,
                    orig_line_char_count = this.line_char_count,
                    is_tag_closed = false,
                    tail;
                peek = peek !== undefined ? peek : false;
                do {
                    if (this.pos >= this.input.length) {
                        if (peek) {
                            this.pos = orig_pos;
                            this.line_char_count = orig_line_char_count;
                        }
                        return content.length ? content.join('') : ['', 'TK_EOF'];
                    }
                    input_char = this.input.charAt(this.pos);
                    this.pos++;
                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
                        space = true;
                        continue;
                    }
                    if (input_char === "'" || input_char === '"') {
                        input_char += this.get_unformatted(input_char);
                        space = true;
                    }
                    if (input_char === '=') {
                        space = false;
                    }
                    tail = this.input.substr(this.pos - 1);
                    if (is_wrap_attributes_force_expand_multiline && has_wrapped_attrs && !is_tag_closed && (input_char === '>' || input_char === '/')) {
                        if (tail.match(/^\/?\s*>/)) {
                            space = false;
                            is_tag_closed = true;
                            this.print_newline(false, content);
                            this.print_indentation(content);
                        }
                    }
                    if (content.length && content[content.length - 1] !== '=' && input_char !== '>' && space) {
                        var wrapped = this.space_or_wrap(content);
                        var indentAttrs = wrapped && input_char !== '/' && !is_wrap_attributes_force;
                        space = false;
                        if (is_wrap_attributes_force && input_char !== '/') {
                            var force_first_attr_wrap = false;
                            if (is_wrap_attributes_force_expand_multiline && first_attr) {
                                var is_only_attribute = tail.match(/^\S*(="([^"]|\\")*")?\s*\/?\s*>/) !== null;
                                force_first_attr_wrap = !is_only_attribute;
                            }
                            if (!first_attr || force_first_attr_wrap) {
                                this.print_newline(false, content);
                                this.print_indentation(content);
                                indentAttrs = true;
                            }
                        }
                        if (indentAttrs) {
                            has_wrapped_attrs = true;
                            var alignment_size = wrap_attributes_indent_size;
                            if (is_wrap_attributes_force_aligned) {
                                alignment_size = content.indexOf(' ') + 1;
                            }
                            for (var count = 0; count < alignment_size; count++) {
                                content.push(' ');
                            }
                        }
                        if (first_attr) {
                            for (var i = 0; i < content.length; i++) {
                                if (content[i] === ' ') {
                                    first_attr = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (indent_handlebars && tag_start_char === '<') {
                        if ((input_char + this.input.charAt(this.pos)) === '{{') {
                            input_char += this.get_unformatted('}}');
                            if (content.length && content[content.length - 1] !== ' ' && content[content.length - 1] !== '<') {
                                input_char = ' ' + input_char;
                            }
                            space = true;
                        }
                    }
                    if (input_char === '<' && !tag_start_char) {
                        tag_start = this.pos - 1;
                        tag_start_char = '<';
                    }
                    if (indent_handlebars && !tag_start_char) {
                        if (content.length >= 2 && content[content.length - 1] === '{' && content[content.length - 2] === '{') {
                            if (input_char === '#' || input_char === '/' || input_char === '!') {
                                tag_start = this.pos - 3;
                            } else {
                                tag_start = this.pos - 2;
                            }
                            tag_start_char = '{';
                        }
                    }
                    this.line_char_count++;
                    content.push(input_char);
                    if (content[1] && (content[1] === '!' || content[1] === '?' || content[1] === '%')) {
                        content = [this.get_comment(tag_start)];
                        break;
                    }
                    if (indent_handlebars && content[1] && content[1] === '{' && content[2] && content[2] === '!') {
                        content = [this.get_comment(tag_start)];
                        break;
                    }
                    if (indent_handlebars && tag_start_char === '{' && content.length > 2 && content[content.length - 2] === '}' && content[content.length - 1] === '}') {
                        break;
                    }
                } while (input_char !== '>');
                var tag_complete = content.join('');
                var tag_index;
                var tag_offset;
                if (tag_complete.indexOf(' ') !== -1) {
                    tag_index = tag_complete.indexOf(' ');
                } else if (tag_complete.indexOf('\n') !== -1) {
                    tag_index = tag_complete.indexOf('\n');
                } else if (tag_complete.charAt(0) === '{') {
                    tag_index = tag_complete.indexOf('}');
                } else {
                    tag_index = tag_complete.indexOf('>');
                }
                if (tag_complete.charAt(0) === '<' || !indent_handlebars) {
                    tag_offset = 1;
                } else {
                    tag_offset = tag_complete.charAt(2) === '#' ? 3 : 2;
                }
                var tag_check = tag_complete.substring(tag_offset, tag_index).toLowerCase();
                if (tag_complete.charAt(tag_complete.length - 2) === '/' ||
                    this.Utils.in_array(tag_check, this.Utils.single_token)) {
                    if (!peek) {
                        this.tag_type = 'SINGLE';
                    }
                } else if (indent_handlebars && tag_complete.charAt(0) === '{' && tag_check === 'else') {
                    if (!peek) {
                        this.indent_to_tag('if');
                        this.tag_type = 'HANDLEBARS_ELSE';
                        this.indent_content = true;
                        this.traverse_whitespace();
                    }
                } else if (this.is_unformatted(tag_check, unformatted) ||
                    this.is_unformatted(tag_check, content_unformatted)) {
                    comment = this.get_unformatted('</' + tag_check + '>', tag_complete);
                    content.push(comment);
                    tag_end = this.pos - 1;
                    this.tag_type = 'SINGLE';
                } else if (tag_check === 'script' &&
                    (tag_complete.search('type') === -1 ||
                        (tag_complete.search('type') > -1 &&
                            tag_complete.search(/\b(text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect)/) > -1))) {
                    if (!peek) {
                        this.record_tag(tag_check);
                        this.tag_type = 'SCRIPT';
                    }
                } else if (tag_check === 'style' &&
                    (tag_complete.search('type') === -1 ||
                        (tag_complete.search('type') > -1 && tag_complete.search('text/css') > -1))) {
                    if (!peek) {
                        this.record_tag(tag_check);
                        this.tag_type = 'STYLE';
                    }
                } else if (tag_check.charAt(0) === '!') {
                    if (!peek) {
                        this.tag_type = 'SINGLE';
                        this.traverse_whitespace();
                    }
                } else if (!peek) {
                    if (tag_check.charAt(0) === '/') {
                        this.retrieve_tag(tag_check.substring(1));
                        this.tag_type = 'END';
                    } else {
                        this.record_tag(tag_check);
                        if (tag_check.toLowerCase() !== 'html') {
                            this.indent_content = true;
                        }
                        this.tag_type = 'START';
                    }
                    if (this.traverse_whitespace()) {
                        this.space_or_wrap(content);
                    }
                    if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) {
                        this.print_newline(false, this.output);
                        if (this.output.length && this.output[this.output.length - 2] !== '\n') {
                            this.print_newline(true, this.output);
                        }
                    }
                }
                if (peek) {
                    this.pos = orig_pos;
                    this.line_char_count = orig_line_char_count;
                }
                return content.join('');
            };
            this.get_comment = function(start_pos) {
                var comment = '',
                    delimiter = '>',
                    matched = false;
                this.pos = start_pos;
                var input_char = this.input.charAt(this.pos);
                this.pos++;
                while (this.pos <= this.input.length) {
                    comment += input_char;
                    if (comment.charAt(comment.length - 1) === delimiter.charAt(delimiter.length - 1) &&
                        comment.indexOf(delimiter) !== -1) {
                        break;
                    }
                    if (!matched && comment.length < 10) {
                        if (comment.indexOf('<![if') === 0) {
                            delimiter = '<![endif]>';
                            matched = true;
                        } else if (comment.indexOf('<![cdata[') === 0) {
                            delimiter = ']]>';
                            matched = true;
                        } else if (comment.indexOf('<![') === 0) {
                            delimiter = ']>';
                            matched = true;
                        } else if (comment.indexOf('<!--') === 0) {
                            delimiter = '-->';
                            matched = true;
                        } else if (comment.indexOf('{{!--') === 0) {
                            delimiter = '--}}';
                            matched = true;
                        } else if (comment.indexOf('{{!') === 0) {
                            if (comment.length === 5 && comment.indexOf('{{!--') === -1) {
                                delimiter = '}}';
                                matched = true;
                            }
                        } else if (comment.indexOf('<?') === 0) {
                            delimiter = '?>';
                            matched = true;
                        } else if (comment.indexOf('<%') === 0) {
                            delimiter = '%>';
                            matched = true;
                        }
                    }
                    input_char = this.input.charAt(this.pos);
                    this.pos++;
                }
                return comment;
            };
            function tokenMatcher(delimiter) {
                var token = '';
                var add = function(str) {
                    var newToken = token + str.toLowerCase();
                    token = newToken.length <= delimiter.length ? newToken : newToken.substr(newToken.length - delimiter.length, delimiter.length);
                };
                var doesNotMatch = function() {
                    return token.indexOf(delimiter) === -1;
                };
                return {
                    add: add,
                    doesNotMatch: doesNotMatch
                };
            }
            this.get_unformatted = function(delimiter, orig_tag) {
                if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) !== -1) {
                    return '';
                }
                var input_char = '';
                var content = '';
                var space = true;
                var delimiterMatcher = tokenMatcher(delimiter);
                do {
                    if (this.pos >= this.input.length) {
                        return content;
                    }
                    input_char = this.input.charAt(this.pos);
                    this.pos++;
                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
                        if (!space) {
                            this.line_char_count--;
                            continue;
                        }
                        if (input_char === '\n' || input_char === '\r') {
                            content += '\n';
                            this.line_char_count = 0;
                            continue;
                        }
                    }
                    content += input_char;
                    delimiterMatcher.add(input_char);
                    this.line_char_count++;
                    space = true;
                    if (indent_handlebars && input_char === '{' && content.length && content.charAt(content.length - 2) === '{') {
                        content += this.get_unformatted('}}');
                    }
                } while (delimiterMatcher.doesNotMatch());
                return content;
            };
            this.get_token = function() {
                var token;
                if (this.last_token === 'TK_TAG_SCRIPT' || this.last_token === 'TK_TAG_STYLE') {
                    var type = this.last_token.substr(7);
                    token = this.get_contents_to(type);
                    if (typeof token !== 'string') {
                        return token;
                    }
                    return [token, 'TK_' + type];
                }
                if (this.current_mode === 'CONTENT') {
                    token = this.get_content();
                    if (typeof token !== 'string') {
                        return token;
                    } else {
                        return [token, 'TK_CONTENT'];
                    }
                }
                if (this.current_mode === 'TAG') {
                    token = this.get_tag();
                    if (typeof token !== 'string') {
                        return token;
                    } else {
                        var tag_name_type = 'TK_TAG_' + this.tag_type;
                        return [token, tag_name_type];
                    }
                }
            };
            this.get_full_indent = function(level) {
                level = this.indent_level + level || 0;
                if (level < 1) {
                    return '';
                }
                return Array(level + 1).join(this.indent_string);
            };
            this.is_unformatted = function(tag_check, unformatted) {
                if (!this.Utils.in_array(tag_check, unformatted)) {
                    return false;
                }
                if (tag_check.toLowerCase() !== 'a' || !this.Utils.in_array('a', unformatted)) {
                    return true;
                }
                var next_tag = this.get_tag(true /* peek. */ );
                var tag = (next_tag || "").match(/^\s*<\s*\/?([a-z]*)\s*[^>]*>\s*$/);
                if (!tag || this.Utils.in_array(tag, unformatted)) {
                    return true;
                } else {
                    return false;
                }
            };
            this.printer = function(js_source, indent_character, indent_size, wrap_line_length, brace_style) {
                this.input = js_source || '';
                this.input = this.input.replace(/\r\n|[\r\u2028\u2029]/g, '\n');
                this.output = [];
                this.indent_character = indent_character;
                this.indent_string = '';
                this.indent_size = indent_size;
                this.brace_style = brace_style;
                this.indent_level = 0;
                this.wrap_line_length = wrap_line_length;
                this.line_char_count = 0;
                for (var i = 0; i < this.indent_size; i++) {
                    this.indent_string += this.indent_character;
                }
                this.print_newline = function(force, arr) {
                    this.line_char_count = 0;
                    if (!arr || !arr.length) {
                        return;
                    }
                    if (force || (arr[arr.length - 1] !== '\n')) {
                        if ((arr[arr.length - 1] !== '\n')) {
                            arr[arr.length - 1] = rtrim(arr[arr.length - 1]);
                        }
                        arr.push('\n');
                    }
                };
                this.print_indentation = function(arr) {
                    for (var i = 0; i < this.indent_level; i++) {
                        arr.push(this.indent_string);
                        this.line_char_count += this.indent_string.length;
                    }
                };
                this.print_token = function(text) {
                    if (this.is_whitespace(text) && !this.output.length) {
                        return;
                    }
                    if (text || text !== '') {
                        if (this.output.length && this.output[this.output.length - 1] === '\n') {
                            this.print_indentation(this.output);
                            text = ltrim(text);
                        }
                    }
                    this.print_token_raw(text);
                };
                this.print_token_raw = function(text) {
                    if (this.newlines > 0) {
                        text = rtrim(text);
                    }
                    if (text && text !== '') {
                        if (text.length > 1 && text.charAt(text.length - 1) === '\n') {
                            this.output.push(text.slice(0, -1));
                            this.print_newline(false, this.output);
                        } else {
                            this.output.push(text);
                        }
                    }
                    for (var n = 0; n < this.newlines; n++) {
                        this.print_newline(n > 0, this.output);
                    }
                    this.newlines = 0;
                };
                this.indent = function() {
                    this.indent_level++;
                };
                this.unindent = function() {
                    if (this.indent_level > 0) {
                        this.indent_level--;
                    }
                };
            };
            return this;
        }
        multi_parser = new Parser();
        multi_parser.printer(html_source, indent_character, indent_size, wrap_line_length, brace_style);
        while (true) {
            var t = multi_parser.get_token();
            multi_parser.token_text = t[0];
            multi_parser.token_type = t[1];
            if (multi_parser.token_type === 'TK_EOF') {
                break;
            }
            switch (multi_parser.token_type) {
                case 'TK_TAG_START':
                    multi_parser.print_newline(false, multi_parser.output);
                    multi_parser.print_token(multi_parser.token_text);
                    if (multi_parser.indent_content) {
                        if ((multi_parser.indent_body_inner_html || !multi_parser.token_text.match(/<body(?:.*)>/)) &&
                            (multi_parser.indent_head_inner_html || !multi_parser.token_text.match(/<head(?:.*)>/))) {
                            multi_parser.indent();
                        }
                        multi_parser.indent_content = false;
                    }
                    multi_parser.current_mode = 'CONTENT';
                    break;
                case 'TK_TAG_STYLE':
                case 'TK_TAG_SCRIPT':
                    multi_parser.print_newline(false, multi_parser.output);
                    multi_parser.print_token(multi_parser.token_text);
                    multi_parser.current_mode = 'CONTENT';
                    break;
                case 'TK_TAG_END':
                    if (multi_parser.last_token === 'TK_CONTENT' && multi_parser.last_text === '') {
                        var tag_name = (multi_parser.token_text.match(/\w+/) || [])[0];
                        var tag_extracted_from_last_output = null;
                        if (multi_parser.output.length) {
                            tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length - 1].match(/(?:<|{{#)\s*(\w+)/);
                        }
                        if (tag_extracted_from_last_output === null ||
                            (tag_extracted_from_last_output[1] !== tag_name && !multi_parser.Utils.in_array(tag_extracted_from_last_output[1], unformatted))) {
                            multi_parser.print_newline(false, multi_parser.output);
                        }
                    }
                    multi_parser.print_token(multi_parser.token_text);
                    multi_parser.current_mode = 'CONTENT';
                    break;
                case 'TK_TAG_SINGLE':
                    var tag_check = multi_parser.token_text.match(/^\s*<([a-z-]+)/i);
                    if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)) {
                        multi_parser.print_newline(false, multi_parser.output);
                    }
                    multi_parser.print_token(multi_parser.token_text);
                    multi_parser.current_mode = 'CONTENT';
                    break;
                case 'TK_TAG_HANDLEBARS_ELSE':
                    var foundIfOnCurrentLine = false;
                    for (var lastCheckedOutput = multi_parser.output.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {
                        if (multi_parser.output[lastCheckedOutput] === '\n') {
                            break;
                        } else {
                            if (multi_parser.output[lastCheckedOutput].match(/{{#if/)) {
                                foundIfOnCurrentLine = true;
                                break;
                            }
                        }
                    }
                    if (!foundIfOnCurrentLine) {
                        multi_parser.print_newline(false, multi_parser.output);
                    }
                    multi_parser.print_token(multi_parser.token_text);
                    if (multi_parser.indent_content) {
                        multi_parser.indent();
                        multi_parser.indent_content = false;
                    }
                    multi_parser.current_mode = 'CONTENT';
                    break;
                case 'TK_TAG_HANDLEBARS_COMMENT':
                    multi_parser.print_token(multi_parser.token_text);
                    multi_parser.current_mode = 'TAG';
                    break;
                case 'TK_CONTENT':
                    multi_parser.print_token(multi_parser.token_text);
                    multi_parser.current_mode = 'TAG';
                    break;
                case 'TK_STYLE':
                case 'TK_SCRIPT':
                    if (multi_parser.token_text !== '') {
                        multi_parser.print_newline(false, multi_parser.output);
                        var text = multi_parser.token_text,
                            _beautifier,
                            script_indent_level = 1;
                        if (multi_parser.token_type === 'TK_SCRIPT') {
                            _beautifier = typeof js_beautify === 'function' && js_beautify;
                        } else if (multi_parser.token_type === 'TK_STYLE') {
                            _beautifier = typeof css_beautify === 'function' && css_beautify;
                        }
                        if (options.indent_scripts === "keep") {
                            script_indent_level = 0;
                        } else if (options.indent_scripts === "separate") {
                            script_indent_level = -multi_parser.indent_level;
                        }
                        var indentation = multi_parser.get_full_indent(script_indent_level);
                        if (_beautifier) {
                            var Child_options = function() {
                                this.eol = '\n';
                            };
                            Child_options.prototype = options;
                            var child_options = new Child_options();
                            text = _beautifier(text.replace(/^\s*/, indentation), child_options);
                        } else {
                            var white = text.match(/^\s*/)[0];
                            var _level = white.match(/[^\n\r]*$/)[0].split(multi_parser.indent_string).length - 1;
                            var reindent = multi_parser.get_full_indent(script_indent_level - _level);
                            text = text.replace(/^\s*/, indentation)
                                .replace(/\r\n|\r|\n/g, '\n' + reindent)
                                .replace(/\s+$/, '');
                        }
                        if (text) {
                            multi_parser.print_token_raw(text);
                            multi_parser.print_newline(true, multi_parser.output);
                        }
                    }
                    multi_parser.current_mode = 'TAG';
                    break;
                default:
                    if (multi_parser.token_text !== '') {
                        multi_parser.print_token(multi_parser.token_text);
                    }
                    break;
            }
            multi_parser.last_token = multi_parser.token_type;
            multi_parser.last_text = multi_parser.token_text;
        }
        var sweet_code = multi_parser.output.join('').replace(/[\r\n\t ]+$/, '');
        if (end_with_newline) {
            sweet_code += '\n';
        }
        if (eol !== '\n') {
            sweet_code = sweet_code.replace(/[\n]/g, eol);
        }
        return sweet_code;
    }
    if (typeof undefined === "function" && undefined.amd) {
        undefined(["require", "./beautify", "./beautify-css"], function(requireamd) {
            var js_beautify = requireamd("./beautify");
            var css_beautify = requireamd("./beautify-css");
            return {
                html_beautify: function(html_source, options) {
                    return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
                }
            };
        });
    } else {
        var js_beautify = beautify;
        var css_beautify = beautifyCss;
        exports.html_beautify = function(html_source, options) {
            return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
        };
    }
}());
});

var index$23 = createCommonjsModule(function (module) {
function get_beautify(js_beautify, css_beautify, html_beautify) {
    var beautify$$1 = function(src, config) {
        return js_beautify.js_beautify(src, config);
    };
    beautify$$1.js = js_beautify.js_beautify;
    beautify$$1.css = css_beautify.css_beautify;
    beautify$$1.html = html_beautify.html_beautify;
    beautify$$1.js_beautify = js_beautify.js_beautify;
    beautify$$1.css_beautify = css_beautify.css_beautify;
    beautify$$1.html_beautify = html_beautify.html_beautify;
    return beautify$$1;
}
if (typeof undefined === "function" && undefined.amd) {
    undefined([
        "./lib/beautify",
        "./lib/beautify-css",
        "./lib/beautify-html"
    ], function(js_beautify, css_beautify, html_beautify) {
        return get_beautify(js_beautify, css_beautify, html_beautify);
    });
} else {
    (function(mod) {
        var js_beautify = beautify;
        var css_beautify = beautifyCss;
        var html_beautify = beautifyHtml;
        mod.exports = get_beautify(js_beautify, css_beautify, html_beautify);
    })(module);
}
});

var __decorate$12 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$9 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var JavascriptCodePipe$1 = (function () {
    function JavascriptCodePipe() {
    }
    JavascriptCodePipe.prototype.transform = function (value) {
        value = value.toString();
        var ret = value;
        return index$23(value);
    };
    return JavascriptCodePipe;
}());
JavascriptCodePipe$1 = __decorate$12([
    core_1.Pipe({ name: 'jsCode' }),
    __metadata$9("design:paramtypes", [])
], JavascriptCodePipe$1);
var JavascriptCodePipe_1 = JavascriptCodePipe$1;
var javascriptCode_pipe = {
	JavascriptCodePipe: JavascriptCodePipe_1
};

var __decorate$14 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$11 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2UtilsDirective = (function () {
    function Ng2UtilsDirective() {
    }
    return Ng2UtilsDirective;
}());
Ng2UtilsDirective = __decorate$14([
    core_1.Directive({
        selector: 'ng2-utils-1, ng2-utils-2, ng2-utils-3, ng2-utils-4, ng2-utils-5,' +
            'ng2-utils-6, ng2-utils-7, ng2-utils-8, ng2-utils-9, ng2-utils-10,' +
            'ng2-utils-11, ng2-utils-12, ng2-utils-13, ng2-utils-14, ng2-utils-15,' +
            'ng2-utils-16, ng2-utils-17, ng2-utils-18, ng2-utils-19, ng2-utils-20'
    }),
    __metadata$11("design:paramtypes", [])
], Ng2UtilsDirective);
var Ng2UtilsDirective_1 = Ng2UtilsDirective;
var ng2Utils_directive = {
	Ng2UtilsDirective: Ng2UtilsDirective_1
};

var __decorate$13 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$10 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2UtilsModule$1 = (function () {
    function Ng2UtilsModule() {
    }
    return Ng2UtilsModule;
}());
Ng2UtilsModule$1 = __decorate$13([
    core_1.NgModule({
        declarations: [
            htmlCode_pipe.HtmlCodePipe,
            javascriptCode_pipe.JavascriptCodePipe,
            ng2Utils_directive.Ng2UtilsDirective
        ],
        exports: [
            htmlCode_pipe.HtmlCodePipe,
            javascriptCode_pipe.JavascriptCodePipe,
            ng2Utils_directive.Ng2UtilsDirective
        ]
    }),
    __metadata$10("design:paramtypes", [])
], Ng2UtilsModule$1);
var Ng2UtilsModule_1 = Ng2UtilsModule$1;
var ng2Utils_module = {
	Ng2UtilsModule: Ng2UtilsModule_1
};

var scrollTo = scrollTo_1.scrollTo;
var elementVisible = elementVisible_1.elementVisible;
var computedStyle = computedStyle_1.computedStyle;
var outerWidth = outerWidth_1.outerWidth;
var outerHeight = outerHeight_1.outerHeight;
var HtmlCodePipe = htmlCode_pipe.HtmlCodePipe;
var JavascriptCodePipe = javascriptCode_pipe.JavascriptCodePipe;
var Ng2UtilsModule = ng2Utils_module.Ng2UtilsModule;
var index$21 = {
	scrollTo: scrollTo,
	elementVisible: elementVisible,
	computedStyle: computedStyle,
	outerWidth: outerWidth,
	outerHeight: outerHeight,
	HtmlCodePipe: HtmlCodePipe,
	JavascriptCodePipe: JavascriptCodePipe,
	Ng2UtilsModule: Ng2UtilsModule
};

var __decorate$10 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$7 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2StickyDirective$1 = (function () {
    function Ng2StickyDirective(el) {
        var _this = this;
        this.stickyOffsetTop = 0;
        this.scrollHandler = function () {
            var parentRect = _this.el.parentElement.getBoundingClientRect();
            var bodyRect = document.body.getBoundingClientRect();
            var dynProps;
            if (_this.original.float === 'right') {
                var right = bodyRect.right - parentRect.right + _this.original.marginRight;
                dynProps = { right: right + 'px' };
            }
            else if (_this.original.float === 'left') {
                var left = parentRect.left - bodyRect.left + _this.original.marginLeft;
                dynProps = { left: left + 'px' };
            }
            else {
                dynProps = { width: parentRect.width + 'px' };
            }
            if (_this.original.marginTop + _this.original.marginBottom +
                _this.original.boundingClientRect.height + _this.stickyOffsetTop >= parentRect.bottom) {
                var floatAdjustment = _this.original.float === 'right' ? { right: 0 } :
                    _this.original.float === 'left' ? { left: 0 } : {};
                Object.assign(_this.el.style, {
                    position: 'absolute',
                    float: 'none',
                    top: 'inherit',
                    bottom: 0
                }, dynProps, floatAdjustment);
            }
            else if (parentRect.top * -1 + _this.original.marginTop + _this.stickyOffsetTop > _this.original.offsetTop) {
                if (_this.original.float !== 'left' && _this.original.float !== 'right' && !_this.fillerEl) {
                    _this.fillerEl = document.createElement('div');
                    _this.fillerEl.style.height = _this.el.offsetHeight + 'px';
                    _this.parentEl.insertBefore(_this.fillerEl, _this.el);
                }
                Object.assign(_this.el.style, {
                    position: 'fixed',
                    float: 'none',
                    top: _this.stickyOffsetTop + 'px',
                    bottom: 'inherit'
                }, dynProps);
            }
            else {
                if (_this.fillerEl) {
                    _this.parentEl.removeChild(_this.fillerEl);
                    _this.fillerEl = undefined;
                }
                Object.assign(_this.el.style, {
                    position: _this.original.position,
                    float: _this.original.float,
                    top: _this.original.top,
                    bottom: _this.original.bottom,
                    width: _this.original.width,
                    left: _this.original.left
                }, dynProps);
            }
        };
        this.el = this.el = el.nativeElement;
        this.parentEl = this.el.parentElement;
    }
    Ng2StickyDirective.prototype.ngAfterViewInit = function () {
        this.el.style.boxSizing = 'border-box';
        if (this.stickyAfter) {
            var cetStickyAfterEl = document.querySelector(this.stickyAfter);
            if (cetStickyAfterEl) {
                this.stickyOffsetTop = cetStickyAfterEl.getBoundingClientRect().bottom;
            }
        }
        var allowedPositions = ['absolute', 'fixed', 'relative'];
        var parentElPosition = index$21.computedStyle(this.parentEl, 'position');
        if (allowedPositions.indexOf(parentElPosition) === -1) {
            this.parentEl.style.position = 'relative';
        }
        this.diff = {
            top: this.el.offsetTop - this.parentEl.offsetTop,
            left: this.el.offsetLeft - this.parentEl.offsetLeft
        };
        var elRect = this.el.getBoundingClientRect();
        this.original = {
            boundingClientRect: elRect,
            position: index$21.computedStyle(this.el, 'position'),
            float: index$21.computedStyle(this.el, 'float'),
            top: index$21.computedStyle(this.el, 'top'),
            bottom: index$21.computedStyle(this.el, 'bottom'),
            left: index$21.computedStyle(this.el, 'left'),
            width: index$21.computedStyle(this.el, 'width'),
            offsetTop: this.el.offsetTop,
            offsetLeft: this.el.offsetLeft,
            marginTop: parseInt(index$21.computedStyle(this.el, 'marginTop')),
            marginBottom: parseInt(index$21.computedStyle(this.el, 'marginBottom')),
            marginLeft: parseInt(index$21.computedStyle(this.el, 'marginLeft')),
            marginRight: parseInt(index$21.computedStyle(this.el, 'marginLeft'))
        };
        this.attach();
    };
    Ng2StickyDirective.prototype.ngOnDestroy = function () {
        this.detach();
    };
    Ng2StickyDirective.prototype.attach = function () {
        window.addEventListener('scroll', this.scrollHandler);
        window.addEventListener('resize', this.scrollHandler);
    };
    Ng2StickyDirective.prototype.detach = function () {
        window.removeEventListener('scroll', this.scrollHandler);
        window.removeEventListener('resize', this.scrollHandler);
    };
    return Ng2StickyDirective;
}());
__decorate$10([
    core_1.Input('sticky-after'),
    __metadata$7("design:type", String)
], Ng2StickyDirective$1.prototype, "stickyAfter", void 0);
Ng2StickyDirective$1 = __decorate$10([
    core_1.Directive({
        selector: '[ng2-sticky]'
    }),
    __metadata$7("design:paramtypes", [core_1.ElementRef])
], Ng2StickyDirective$1);
var Ng2StickyDirective_1 = Ng2StickyDirective$1;
var ng2Sticky_directive = {
	Ng2StickyDirective: Ng2StickyDirective_1
};

var __decorate$15 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$12 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2StickyDirective$2 = ng2Sticky_directive.Ng2StickyDirective;
var Ng2StickyModule$1 = (function () {
    function Ng2StickyModule() {
    }
    return Ng2StickyModule;
}());
Ng2StickyModule$1 = __decorate$15([
    core_1.NgModule({
        imports: [common_1.CommonModule, forms_1.FormsModule],
        declarations: [ng2Sticky_directive.Ng2StickyDirective],
        exports: [ng2Sticky_directive.Ng2StickyDirective]
    }),
    __metadata$12("design:paramtypes", [])
], Ng2StickyModule$1);
var Ng2StickyModule_1 = Ng2StickyModule$1;
var ng2Sticky_module = {
	Ng2StickyDirective: Ng2StickyDirective$2,
	Ng2StickyModule: Ng2StickyModule_1
};

var Ng2StickyDirective = ng2Sticky_directive.Ng2StickyDirective;
var Ng2StickyModule = ng2Sticky_module.Ng2StickyModule;
var index$19 = {
	Ng2StickyDirective: Ng2StickyDirective,
	Ng2StickyModule: Ng2StickyModule
};

var __decorate$16 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$13 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2TabComponent$1 = (function () {
    function Ng2TabComponent(viewContainer) {
        this.viewContainer = viewContainer;
        this.selectedIndexClass = 'selected';
        this.selectedContentsClass = 'selected';
        this.el = this.viewContainer.element.nativeElement;
    }
    Ng2TabComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.indexEls = [].slice.call(this.el.querySelectorAll('[index]'));
        this.contentsEls = [].slice.call(this.el.querySelectorAll('[contents]'));
        this.selectTab(this.selectedIndex);
        this.indexEls.forEach(function (el) {
            el.addEventListener('click', function () {
                _this.selectTab(el.getAttribute('index'));
            });
        });
    };
    Ng2TabComponent.prototype.selectTab = function (id) {
        var _this = this;
        id = id || this.indexEls[0].getAttribute('index');
        this.indexEls.forEach(function (el) {
            _this.removeClass(el, _this.selectedIndexClass);
            if (el.getAttribute('index') == id) {
                _this.addClass(el, _this.selectedIndexClass);
            }
        });
        this.contentsEls.forEach(function (el) {
            el.style.display = 'none';
            _this.removeClass(el, _this.selectedContentsClass);
            if (el.getAttribute('contents') == id) {
                el.style.display = '';
                _this.addClass(el, _this.selectedContentsClass);
            }
        });
    };
    Ng2TabComponent.prototype.addClass = function (el, str) {
        var classNames = (el.className || '').split(' ');
        classNames.push(str);
        el.className = classNames.join(' ');
    };
    Ng2TabComponent.prototype.removeClass = function (el, str) {
        el.className = (el.className || '').replace(new RegExp('[ ]*' + str), '');
    };
    return Ng2TabComponent;
}());
__decorate$16([
    core_1.Input('selected'),
    __metadata$13("design:type", String)
], Ng2TabComponent$1.prototype, "selectedIndex", void 0);
__decorate$16([
    core_1.Input('selected-index-class'),
    __metadata$13("design:type", String)
], Ng2TabComponent$1.prototype, "selectedIndexClass", void 0);
__decorate$16([
    core_1.Input('selected-contents-class'),
    __metadata$13("design:type", String)
], Ng2TabComponent$1.prototype, "selectedContentsClass", void 0);
Ng2TabComponent$1 = __decorate$16([
    core_1.Component({
        selector: 'ng2-tab, [ng2-tab]',
        encapsulation: core_1.ViewEncapsulation.None,
        template: "<ng-content></ng-content>",
        styles: ["\n    .tabs {\n      position: relative;\n      top: 1px;\n      background: transparent;\n      display: block;\n    }\n    .tabs [index] {\n      display: inline-block;\n      border: 1px solid #999;\n      padding: 5px 10px;\n      border-radius: 2px 2px 0 0;\n    }\n    .tabs [index].selected {\n      padding-top: 0;\n      background: #f7f7f7;\n      border-top: 5px solid #00BCD4;\n      border-bottom: 1px solid transparent;\n    }\n    .tab-contents {\n      border: 1px solid #999;\n      border-radius: 2px;\n      min-height: 3em;\n    }\n  "],
    }),
    __metadata$13("design:paramtypes", [core_1.ViewContainerRef])
], Ng2TabComponent$1);
var Ng2TabComponent_1 = Ng2TabComponent$1;
var ng2Tab_component = {
	Ng2TabComponent: Ng2TabComponent_1
};

var __decorate$17 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$14 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2TabComponent$2 = ng2Tab_component.Ng2TabComponent;
var Ng2TabModule$1 = (function () {
    function Ng2TabModule() {
    }
    return Ng2TabModule;
}());
Ng2TabModule$1 = __decorate$17([
    core_1.NgModule({
        imports: [common_1.CommonModule, forms_1.FormsModule],
        declarations: [ng2Tab_component.Ng2TabComponent],
        exports: [ng2Tab_component.Ng2TabComponent]
    }),
    __metadata$14("design:paramtypes", [])
], Ng2TabModule$1);
var Ng2TabModule_1 = Ng2TabModule$1;
var ng2Tab_module = {
	Ng2TabComponent: Ng2TabComponent$2,
	Ng2TabModule: Ng2TabModule_1
};

var Ng2TabComponent = ng2Tab_component.Ng2TabComponent;
var Ng2TabModule = ng2Tab_module.Ng2TabModule;
var index$25 = {
	Ng2TabComponent: Ng2TabComponent,
	Ng2TabModule: Ng2TabModule
};

var __decorate$18 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$15 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2TooltipDirective$1 = (function () {
    function Ng2TooltipDirective(viewContainerRef, overlayManager) {
        this.viewContainerRef = viewContainerRef;
        this.overlayManager = overlayManager;
        this.el = this.viewContainerRef.element.nativeElement;
    }
    Ng2TooltipDirective.prototype.ngAfterViewInit = function () {
        this.overlay = this.getTooltipOverlay(this.el, this.tooltip);
    };
    Ng2TooltipDirective.prototype.showTooltip = function ($event) {
        this.overlayManager.open(this.overlay, $event);
        $event.stopPropagation();
    };
    Ng2TooltipDirective.prototype.hideTooltip = function ($event) {
        this.overlayManager.close(this.overlay);
        $event.stopPropagation();
    };
    Ng2TooltipDirective.prototype.getTooltipOverlay = function (el, tooltip) {
        var tooltipEl = document.createElement('ng2-tooltip');
        tooltipEl.style.display = 'none';
        var divEl = document.createElement('div');
        divEl.innerHTML = "\n       <div class='tooltip-contents'>" + tooltip + "</div>\n       <div class='tooltip-down-arrow'></div>\n    ";
        tooltipEl.appendChild(divEl);
        el.appendChild(tooltipEl);
        var overlay = new index$14.Ng2Overlay(tooltipEl, {
            id: 'tooltip-' + (el.id || Math.floor(Math.random() * 1000000)),
            position: 'top cursor outside'
        });
        this.overlayManager.register(overlay);
        return overlay;
    };
    return Ng2TooltipDirective;
}());
__decorate$18([
    core_1.Input('ng2-tooltip'),
    __metadata$15("design:type", String)
], Ng2TooltipDirective$1.prototype, "tooltip", void 0);
Ng2TooltipDirective$1 = __decorate$18([
    core_1.Directive({
        selector: '[ng2-tooltip]',
        host: {
            '(mouseover)': 'showTooltip($event)',
            '(mouseout)': 'hideTooltip($event)'
        }
    }),
    __metadata$15("design:paramtypes", [core_1.ViewContainerRef,
        index$14.Ng2OverlayManager])
], Ng2TooltipDirective$1);
var Ng2TooltipDirective_1 = Ng2TooltipDirective$1;
var ng2TooltipDirective = {
	Ng2TooltipDirective: Ng2TooltipDirective_1
};

var __decorate$19 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$16 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2TooltipOverlayModule$1 = (function () {
    function Ng2TooltipOverlayModule() {
    }
    return Ng2TooltipOverlayModule;
}());
Ng2TooltipOverlayModule$1 = __decorate$19([
    core_1.NgModule({
        imports: [common_1.CommonModule, forms_1.FormsModule, index$14.Ng2OverlayModule],
        declarations: [ng2TooltipDirective.Ng2TooltipDirective],
        exports: [ng2TooltipDirective.Ng2TooltipDirective]
    }),
    __metadata$16("design:paramtypes", [])
], Ng2TooltipOverlayModule$1);
var Ng2TooltipOverlayModule_1 = Ng2TooltipOverlayModule$1;
var ng2TooltipOverlay_module = {
	Ng2TooltipOverlayModule: Ng2TooltipOverlayModule_1
};

var Ng2TooltipDirective = ng2TooltipDirective.Ng2TooltipDirective;
var Ng2TooltipOverlayModule = ng2TooltipOverlay_module.Ng2TooltipOverlayModule;
var index$27 = {
	Ng2TooltipDirective: Ng2TooltipDirective,
	Ng2TooltipOverlayModule: Ng2TooltipOverlayModule
};

var ng2UiSortable_umd = createCommonjsModule(function (module, exports) {
(function webpackUniversalModuleDefinition(root, factory) {
	module.exports = factory(core_1, forms_1, common_1);
})(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {
return /******/ (function(modules) {
/******/ 	var installedModules = {};
/******/ 	function __webpack_require__(moduleId) {
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 		module.loaded = true;
/******/ 		return module.exports;
/******/ 	}
/******/ 	__webpack_require__.m = modules;
/******/ 	__webpack_require__.c = installedModules;
/******/ 	__webpack_require__.p = "";
/******/ 	return __webpack_require__(0);
/******/ })
/******/ ([
/***/ function(module, exports, __webpack_require__) {
	"use strict";
	var ng2_sortable_directive_1 = __webpack_require__(1);
	exports.Ng2SortableDirective = ng2_sortable_directive_1.Ng2SortableDirective;
	var ng2_sortable_module_1 = __webpack_require__(3);
	exports.Ng2SortableModule = ng2_sortable_module_1.Ng2SortableModule;
/***/ },
/***/ function(module, exports, __webpack_require__) {
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1$$1 = __webpack_require__(2);
	var Ng2SortableDirective = (function () {
	    function Ng2SortableDirective(viewContainerRef) {
	        var _this = this;
	        this.viewContainerRef = viewContainerRef;
	        this.orderChanged = new core_1$$1.EventEmitter();
	        this.dragStartHandler = function (event) {
	            _this.draggingEl = event.target;
	            Object.assign(_this.draggingEl.style, {
	                zIndex: 3,
	                pointerEvents: 'none'
	            });
	        };
	        this.dragHandler = function (event) {
	            Object.assign(_this.draggingEl.style, {
	                transform: 'translate(0px,' + event.deltaY + 'px)'
	            });
	            var newElDragEnter = document.elementFromPoint(event.center.x, event.center.y);
	            if (_this.elDragEnter !== newElDragEnter) {
	                if (_this.elDragEnter) {
	                    _this.elDragEnter.className = _this.elDragEnter.className.replace(/\ drag-enter/g, '');
	                }
	                _this.elDragEnter = newElDragEnter;
	                if (newElDragEnter.tagName === 'LI') {
	                    newElDragEnter.className += ' drag-enter';
	                }
	            }
	        };
	        this.dragEndHandler = function (event) {
	            Object.assign(_this.draggingEl.style, {
	                transform: 'translate(0,0)',
	                zIndex: 1,
	                pointerEvents: 'inherit'
	            });
	            if (_this.elDragEnter) {
	                _this.elDragEnter.className = _this.elDragEnter.className.replace(/\ drag-enter/g, '');
	                _this.elDragEnter.parentNode.insertBefore(_this.draggingEl, _this.elDragEnter);
	                _this.emitOrderChanged();
	            }
	        };
	        this.ulEl = this.viewContainerRef.element.nativeElement;
	    }
	    Ng2SortableDirective.prototype.ngAfterViewInit = function () {
	        this.liEls = this.ulEl.querySelectorAll('li');
	        for (var i = 0; i < this.liEls.length; i++) {
	            var liEl = this.liEls[i];
	            var mc = new Hammer(liEl);
	            mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });
	            mc.on('panstart', this.dragStartHandler);
	            mc.on('panup pandown', this.dragHandler);
	            mc.on('panend', this.dragEndHandler);
	            this.emitOrderChanged();
	        }
	    };
	    Ng2SortableDirective.prototype.emitOrderChanged = function () {
	        var liEls = this.ulEl.querySelectorAll('li');
	        var orders = Array.prototype.slice.call(liEls).map(function (el) { return el.id; });
	        this.orderChanged.emit(orders);
	    };
	    return Ng2SortableDirective;
	}());
	__decorate([
	    core_1$$1.Output(),
	    __metadata("design:type", Object)
	], Ng2SortableDirective.prototype, "orderChanged", void 0);
	Ng2SortableDirective = __decorate([
	    core_1$$1.Directive({
	        selector: '[ng2-sortable]'
	    }),
	    __metadata("design:paramtypes", [core_1$$1.ViewContainerRef])
	], Ng2SortableDirective);
	exports.Ng2SortableDirective = Ng2SortableDirective;
/***/ },
/***/ function(module, exports) {
	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;
/***/ },
/***/ function(module, exports, __webpack_require__) {
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1$$1 = __webpack_require__(2);
	var forms_1$$1 = __webpack_require__(4);
	var common_1$$1 = __webpack_require__(5);
	var ng2_sortable_directive_1 = __webpack_require__(1);
	var Ng2SortableModule = (function () {
	    function Ng2SortableModule() {
	    }
	    return Ng2SortableModule;
	}());
	Ng2SortableModule = __decorate([
	    core_1$$1.NgModule({
	        imports: [common_1$$1.CommonModule, forms_1$$1.FormsModule],
	        declarations: [ng2_sortable_directive_1.Ng2SortableDirective],
	        exports: [ng2_sortable_directive_1.Ng2SortableDirective]
	    }),
	    __metadata("design:paramtypes", [])
	], Ng2SortableModule);
	exports.Ng2SortableModule = Ng2SortableModule;
/***/ },
/***/ function(module, exports) {
	module.exports = __WEBPACK_EXTERNAL_MODULE_4__;
/***/ },
/***/ function(module, exports) {
	module.exports = __WEBPACK_EXTERNAL_MODULE_5__;
/***/ }
/******/ ])
});

});

var __decorate$20 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$17 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2ScrollableDirective$3 = (function () {
    function Ng2ScrollableDirective(el) {
        this.elementVisible = new core_1.EventEmitter();
        this.sections = [];
        this.visible = index$21.elementVisible;
        this.el = el.nativeElement;
        this.el.style.position = 'relative';
    }
    Ng2ScrollableDirective.prototype.ngOnInit = function () {
        for (var i = 0; i < this.el.children.length; i++) {
            var childEl = this.el.children[i];
            childEl.id && this.sections.push(childEl);
        }
        var thisElStyle = window.getComputedStyle(this.el);
        var elToListenScroll = thisElStyle.overflow === 'auto' ? this.el : window;
        this.listenScrollOn(elToListenScroll);
    };
    Ng2ScrollableDirective.prototype.listenScrollOn = function (el) {
        var _this = this;
        el.addEventListener('scroll', function () {
            var elScrolledToVisible = null;
            for (var i = 0; i < _this.sections.length; i++) {
                var section = _this.sections[i];
                var visible = _this.visible(section, el);
                if (_this.horizontal && (visible.left || visible.right)) {
                    elScrolledToVisible = section;
                    break;
                }
                else if (!_this.horizontal && (visible.top || visible.bottom)) {
                    elScrolledToVisible = section;
                    break;
                }
            }
            elScrolledToVisible && _this.elementVisible.emit(elScrolledToVisible);
        });
    };
    Ng2ScrollableDirective.scrollTo = function (selector, parentSelector, horizontal, distance) {
        var parentEl, targetEl;
        parentSelector = parentSelector || 'body';
        targetEl = document.querySelector(selector);
        if (!targetEl) {
            throw "Invalid selector " + selector;
        }
        parentEl = document.querySelector(parentSelector);
        if (!parentEl) {
            throw "Invalid parent selector " + parentSelector;
        }
        var parentElStyle = window.getComputedStyle(parentEl);
        var scrollContainerEl = parentElStyle.overflow === 'auto' ?
            parentEl : document.body;
        var currentScrollTop = scrollContainerEl.scrollTop;
        var currentScrollLeft = scrollContainerEl.scrollLeft;
        var targetOffsetTop;
        var targetOffsetLeft;
        if (scrollContainerEl === document.body) {
            var bodyRect = document.body.getBoundingClientRect();
            var targetRect = targetEl.getBoundingClientRect();
            targetOffsetTop = targetRect.top - bodyRect.top;
            targetOffsetLeft = targetRect.left - bodyRect.left;
        }
        else {
            targetOffsetTop = targetEl.offsetTop;
            targetOffsetLeft = targetEl.offsetLeft;
        }
        if (distance) {
            currentScrollTop += distance;
            currentScrollLeft += distance;
        }
        var step = horizontal ?
            Math.ceil((targetOffsetLeft - currentScrollLeft) / 10) :
            Math.ceil((targetOffsetTop - currentScrollTop) / 10);
        var scrollProp = horizontal ? 'scrollLeft' : 'scrollTop';
        (function loop(i, prop) {
            setTimeout(function main() {
                scrollContainerEl[prop] += step;
                i > 1 && loop(i - 1, prop);
            }, 50);
        }(10, scrollProp));
    };
    return Ng2ScrollableDirective;
}());
__decorate$20([
    core_1.Input(),
    __metadata$17("design:type", Boolean)
], Ng2ScrollableDirective$3.prototype, "horizontal", void 0);
__decorate$20([
    core_1.Output(),
    __metadata$17("design:type", Object)
], Ng2ScrollableDirective$3.prototype, "elementVisible", void 0);
Ng2ScrollableDirective$3 = __decorate$20([
    core_1.Directive({
        selector: '[ng2-scrollable]'
    }),
    __metadata$17("design:paramtypes", [core_1.ElementRef])
], Ng2ScrollableDirective$3);
var Ng2ScrollableDirective_1 = Ng2ScrollableDirective$3;
var ng2Scrollable_directive = {
	Ng2ScrollableDirective: Ng2ScrollableDirective_1
};

var __decorate$21 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$18 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2ScrollableDirective$4 = ng2Scrollable_directive.Ng2ScrollableDirective;
var Ng2ScrollableModule$1 = (function () {
    function Ng2ScrollableModule() {
    }
    return Ng2ScrollableModule;
}());
Ng2ScrollableModule$1 = __decorate$21([
    core_1.NgModule({
        imports: [common_1.CommonModule, forms_1.FormsModule],
        declarations: [ng2Scrollable_directive.Ng2ScrollableDirective],
        exports: [ng2Scrollable_directive.Ng2ScrollableDirective]
    }),
    __metadata$18("design:paramtypes", [])
], Ng2ScrollableModule$1);
var Ng2ScrollableModule_1 = Ng2ScrollableModule$1;
var ng2Scrollable_module = {
	Ng2ScrollableDirective: Ng2ScrollableDirective$4,
	Ng2ScrollableModule: Ng2ScrollableModule_1
};

var Ng2ScrollableDirective$2 = ng2Scrollable_directive.Ng2ScrollableDirective;
var Ng2ScrollableModule = ng2Scrollable_module.Ng2ScrollableModule;
var index$29 = {
	Ng2ScrollableDirective: Ng2ScrollableDirective$2,
	Ng2ScrollableModule: Ng2ScrollableModule
};

var __decorate$22 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$19 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2CollapsableComponent$1 = (function () {
    function Ng2CollapsableComponent(viewContainer) {
        this.viewContainer = viewContainer;
        this.selectedIndexClass = 'selected';
        this.selectedContentsClass = 'selected';
        this.el = this.viewContainer.element.nativeElement;
    }
    Ng2CollapsableComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.indexEls = [].slice.call(this.el.querySelectorAll('[index]'));
        this.contentsEls = [].slice.call(this.el.querySelectorAll('[contents]'));
        this.selectTab(this.selectedIndex);
        this.indexEls.forEach(function (el) {
            el.addEventListener('click', function () {
                _this.selectTab(el.getAttribute('index'));
            });
        });
    };
    Ng2CollapsableComponent.prototype.selectTab = function (id) {
        var _this = this;
        id = id || this.indexEls[0].getAttribute('index');
        this.indexEls.forEach(function (el) {
            _this.removeClass(el, _this.selectedIndexClass);
            if (el.getAttribute('index') == id) {
                _this.addClass(el, _this.selectedIndexClass);
            }
        });
        this.contentsEls.forEach(function (el) {
            _this.removeClass(el, _this.selectedContentsClass);
            if (el.getAttribute('contents') == id) {
                _this.addClass(el, _this.selectedContentsClass);
            }
        });
    };
    Ng2CollapsableComponent.prototype.addClass = function (el, str) {
        var classNames = (el.className || '').split(' ');
        classNames.push(str);
        el.className = classNames.join(' ');
    };
    Ng2CollapsableComponent.prototype.removeClass = function (el, str) {
        el.className = (el.className || '').replace(new RegExp('[ ]*' + str), '');
    };
    return Ng2CollapsableComponent;
}());
__decorate$22([
    core_1.Input('selected'),
    __metadata$19("design:type", String)
], Ng2CollapsableComponent$1.prototype, "selectedIndex", void 0);
__decorate$22([
    core_1.Input('selected-index-class'),
    __metadata$19("design:type", String)
], Ng2CollapsableComponent$1.prototype, "selectedIndexClass", void 0);
__decorate$22([
    core_1.Input('selected-contents-class'),
    __metadata$19("design:type", String)
], Ng2CollapsableComponent$1.prototype, "selectedContentsClass", void 0);
Ng2CollapsableComponent$1 = __decorate$22([
    core_1.Component({
        selector: 'ng2-collapsable, [ng2-collapsable]',
        encapsulation: core_1.ViewEncapsulation.None,
        template: "<ng-content></ng-content>",
        styles: ["\n    [ng2-collapsable] [index] {\n      display: block;\n      cursor: pointer;\n      position: relative;\n      margin: 2px 0 0 0;\n      padding: .5em .5em .5em .7em;\n      border: 1px solid #cccccc;\n      background: #ededed;\n      font-weight: normal;\n      border-radius: 2px; \n      color: #2b2b2b;\n    }\n    [ng2-collapsable] [index].selected {\n      border: 1px solid #003eff;\n      background: #007fff;\n      color: #ffffff;\n      border-radius: 2px 2px 0 0;\n    }\n    [ng2-collapsable] [contents] {\n      border-top: 0;\n      background: #ffffff;\n      color: #333333;\n      padding: 0px;\n      border-radius: 0 0 2px 2px;\n      height: 0;\n      border: 0;\n      font-size: 0;\n    }\n    [ng2-collapsable] [contents].selected {\n      height: 50px;\n      padding: 10px;\n      border: 1px solid #dddddd;\n      transition: font-size 0.3s ease-in, height 0.3s ease-in;\n      font-size: inherit;\n    }\n  "],
    }),
    __metadata$19("design:paramtypes", [core_1.ViewContainerRef])
], Ng2CollapsableComponent$1);
var Ng2CollapsableComponent_1 = Ng2CollapsableComponent$1;
var ng2Collapsable_component = {
	Ng2CollapsableComponent: Ng2CollapsableComponent_1
};

var __decorate$23 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$20 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2CollapsableModule$1 = (function () {
    function Ng2CollapsableModule() {
    }
    return Ng2CollapsableModule;
}());
Ng2CollapsableModule$1 = __decorate$23([
    core_1.NgModule({
        imports: [common_1.CommonModule, forms_1.FormsModule],
        declarations: [ng2Collapsable_component.Ng2CollapsableComponent],
        exports: [ng2Collapsable_component.Ng2CollapsableComponent]
    }),
    __metadata$20("design:paramtypes", [])
], Ng2CollapsableModule$1);
var Ng2CollapsableModule_1 = Ng2CollapsableModule$1;
var ng2Collapsable_module = {
	Ng2CollapsableModule: Ng2CollapsableModule_1
};

var Ng2CollapsableComponent = ng2Collapsable_component.Ng2CollapsableComponent;
var Ng2CollapsableModule = ng2Collapsable_module.Ng2CollapsableModule;
var index$31 = {
	Ng2CollapsableComponent: Ng2CollapsableComponent,
	Ng2CollapsableModule: Ng2CollapsableModule
};

var __decorate$25 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$22 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2InfiniteListDirective$1 = (function () {
    function Ng2InfiniteListDirective(el) {
        var _this = this;
        this.endVisible = new core_1.EventEmitter();
        this.elementVisible = index$21.elementVisible;
        this.scrollListener = function () {
            var visible = _this.elementVisible(_this.endEl, _this.el);
            if (_this.horizontal && (visible.left || visible.right)) {
                _this.endVisible.emit(true);
            }
            else if (!_this.horizontal && (visible.top || visible.bottom)) {
                _this.endVisible.emit(true);
            }
        };
        this.el = el.nativeElement;
    }
    Ng2InfiniteListDirective.prototype.ngOnInit = function () {
        this.endEl = this.el.querySelector('[ng2-infinite-list-end]');
        if (!this.endEl) {
            throw "Invalid 'ng2-infinite-list-end";
        }
        this.scrollListener();
        this.el.addEventListener('scroll', this.scrollListener);
        window.addEventListener('resize', this.scrollListener);
    };
    return Ng2InfiniteListDirective;
}());
__decorate$25([
    core_1.Input(),
    __metadata$22("design:type", Boolean)
], Ng2InfiniteListDirective$1.prototype, "horizontal", void 0);
__decorate$25([
    core_1.Output(),
    __metadata$22("design:type", Object)
], Ng2InfiniteListDirective$1.prototype, "endVisible", void 0);
Ng2InfiniteListDirective$1 = __decorate$25([
    core_1.Directive({ selector: '[ng2-infinite-list]' }),
    __metadata$22("design:paramtypes", [core_1.ElementRef])
], Ng2InfiniteListDirective$1);
var Ng2InfiniteListDirective_1 = Ng2InfiniteListDirective$1;
var ng2InfiniteList_directive = {
	Ng2InfiniteListDirective: Ng2InfiniteListDirective_1
};

var __decorate$24 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$21 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Ng2InfiniteListDirective = ng2InfiniteList_directive.Ng2InfiniteListDirective;
var Ng2InfiniteListModule = (function () {
    function Ng2InfiniteListModule() {
    }
    return Ng2InfiniteListModule;
}());
Ng2InfiniteListModule = __decorate$24([
    core_1.NgModule({
        imports: [platform_browser_1.BrowserModule, forms_1.FormsModule],
        declarations: [ng2InfiniteList_directive.Ng2InfiniteListDirective],
        exports: [ng2InfiniteList_directive.Ng2InfiniteListDirective]
    }),
    __metadata$21("design:paramtypes", [])
], Ng2InfiniteListModule);
var Ng2InfiniteListModule_1 = Ng2InfiniteListModule;
var index$33 = {
	Ng2InfiniteListDirective: Ng2InfiniteListDirective,
	Ng2InfiniteListModule: Ng2InfiniteListModule_1
};

var __decorate$1 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Ng2MapModule$1 = index$10.Ng2MapModule;
var ng2_overlay_2 = index$14;
var Ng2OverlayManager$1 = ng2_overlay_2.Ng2OverlayManager;
var ng2_scrollable_2 = index$29;
var Ng2ScrollableDirective$1 = ng2_scrollable_2.Ng2ScrollableDirective;
var ng2_popup_2 = index$12;
var Ng2MessagePopupComponent$1 = ng2_popup_2.Ng2MessagePopupComponent;
var Ng2PopupComponent$1 = ng2_popup_2.Ng2PopupComponent;
var ng2_map_2 = index$10;
var Ng2MapComponent$1 = ng2_map_2.Ng2MapComponent;
var Ng2UIModule$1 = (function () {
    function Ng2UIModule() {
    }
    return Ng2UIModule;
}());
Ng2UIModule$1 = __decorate$1([
    core_1.NgModule({
        imports: [platform_browser_1.BrowserModule, forms_1.FormsModule],
        exports: [
            index$2.Ng2AutoCompleteModule,
            index$8.Ng2DatetimePickerModule,
            index$10.Ng2MapModule,
            index$33.Ng2InfiniteListModule,
            index$16.Ng2MenuModule,
            ng2ParallaxScroll_umd.Ng2ParallaxScrollModule,
            index$12.Ng2PopupModule,
            index$19.Ng2StickyModule,
            index$25.Ng2TabModule,
            index$29.Ng2ScrollableModule,
            index$27.Ng2TooltipOverlayModule,
            index$14.Ng2OverlayModule,
            ng2UiSortable_umd.Ng2SortableModule,
            index$31.Ng2CollapsableModule
        ],
        providers: [ng2_overlay_2.Ng2OverlayManager]
    })
], Ng2UIModule$1);
var Ng2UIModule_1 = Ng2UIModule$1;
var ng2Ui_module = {
	Ng2MapModule: Ng2MapModule$1,
	Ng2OverlayManager: Ng2OverlayManager$1,
	Ng2ScrollableDirective: Ng2ScrollableDirective$1,
	Ng2MessagePopupComponent: Ng2MessagePopupComponent$1,
	Ng2PopupComponent: Ng2PopupComponent$1,
	Ng2MapComponent: Ng2MapComponent$1,
	Ng2UIModule: Ng2UIModule_1
};

var Ng2MapModule = ng2Ui_module.Ng2MapModule;

var StoreFilterPipe = (function () {
    function StoreFilterPipe() {
    }
    StoreFilterPipe.prototype.transform = function (stores, filterBy, filterFields) {
        filterBy = filterBy ? filterBy.toLocaleLowerCase() : null;
        return filterBy ? stores.filter(function (store) {
            return filterFields.some(function (field) {
                return (store[field].toLocaleLowerCase().indexOf(filterBy) !== -1) ?
                    true : false;
            });
            // if ((store.name.toLocaleLowerCase().indexOf(filterBy) !== -1)
            // || (store.address.toLocaleLowerCase().indexOf(filterBy) !== -1))
            // {
            //   return true;
            // } else {
            //   return false;
            // }
        }) : stores;
    };
    StoreFilterPipe = __decorate([
        core.Pipe({
            name: 'storeFilter'
        })
    ], StoreFilterPipe);
    return StoreFilterPipe;
}());

var StoreFieldFilterPipe = (function () {
    function StoreFieldFilterPipe() {
    }
    StoreFieldFilterPipe.prototype.transform = function (stores, filterBy) {
        filterBy = filterBy ? filterBy.toLocaleLowerCase() : null;
        return filterBy ? stores.filter(function (store) {
            return store.hasOwnProperty(filterBy);
        }) : stores;
    };
    StoreFieldFilterPipe = __decorate([
        core.Pipe({
            name: 'storeFieldFilter'
        })
    ], StoreFieldFilterPipe);
    return StoreFieldFilterPipe;
}());

var StoreOrderByFilterPipe = (function () {
    function StoreOrderByFilterPipe() {
    }
    StoreOrderByFilterPipe.prototype.transform = function (value, orderBy) {
        orderBy = orderBy ? orderBy.toLocaleLowerCase() : null;
        return orderBy ? (function () {
            // Sort Function
            value.sort(function (a, b) {
                if (a[orderBy].toLowerCase() < b[orderBy].toLowerCase()) {
                    return -1;
                }
                else if (a[orderBy].toLowerCase() > b[orderBy].toLowerCase()) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            return value;
        }()) : value;
    };
    StoreOrderByFilterPipe = __decorate([
        core.Pipe({
            name: 'orderBy'
        })
    ], StoreOrderByFilterPipe);
    return StoreOrderByFilterPipe;
}());

var StoreService = (function () {
    // private stores: Observable<IStore[]>;
    // private store: Observable<IStore>;
    function StoreService(http, logger) {
        this.http = http;
        this.logger = logger;
        // private storeUrl = 'api/data/stores.json';
        this.storeUrl = 'api/stores';
    }
    StoreService.prototype.getStores = function () {
        // if (!this.stores) {
        return this.http.get(this.storeUrl)
            .map(function (response) { return response.json().data || {}; })
            .publishReplay(1)
            .refCount()
            .catch(this.logger.handleError);
        // }
        // return this.stores;
    };
    StoreService.prototype.deleteStore = function (id) {
        var url = this.storeUrl + "/" + id;
        return this.http.delete(url)
            .map(function (response) { return response.json(); })
            .catch(this.logger.handleError);
    };
    StoreService = __decorate([
        core.Injectable()
    ], StoreService);
    return StoreService;
}());

var StoreModule = (function () {
    function StoreModule() {
    }
    StoreModule = __decorate([
        core.NgModule({
            declarations: [
                StoreListComponent,
                StoreListMapDialogComponent,
                StoreFilterPipe,
                StoreFieldFilterPipe,
                StoreOrderByFilterPipe
            ],
            imports: [
                SharedModule,
                Ng2MapModule.forRoot({ apiUrl: 'https://maps.google.com/maps/api/js?key=AIzaSyB53S10hi3txW2AQX1MqPS0yFsT5wTaWDk' })
            ],
            entryComponents: [
                StoreListMapDialogComponent
            ],
            providers: [
                StoreService
            ]
        })
    ], StoreModule);
    return StoreModule;
}());

var AppComponent = (function () {
    function AppComponent(snackBar) {
        this.snackBar = snackBar;
        this.pageTitle = 'Store Manager';
        this.snackBarMsg = 'Store Manager App v1.0.0 | github.com/rramadev';
    }
    AppComponent.prototype.openSnackBar = function () {
        this.snackBar.open(this.snackBarMsg, '| Close', {
            duration: 3000
        });
    };
    AppComponent = __decorate([
        core.Component({
            selector: 'sm-app',
            template: "<header>\n  <nav class='navbar'>\n    <ul class='nav navbar-nav'>\n      <li><a [routerLink]=\"['/welcome']\">Home</a></li>\n      <li><a [routerLink]=\"['/stores']\">Store List</a></li>\n      <li><a [routerLink]=\"['/products']\">Product List</a></li>\n      <li><a id=\"about\" (click)=\"openSnackBar()\">About</a></li>\n    </ul>\n  </nav>\n</header>\n\n<section class='container main'>\n  <router-outlet></router-outlet>\n\n  <footer>\n    <div class=\"footer\">\n      <p id=\"footerText\">Angular2 Demo - Store Manager App v1.0.0 - github.com/rramadev &copy; 2017.</p>\n    </div>\n  </footer>\n</section>\n"
        })
    ], AppComponent);
    return AppComponent;
}());

var AppModule = (function () {
    function AppModule() {
    }
    AppModule = __decorate([
        core.NgModule({
            declarations: [
                AppComponent,
                WelcomeComponent
            ],
            imports: [
                _angular_platformBrowser.BrowserModule,
                _angular_http.HttpModule,
                CoreModule,
                SharedModule,
                ProductModule,
                StoreModule,
                AppRoutingModule
            ],
            bootstrap: [AppComponent]
        })
    ], AppModule);
    return AppModule;
}());

// Enable production mode unless running locally
if (!/localhost/.test(document.location.host)) {
    core.enableProdMode();
}
_angular_platformBrowserDynamic.platformBrowserDynamic().bootstrapModule(AppModule)
    .then(function (success) { return console.log("Bootstrap success"); })
    .catch(function (err) { return console.error(err); });

}(_angular_platformBrowserDynamic,core,_angular_platformBrowser,_angular_http,_angular_router,_angular_forms,angularInMemoryWebApi,_angular_common,_angular_material));
